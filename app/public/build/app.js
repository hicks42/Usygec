(self["webpackChunk"] = self["webpackChunk"] || []).push([["app"],{

/***/ "./assets/app.js":
/*!***********************!*\
  !*** ./assets/app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_app_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/app.scss */ "./assets/styles/app.scss");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _js_bootstrap_min_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/bootstrap.min.js */ "./assets/js/bootstrap.min.js");
/* harmony import */ var _js_bootstrap_min_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_js_bootstrap_min_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _js_count_up_min_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/count-up.min.js */ "./assets/js/count-up.min.js");
/* harmony import */ var _js_count_up_min_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_count_up_min_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _js_tiny_slider_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/tiny-slider.js */ "./assets/js/tiny-slider.js");
/* harmony import */ var _js_tiny_slider_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_js_tiny_slider_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _js_glightbox_min_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js/glightbox.min.js */ "./assets/js/glightbox.min.js");
/* harmony import */ var _js_glightbox_min_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_js_glightbox_min_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _js_imagesloaded_min_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./js/imagesloaded.min.js */ "./assets/js/imagesloaded.min.js");
/* harmony import */ var _js_imagesloaded_min_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_js_imagesloaded_min_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _js_isotope_min_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./js/isotope.min.js */ "./assets/js/isotope.min.js");
/* harmony import */ var _js_isotope_min_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_js_isotope_min_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _js_wow_min_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./js/wow.min.js */ "./assets/js/wow.min.js");
/* harmony import */ var _js_wow_min_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_js_wow_min_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _js_web_animations_min_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./js/web-animations.min.js */ "./assets/js/web-animations.min.js");
/* harmony import */ var _js_web_animations_min_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_js_web_animations_min_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _js_main_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./js/main.js */ "./assets/js/main.js");
/* harmony import */ var _js_main_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_js_main_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _js_flatpickr__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./js/flatpickr */ "./assets/js/flatpickr.js");
/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.esm.js");
/*
 * Welcome to your app's main JavaScript file!
 *
 * We recommend including the built version of this JavaScript file
 * (and its CSS file) in your base layout (base.html.twig).
 */

// any CSS you import will output into a single css file (app.css in this case)



// start the Stimulus application
// import $ from 'jquery';
 // Import jQuery first
var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
__webpack_require__.g.$ = __webpack_require__.g.jQuery = $;










window.Popper = __webpack_require__(/*! ./js/popper.js */ "./assets/js/popper.js");

// import './bootstrap'; //css replaced by bootstrap.min
// import 'bootstrap'; //dans node_modules

// this to active the bootstrap popover functions

$(function () {
  $('[data-toggle="popover"]').popover();
});

// faire apparaître le nom de l’image apparaît dans le champs du formulaire
// $('.custom-file-input').on('change', function (e) {
//   var inputFile = e.currentTarget;
//  $(inputFile).parent().find('.custom-file-label').html(inputFile.files[0].name);
// });

/***/ }),

/***/ "./assets/js/bootstrap.min.js":
/*!************************************!*\
  !*** ./assets/js/bootstrap.min.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/esnext.global-this.js */ "./node_modules/core-js/modules/esnext.global-this.js");
__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
__webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");
__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");
__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
__webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
  * Bootstrap v5.0.0-beta1 (https://getbootstrap.com/)
  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function (t, e) {
  "object" == ( false ? 0 : _typeof(exports)) && "undefined" != "object" ? module.exports = e(__webpack_require__(/*! ./popper.js */ "./assets/js/popper.js")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./popper.js */ "./assets/js/popper.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(this, function (t) {
  "use strict";

  function e(t) {
    return t && "object" == _typeof(t) && "default" in t ? t : {
      "default": t
    };
  }
  var n = e(t);
  function i(t, e) {
    for (var n = 0; n < e.length; n++) {
      var i = e[n];
      i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
    }
  }
  function o(t, e, n) {
    return e && i(t.prototype, e), n && i(t, n), t;
  }
  function s() {
    return (s = Object.assign || function (t) {
      for (var e = 1; e < arguments.length; e++) {
        var n = arguments[e];
        for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
      }
      return t;
    }).apply(this, arguments);
  }
  var r,
    a,
    l,
    c,
    u = function u(t) {
      do {
        t += Math.floor(1e6 * Math.random());
      } while (document.getElementById(t));
      return t;
    },
    h = function h(t) {
      var e = t.getAttribute("data-target");
      if (!e || "#" === e) {
        var n = t.getAttribute("href");
        e = n && "#" !== n ? n.trim() : null;
      }
      return e;
    },
    f = function f(t) {
      var e = h(t);
      return e && document.querySelector(e) ? e : null;
    },
    d = function d(t) {
      var e = h(t);
      return e ? document.querySelector(e) : null;
    },
    g = function g(t) {
      if (!t) return 0;
      var e = window.getComputedStyle(t),
        n = e.transitionDuration,
        i = e.transitionDelay,
        o = parseFloat(n),
        s = parseFloat(i);
      return o || s ? (n = n.split(",")[0], i = i.split(",")[0], 1e3 * (parseFloat(n) + parseFloat(i))) : 0;
    },
    p = function p(t) {
      t.dispatchEvent(new Event("transitionend"));
    },
    m = function m(t) {
      return (t[0] || t).nodeType;
    },
    _ = function _(t, e) {
      var n = !1,
        i = e + 5;
      t.addEventListener("transitionend", function e() {
        n = !0, t.removeEventListener("transitionend", e);
      }), setTimeout(function () {
        n || p(t);
      }, i);
    },
    v = function v(t, e, n) {
      Object.keys(n).forEach(function (i) {
        var o,
          s = n[i],
          r = e[i],
          a = r && m(r) ? "element" : null == (o = r) ? "" + o : {}.toString.call(o).match(/\s([a-z]+)/i)[1].toLowerCase();
        if (!new RegExp(s).test(a)) throw new Error(t.toUpperCase() + ': Option "' + i + '" provided type "' + a + '" but expected type "' + s + '".');
      });
    },
    b = function b(t) {
      if (!t) return !1;
      if (t.style && t.parentNode && t.parentNode.style) {
        var e = getComputedStyle(t),
          n = getComputedStyle(t.parentNode);
        return "none" !== e.display && "none" !== n.display && "hidden" !== e.visibility;
      }
      return !1;
    },
    y = function y() {
      return function () {};
    },
    w = function w(t) {
      return t.offsetHeight;
    },
    E = function E() {
      var t = __webpack_provided_window_dot_jQuery;
      return t && !document.body.hasAttribute("data-no-jquery") ? t : null;
    },
    T = (r = {}, a = 1, {
      set: function set(t, e, n) {
        void 0 === t.bsKey && (t.bsKey = {
          key: e,
          id: a
        }, a++), r[t.bsKey.id] = n;
      },
      get: function get(t, e) {
        if (!t || void 0 === t.bsKey) return null;
        var n = t.bsKey;
        return n.key === e ? r[n.id] : null;
      },
      "delete": function _delete(t, e) {
        if (void 0 !== t.bsKey) {
          var n = t.bsKey;
          n.key === e && (delete r[n.id], delete t.bsKey);
        }
      }
    }),
    k = function k(t, e, n) {
      T.set(t, e, n);
    },
    L = function L(t, e) {
      return T.get(t, e);
    },
    C = function C(t, e) {
      T["delete"](t, e);
    },
    A = Element.prototype.querySelectorAll,
    S = Element.prototype.querySelector,
    D = (l = new CustomEvent("Bootstrap", {
      cancelable: !0
    }), (c = document.createElement("div")).addEventListener("Bootstrap", function () {
      return null;
    }), l.preventDefault(), c.dispatchEvent(l), l.defaultPrevented),
    I = /:scope\b/;
  (function () {
    var t = document.createElement("div");
    try {
      t.querySelectorAll(":scope *");
    } catch (t) {
      return !1;
    }
    return !0;
  })() || (A = function A(t) {
    if (!I.test(t)) return this.querySelectorAll(t);
    var e = Boolean(this.id);
    e || (this.id = u("scope"));
    var n = null;
    try {
      t = t.replace(I, "#" + this.id), n = this.querySelectorAll(t);
    } finally {
      e || this.removeAttribute("id");
    }
    return n;
  }, S = function S(t) {
    if (!I.test(t)) return this.querySelector(t);
    var e = A.call(this, t);
    return void 0 !== e[0] ? e[0] : null;
  });
  var O = E(),
    N = /[^.]*(?=\..*)\.|.*/,
    j = /\..*/,
    x = /::\d+$/,
    P = {},
    R = 1,
    H = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    },
    B = ["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"];
  function M(t, e) {
    return e && e + "::" + R++ || t.uidEvent || R++;
  }
  function Q(t) {
    var e = M(t);
    return t.uidEvent = e, P[e] = P[e] || {}, P[e];
  }
  function U(t, e, n) {
    void 0 === n && (n = null);
    for (var i = Object.keys(t), o = 0, s = i.length; o < s; o++) {
      var r = t[i[o]];
      if (r.originalHandler === e && r.delegationSelector === n) return r;
    }
    return null;
  }
  function F(t, e, n) {
    var i = "string" == typeof e,
      o = i ? n : e,
      s = t.replace(j, ""),
      r = H[s];
    return r && (s = r), B.indexOf(s) > -1 || (s = t), [i, o, s];
  }
  function W(t, e, n, i, o) {
    if ("string" == typeof e && t) {
      n || (n = i, i = null);
      var s = F(e, n, i),
        r = s[0],
        a = s[1],
        l = s[2],
        c = Q(t),
        u = c[l] || (c[l] = {}),
        h = U(u, a, r ? n : null);
      if (h) h.oneOff = h.oneOff && o;else {
        var f = M(a, e.replace(N, "")),
          d = r ? function (t, e, n) {
            return function i(o) {
              for (var s = t.querySelectorAll(e), r = o.target; r && r !== this; r = r.parentNode) for (var a = s.length; a--;) if (s[a] === r) return o.delegateTarget = r, i.oneOff && V.off(t, o.type, n), n.apply(r, [o]);
              return null;
            };
          }(t, n, i) : function (t, e) {
            return function n(i) {
              return i.delegateTarget = t, n.oneOff && V.off(t, i.type, e), e.apply(t, [i]);
            };
          }(t, n);
        d.delegationSelector = r ? n : null, d.originalHandler = a, d.oneOff = o, d.uidEvent = f, u[f] = d, t.addEventListener(l, d, r);
      }
    }
  }
  function K(t, e, n, i, o) {
    var s = U(e[n], i, o);
    s && (t.removeEventListener(n, s, Boolean(o)), delete e[n][s.uidEvent]);
  }
  var V = {
      on: function on(t, e, n, i) {
        W(t, e, n, i, !1);
      },
      one: function one(t, e, n, i) {
        W(t, e, n, i, !0);
      },
      off: function off(t, e, n, i) {
        if ("string" == typeof e && t) {
          var o = F(e, n, i),
            s = o[0],
            r = o[1],
            a = o[2],
            l = a !== e,
            c = Q(t),
            u = "." === e.charAt(0);
          if (void 0 === r) {
            u && Object.keys(c).forEach(function (n) {
              !function (t, e, n, i) {
                var o = e[n] || {};
                Object.keys(o).forEach(function (s) {
                  if (s.indexOf(i) > -1) {
                    var r = o[s];
                    K(t, e, n, r.originalHandler, r.delegationSelector);
                  }
                });
              }(t, c, n, e.slice(1));
            });
            var h = c[a] || {};
            Object.keys(h).forEach(function (n) {
              var i = n.replace(x, "");
              if (!l || e.indexOf(i) > -1) {
                var o = h[n];
                K(t, c, a, o.originalHandler, o.delegationSelector);
              }
            });
          } else {
            if (!c || !c[a]) return;
            K(t, c, a, r, s ? n : null);
          }
        }
      },
      trigger: function trigger(t, e, n) {
        if ("string" != typeof e || !t) return null;
        var i,
          o = e.replace(j, ""),
          s = e !== o,
          r = B.indexOf(o) > -1,
          a = !0,
          l = !0,
          c = !1,
          u = null;
        return s && O && (i = O.Event(e, n), O(t).trigger(i), a = !i.isPropagationStopped(), l = !i.isImmediatePropagationStopped(), c = i.isDefaultPrevented()), r ? (u = document.createEvent("HTMLEvents")).initEvent(o, a, !0) : u = new CustomEvent(e, {
          bubbles: a,
          cancelable: !0
        }), void 0 !== n && Object.keys(n).forEach(function (t) {
          Object.defineProperty(u, t, {
            get: function get() {
              return n[t];
            }
          });
        }), c && (u.preventDefault(), D || Object.defineProperty(u, "defaultPrevented", {
          get: function get() {
            return !0;
          }
        })), l && t.dispatchEvent(u), u.defaultPrevented && void 0 !== i && i.preventDefault(), u;
      }
    },
    q = "alert",
    z = function () {
      function t(t) {
        this._element = t, this._element && k(t, "bs.alert", this);
      }
      var e = t.prototype;
      return e.close = function (t) {
        var e = t ? this._getRootElement(t) : this._element,
          n = this._triggerCloseEvent(e);
        null === n || n.defaultPrevented || this._removeElement(e);
      }, e.dispose = function () {
        C(this._element, "bs.alert"), this._element = null;
      }, e._getRootElement = function (t) {
        return d(t) || t.closest(".alert");
      }, e._triggerCloseEvent = function (t) {
        return V.trigger(t, "close.bs.alert");
      }, e._removeElement = function (t) {
        var e = this;
        if (t.classList.remove("show"), t.classList.contains("fade")) {
          var n = g(t);
          V.one(t, "transitionend", function () {
            return e._destroyElement(t);
          }), _(t, n);
        } else this._destroyElement(t);
      }, e._destroyElement = function (t) {
        t.parentNode && t.parentNode.removeChild(t), V.trigger(t, "closed.bs.alert");
      }, t.jQueryInterface = function (e) {
        return this.each(function () {
          var n = L(this, "bs.alert");
          n || (n = new t(this)), "close" === e && n[e](this);
        });
      }, t.handleDismiss = function (t) {
        return function (e) {
          e && e.preventDefault(), t.close(this);
        };
      }, t.getInstance = function (t) {
        return L(t, "bs.alert");
      }, o(t, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }]), t;
    }();
  V.on(document, "click.bs.alert.data-api", '[data-dismiss="alert"]', z.handleDismiss(new z()));
  var X = E();
  if (X) {
    var Y = X.fn[q];
    X.fn[q] = z.jQueryInterface, X.fn[q].Constructor = z, X.fn[q].noConflict = function () {
      return X.fn[q] = Y, z.jQueryInterface;
    };
  }
  var $ = function () {
    function t(t) {
      this._element = t, k(t, "bs.button", this);
    }
    var e = t.prototype;
    return e.toggle = function () {
      this._element.setAttribute("aria-pressed", this._element.classList.toggle("active"));
    }, e.dispose = function () {
      C(this._element, "bs.button"), this._element = null;
    }, t.jQueryInterface = function (e) {
      return this.each(function () {
        var n = L(this, "bs.button");
        n || (n = new t(this)), "toggle" === e && n[e]();
      });
    }, t.getInstance = function (t) {
      return L(t, "bs.button");
    }, o(t, null, [{
      key: "VERSION",
      get: function get() {
        return "5.0.0-alpha2";
      }
    }]), t;
  }();
  V.on(document, "click.bs.button.data-api", '[data-toggle="button"]', function (t) {
    t.preventDefault();
    var e = t.target.closest('[data-toggle="button"]'),
      n = L(e, "bs.button");
    n || (n = new $(e)), n.toggle();
  });
  var G = E();
  if (G) {
    var Z = G.fn.button;
    G.fn.button = $.jQueryInterface, G.fn.button.Constructor = $, G.fn.button.noConflict = function () {
      return G.fn.button = Z, $.jQueryInterface;
    };
  }
  function J(t) {
    return "true" === t || "false" !== t && (t === Number(t).toString() ? Number(t) : "" === t || "null" === t ? null : t);
  }
  function tt(t) {
    return t.replace(/[A-Z]/g, function (t) {
      return "-" + t.toLowerCase();
    });
  }
  var et = {
      setDataAttribute: function setDataAttribute(t, e, n) {
        t.setAttribute("data-" + tt(e), n);
      },
      removeDataAttribute: function removeDataAttribute(t, e) {
        t.removeAttribute("data-" + tt(e));
      },
      getDataAttributes: function getDataAttributes(t) {
        if (!t) return {};
        var e = s({}, t.dataset);
        return Object.keys(e).forEach(function (t) {
          e[t] = J(e[t]);
        }), e;
      },
      getDataAttribute: function getDataAttribute(t, e) {
        return J(t.getAttribute("data-" + tt(e)));
      },
      offset: function offset(t) {
        var e = t.getBoundingClientRect();
        return {
          top: e.top + document.body.scrollTop,
          left: e.left + document.body.scrollLeft
        };
      },
      position: function position(t) {
        return {
          top: t.offsetTop,
          left: t.offsetLeft
        };
      },
      toggleClass: function toggleClass(t, e) {
        t && (t.classList.contains(e) ? t.classList.remove(e) : t.classList.add(e));
      }
    },
    nt = {
      matches: function matches(t, e) {
        return t.matches(e);
      },
      find: function find(t, e) {
        var n;
        return void 0 === e && (e = document.documentElement), (n = []).concat.apply(n, A.call(e, t));
      },
      findOne: function findOne(t, e) {
        return void 0 === e && (e = document.documentElement), S.call(e, t);
      },
      children: function children(t, e) {
        var n,
          i = (n = []).concat.apply(n, t.children);
        return i.filter(function (t) {
          return t.matches(e);
        });
      },
      parents: function parents(t, e) {
        for (var n = [], i = t.parentNode; i && i.nodeType === Node.ELEMENT_NODE && 3 !== i.nodeType;) this.matches(i, e) && n.push(i), i = i.parentNode;
        return n;
      },
      prev: function prev(t, e) {
        for (var n = t.previousElementSibling; n;) {
          if (n.matches(e)) return [n];
          n = n.previousElementSibling;
        }
        return [];
      },
      next: function next(t, e) {
        for (var n = t.nextElementSibling; n;) {
          if (this.matches(n, e)) return [n];
          n = n.nextElementSibling;
        }
        return [];
      }
    },
    it = "carousel",
    ot = ".bs.carousel",
    st = {
      interval: 5e3,
      keyboard: !0,
      slide: !1,
      pause: "hover",
      wrap: !0,
      touch: !0
    },
    rt = {
      interval: "(number|boolean)",
      keyboard: "boolean",
      slide: "(boolean|string)",
      pause: "(string|boolean)",
      wrap: "boolean",
      touch: "boolean"
    },
    at = {
      TOUCH: "touch",
      PEN: "pen"
    },
    lt = function () {
      function t(t, e) {
        this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._element = t, this._indicatorsElement = nt.findOne(".carousel-indicators", this._element), this._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent), this._addEventListeners(), k(t, "bs.carousel", this);
      }
      var e = t.prototype;
      return e.next = function () {
        this._isSliding || this._slide("next");
      }, e.nextWhenVisible = function () {
        !document.hidden && b(this._element) && this.next();
      }, e.prev = function () {
        this._isSliding || this._slide("prev");
      }, e.pause = function (t) {
        t || (this._isPaused = !0), nt.findOne(".carousel-item-next, .carousel-item-prev", this._element) && (p(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
      }, e.cycle = function (t) {
        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
      }, e.to = function (t) {
        var e = this;
        this._activeElement = nt.findOne(".active.carousel-item", this._element);
        var n = this._getItemIndex(this._activeElement);
        if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) V.one(this._element, "slid.bs.carousel", function () {
          return e.to(t);
        });else {
          if (n === t) return this.pause(), void this.cycle();
          var i = t > n ? "next" : "prev";
          this._slide(i, this._items[t]);
        }
      }, e.dispose = function () {
        V.off(this._element, ot), C(this._element, "bs.carousel"), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
      }, e._getConfig = function (t) {
        return t = s({}, st, t), v(it, t, rt), t;
      }, e._handleSwipe = function () {
        var t = Math.abs(this.touchDeltaX);
        if (!(t <= 40)) {
          var e = t / this.touchDeltaX;
          this.touchDeltaX = 0, e > 0 && this.prev(), e < 0 && this.next();
        }
      }, e._addEventListeners = function () {
        var t = this;
        this._config.keyboard && V.on(this._element, "keydown.bs.carousel", function (e) {
          return t._keydown(e);
        }), "hover" === this._config.pause && (V.on(this._element, "mouseenter.bs.carousel", function (e) {
          return t.pause(e);
        }), V.on(this._element, "mouseleave.bs.carousel", function (e) {
          return t.cycle(e);
        })), this._config.touch && this._touchSupported && this._addTouchEventListeners();
      }, e._addTouchEventListeners = function () {
        var t = this,
          e = function e(_e) {
            t._pointerEvent && at[_e.pointerType.toUpperCase()] ? t.touchStartX = _e.clientX : t._pointerEvent || (t.touchStartX = _e.touches[0].clientX);
          },
          n = function n(e) {
            t._pointerEvent && at[e.pointerType.toUpperCase()] && (t.touchDeltaX = e.clientX - t.touchStartX), t._handleSwipe(), "hover" === t._config.pause && (t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function (e) {
              return t.cycle(e);
            }, 500 + t._config.interval));
          };
        nt.find(".carousel-item img", this._element).forEach(function (t) {
          V.on(t, "dragstart.bs.carousel", function (t) {
            return t.preventDefault();
          });
        }), this._pointerEvent ? (V.on(this._element, "pointerdown.bs.carousel", function (t) {
          return e(t);
        }), V.on(this._element, "pointerup.bs.carousel", function (t) {
          return n(t);
        }), this._element.classList.add("pointer-event")) : (V.on(this._element, "touchstart.bs.carousel", function (t) {
          return e(t);
        }), V.on(this._element, "touchmove.bs.carousel", function (e) {
          return function (e) {
            e.touches && e.touches.length > 1 ? t.touchDeltaX = 0 : t.touchDeltaX = e.touches[0].clientX - t.touchStartX;
          }(e);
        }), V.on(this._element, "touchend.bs.carousel", function (t) {
          return n(t);
        }));
      }, e._keydown = function (t) {
        if (!/input|textarea/i.test(t.target.tagName)) switch (t.key) {
          case "ArrowLeft":
            t.preventDefault(), this.prev();
            break;
          case "ArrowRight":
            t.preventDefault(), this.next();
        }
      }, e._getItemIndex = function (t) {
        return this._items = t && t.parentNode ? nt.find(".carousel-item", t.parentNode) : [], this._items.indexOf(t);
      }, e._getItemByDirection = function (t, e) {
        var n = "next" === t,
          i = "prev" === t,
          o = this._getItemIndex(e),
          s = this._items.length - 1;
        if ((i && 0 === o || n && o === s) && !this._config.wrap) return e;
        var r = (o + ("prev" === t ? -1 : 1)) % this._items.length;
        return -1 === r ? this._items[this._items.length - 1] : this._items[r];
      }, e._triggerSlideEvent = function (t, e) {
        var n = this._getItemIndex(t),
          i = this._getItemIndex(nt.findOne(".active.carousel-item", this._element));
        return V.trigger(this._element, "slide.bs.carousel", {
          relatedTarget: t,
          direction: e,
          from: i,
          to: n
        });
      }, e._setActiveIndicatorElement = function (t) {
        if (this._indicatorsElement) {
          for (var e = nt.find(".active", this._indicatorsElement), n = 0; n < e.length; n++) e[n].classList.remove("active");
          var i = this._indicatorsElement.children[this._getItemIndex(t)];
          i && i.classList.add("active");
        }
      }, e._slide = function (t, e) {
        var n,
          i,
          o,
          s = this,
          r = nt.findOne(".active.carousel-item", this._element),
          a = this._getItemIndex(r),
          l = e || r && this._getItemByDirection(t, r),
          c = this._getItemIndex(l),
          u = Boolean(this._interval);
        if ("next" === t ? (n = "carousel-item-left", i = "carousel-item-next", o = "left") : (n = "carousel-item-right", i = "carousel-item-prev", o = "right"), l && l.classList.contains("active")) this._isSliding = !1;else if (!this._triggerSlideEvent(l, o).defaultPrevented && r && l) {
          if (this._isSliding = !0, u && this.pause(), this._setActiveIndicatorElement(l), this._element.classList.contains("slide")) {
            l.classList.add(i), w(l), r.classList.add(n), l.classList.add(n);
            var h = parseInt(l.getAttribute("data-interval"), 10);
            h ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = h) : this._config.interval = this._config.defaultInterval || this._config.interval;
            var f = g(r);
            V.one(r, "transitionend", function () {
              l.classList.remove(n, i), l.classList.add("active"), r.classList.remove("active", i, n), s._isSliding = !1, setTimeout(function () {
                V.trigger(s._element, "slid.bs.carousel", {
                  relatedTarget: l,
                  direction: o,
                  from: a,
                  to: c
                });
              }, 0);
            }), _(r, f);
          } else r.classList.remove("active"), l.classList.add("active"), this._isSliding = !1, V.trigger(this._element, "slid.bs.carousel", {
            relatedTarget: l,
            direction: o,
            from: a,
            to: c
          });
          u && this.cycle();
        }
      }, t.carouselInterface = function (e, n) {
        var i = L(e, "bs.carousel"),
          o = s({}, st, et.getDataAttributes(e));
        "object" == _typeof(n) && (o = s({}, o, n));
        var r = "string" == typeof n ? n : o.slide;
        if (i || (i = new t(e, o)), "number" == typeof n) i.to(n);else if ("string" == typeof r) {
          if (void 0 === i[r]) throw new TypeError('No method named "' + r + '"');
          i[r]();
        } else o.interval && o.ride && (i.pause(), i.cycle());
      }, t.jQueryInterface = function (e) {
        return this.each(function () {
          t.carouselInterface(this, e);
        });
      }, t.dataApiClickHandler = function (e) {
        var n = d(this);
        if (n && n.classList.contains("carousel")) {
          var i = s({}, et.getDataAttributes(n), et.getDataAttributes(this)),
            o = this.getAttribute("data-slide-to");
          o && (i.interval = !1), t.carouselInterface(n, i), o && L(n, "bs.carousel").to(o), e.preventDefault();
        }
      }, t.getInstance = function (t) {
        return L(t, "bs.carousel");
      }, o(t, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }, {
        key: "Default",
        get: function get() {
          return st;
        }
      }]), t;
    }();
  V.on(document, "click.bs.carousel.data-api", "[data-slide], [data-slide-to]", lt.dataApiClickHandler), V.on(window, "load.bs.carousel.data-api", function () {
    for (var t = nt.find('[data-ride="carousel"]'), e = 0, n = t.length; e < n; e++) lt.carouselInterface(t[e], L(t[e], "bs.carousel"));
  });
  var ct = E();
  if (ct) {
    var ut = ct.fn[it];
    ct.fn[it] = lt.jQueryInterface, ct.fn[it].Constructor = lt, ct.fn[it].noConflict = function () {
      return ct.fn[it] = ut, lt.jQueryInterface;
    };
  }
  var ht = "collapse",
    ft = {
      toggle: !0,
      parent: ""
    },
    dt = {
      toggle: "boolean",
      parent: "(string|element)"
    },
    gt = function () {
      function t(t, e) {
        this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = nt.find('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]');
        for (var n = nt.find('[data-toggle="collapse"]'), i = 0, o = n.length; i < o; i++) {
          var s = n[i],
            r = f(s),
            a = nt.find(r).filter(function (e) {
              return e === t;
            });
          null !== r && a.length && (this._selector = r, this._triggerArray.push(s));
        }
        this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle(), k(t, "bs.collapse", this);
      }
      var e = t.prototype;
      return e.toggle = function () {
        this._element.classList.contains("show") ? this.hide() : this.show();
      }, e.show = function () {
        var e = this;
        if (!this._isTransitioning && !this._element.classList.contains("show")) {
          var n, i;
          this._parent && 0 === (n = nt.find(".show, .collapsing", this._parent).filter(function (t) {
            return "string" == typeof e._config.parent ? t.getAttribute("data-parent") === e._config.parent : t.classList.contains("collapse");
          })).length && (n = null);
          var o = nt.findOne(this._selector);
          if (n) {
            var s = n.filter(function (t) {
              return o !== t;
            });
            if ((i = s[0] ? L(s[0], "bs.collapse") : null) && i._isTransitioning) return;
          }
          if (!V.trigger(this._element, "show.bs.collapse").defaultPrevented) {
            n && n.forEach(function (e) {
              o !== e && t.collapseInterface(e, "hide"), i || k(e, "bs.collapse", null);
            });
            var r = this._getDimension();
            this._element.classList.remove("collapse"), this._element.classList.add("collapsing"), this._element.style[r] = 0, this._triggerArray.length && this._triggerArray.forEach(function (t) {
              t.classList.remove("collapsed"), t.setAttribute("aria-expanded", !0);
            }), this.setTransitioning(!0);
            var a = "scroll" + (r[0].toUpperCase() + r.slice(1)),
              l = g(this._element);
            V.one(this._element, "transitionend", function () {
              e._element.classList.remove("collapsing"), e._element.classList.add("collapse", "show"), e._element.style[r] = "", e.setTransitioning(!1), V.trigger(e._element, "shown.bs.collapse");
            }), _(this._element, l), this._element.style[r] = this._element[a] + "px";
          }
        }
      }, e.hide = function () {
        var t = this;
        if (!this._isTransitioning && this._element.classList.contains("show") && !V.trigger(this._element, "hide.bs.collapse").defaultPrevented) {
          var e = this._getDimension();
          this._element.style[e] = this._element.getBoundingClientRect()[e] + "px", w(this._element), this._element.classList.add("collapsing"), this._element.classList.remove("collapse", "show");
          var n = this._triggerArray.length;
          if (n > 0) for (var i = 0; i < n; i++) {
            var o = this._triggerArray[i],
              s = d(o);
            s && !s.classList.contains("show") && (o.classList.add("collapsed"), o.setAttribute("aria-expanded", !1));
          }
          this.setTransitioning(!0);
          this._element.style[e] = "";
          var r = g(this._element);
          V.one(this._element, "transitionend", function () {
            t.setTransitioning(!1), t._element.classList.remove("collapsing"), t._element.classList.add("collapse"), V.trigger(t._element, "hidden.bs.collapse");
          }), _(this._element, r);
        }
      }, e.setTransitioning = function (t) {
        this._isTransitioning = t;
      }, e.dispose = function () {
        C(this._element, "bs.collapse"), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
      }, e._getConfig = function (t) {
        return (t = s({}, ft, t)).toggle = Boolean(t.toggle), v(ht, t, dt), t;
      }, e._getDimension = function () {
        return this._element.classList.contains("width") ? "width" : "height";
      }, e._getParent = function () {
        var t = this,
          e = this._config.parent;
        m(e) ? void 0 === e.jquery && void 0 === e[0] || (e = e[0]) : e = nt.findOne(e);
        var n = '[data-toggle="collapse"][data-parent="' + e + '"]';
        return nt.find(n, e).forEach(function (e) {
          var n = d(e);
          t._addAriaAndCollapsedClass(n, [e]);
        }), e;
      }, e._addAriaAndCollapsedClass = function (t, e) {
        if (t && e.length) {
          var n = t.classList.contains("show");
          e.forEach(function (t) {
            n ? t.classList.remove("collapsed") : t.classList.add("collapsed"), t.setAttribute("aria-expanded", n);
          });
        }
      }, t.collapseInterface = function (e, n) {
        var i = L(e, "bs.collapse"),
          o = s({}, ft, et.getDataAttributes(e), "object" == _typeof(n) && n ? n : {});
        if (!i && o.toggle && "string" == typeof n && /show|hide/.test(n) && (o.toggle = !1), i || (i = new t(e, o)), "string" == typeof n) {
          if (void 0 === i[n]) throw new TypeError('No method named "' + n + '"');
          i[n]();
        }
      }, t.jQueryInterface = function (e) {
        return this.each(function () {
          t.collapseInterface(this, e);
        });
      }, t.getInstance = function (t) {
        return L(t, "bs.collapse");
      }, o(t, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }, {
        key: "Default",
        get: function get() {
          return ft;
        }
      }]), t;
    }();
  V.on(document, "click.bs.collapse.data-api", '[data-toggle="collapse"]', function (t) {
    "A" === t.target.tagName && t.preventDefault();
    var e = et.getDataAttributes(this),
      n = f(this);
    nt.find(n).forEach(function (t) {
      var n,
        i = L(t, "bs.collapse");
      i ? (null === i._parent && "string" == typeof e.parent && (i._config.parent = e.parent, i._parent = i._getParent()), n = "toggle") : n = e, gt.collapseInterface(t, n);
    });
  });
  var pt = E();
  if (pt) {
    var mt = pt.fn[ht];
    pt.fn[ht] = gt.jQueryInterface, pt.fn[ht].Constructor = gt, pt.fn[ht].noConflict = function () {
      return pt.fn[ht] = mt, gt.jQueryInterface;
    };
  }
  var _t = "dropdown",
    vt = new RegExp("ArrowUp|ArrowDown|Escape"),
    bt = {
      offset: 0,
      flip: !0,
      boundary: "scrollParent",
      reference: "toggle",
      display: "dynamic",
      popperConfig: null
    },
    yt = {
      offset: "(number|string|function)",
      flip: "boolean",
      boundary: "(string|element)",
      reference: "(string|element)",
      display: "string",
      popperConfig: "(null|object)"
    },
    wt = function () {
      function t(t, e) {
        this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners(), k(t, "bs.dropdown", this);
      }
      var e = t.prototype;
      return e.toggle = function () {
        if (!this._element.disabled && !this._element.classList.contains("disabled")) {
          var e = this._element.classList.contains("show");
          t.clearMenus(), e || this.show();
        }
      }, e.show = function () {
        if (!(this._element.disabled || this._element.classList.contains("disabled") || this._menu.classList.contains("show"))) {
          var e = t.getParentFromElement(this._element),
            i = {
              relatedTarget: this._element
            };
          if (!V.trigger(this._element, "show.bs.dropdown", i).defaultPrevented) {
            if (!this._inNavbar) {
              if (void 0 === n["default"]) throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org)");
              var o = this._element;
              "parent" === this._config.reference ? o = e : m(this._config.reference) && (o = this._config.reference, void 0 !== this._config.reference.jquery && (o = this._config.reference[0])), "scrollParent" !== this._config.boundary && e.classList.add("position-static"), this._popper = new n["default"](o, this._menu, this._getPopperConfig());
            }
            var s;
            if ("ontouchstart" in document.documentElement && !e.closest(".navbar-nav")) (s = []).concat.apply(s, document.body.children).forEach(function (t) {
              return V.on(t, "mouseover", null, function () {});
            });
            this._element.focus(), this._element.setAttribute("aria-expanded", !0), et.toggleClass(this._menu, "show"), et.toggleClass(this._element, "show"), V.trigger(e, "shown.bs.dropdown", i);
          }
        }
      }, e.hide = function () {
        if (!this._element.disabled && !this._element.classList.contains("disabled") && this._menu.classList.contains("show")) {
          var e = t.getParentFromElement(this._element),
            n = {
              relatedTarget: this._element
            };
          V.trigger(e, "hide.bs.dropdown", n).defaultPrevented || (this._popper && this._popper.destroy(), et.toggleClass(this._menu, "show"), et.toggleClass(this._element, "show"), V.trigger(e, "hidden.bs.dropdown", n));
        }
      }, e.dispose = function () {
        C(this._element, "bs.dropdown"), V.off(this._element, ".bs.dropdown"), this._element = null, this._menu = null, this._popper && (this._popper.destroy(), this._popper = null);
      }, e.update = function () {
        this._inNavbar = this._detectNavbar(), this._popper && this._popper.scheduleUpdate();
      }, e._addEventListeners = function () {
        var t = this;
        V.on(this._element, "click.bs.dropdown", function (e) {
          e.preventDefault(), e.stopPropagation(), t.toggle();
        });
      }, e._getConfig = function (t) {
        return t = s({}, this.constructor.Default, et.getDataAttributes(this._element), t), v(_t, t, this.constructor.DefaultType), t;
      }, e._getMenuElement = function () {
        return nt.next(this._element, ".dropdown-menu")[0];
      }, e._getPlacement = function () {
        var t = this._element.parentNode,
          e = "bottom-start";
        return t.classList.contains("dropup") ? (e = "top-start", this._menu.classList.contains("dropdown-menu-right") && (e = "top-end")) : t.classList.contains("dropright") ? e = "right-start" : t.classList.contains("dropleft") ? e = "left-start" : this._menu.classList.contains("dropdown-menu-right") && (e = "bottom-end"), e;
      }, e._detectNavbar = function () {
        return Boolean(this._element.closest(".navbar"));
      }, e._getOffset = function () {
        var t = this,
          e = {};
        return "function" == typeof this._config.offset ? e.fn = function (e) {
          return e.offsets = s({}, e.offsets, t._config.offset(e.offsets, t._element) || {}), e;
        } : e.offset = this._config.offset, e;
      }, e._getPopperConfig = function () {
        var t = {
          placement: this._getPlacement(),
          modifiers: {
            offset: this._getOffset(),
            flip: {
              enabled: this._config.flip
            },
            preventOverflow: {
              boundariesElement: this._config.boundary
            }
          }
        };
        return "static" === this._config.display && (t.modifiers.applyStyle = {
          enabled: !1
        }), s({}, t, this._config.popperConfig);
      }, t.dropdownInterface = function (e, n) {
        var i = L(e, "bs.dropdown");
        if (i || (i = new t(e, "object" == _typeof(n) ? n : null)), "string" == typeof n) {
          if (void 0 === i[n]) throw new TypeError('No method named "' + n + '"');
          i[n]();
        }
      }, t.jQueryInterface = function (e) {
        return this.each(function () {
          t.dropdownInterface(this, e);
        });
      }, t.clearMenus = function (e) {
        if (!e || 2 !== e.button && ("keyup" !== e.type || "Tab" === e.key)) for (var n = nt.find('[data-toggle="dropdown"]'), i = 0, o = n.length; i < o; i++) {
          var s = t.getParentFromElement(n[i]),
            r = L(n[i], "bs.dropdown"),
            a = {
              relatedTarget: n[i]
            };
          if (e && "click" === e.type && (a.clickEvent = e), r) {
            var l = r._menu;
            if (n[i].classList.contains("show")) if (!(e && ("click" === e.type && /input|textarea/i.test(e.target.tagName) || "keyup" === e.type && "Tab" === e.key) && l.contains(e.target))) if (!V.trigger(s, "hide.bs.dropdown", a).defaultPrevented) {
              var c;
              if ("ontouchstart" in document.documentElement) (c = []).concat.apply(c, document.body.children).forEach(function (t) {
                return V.off(t, "mouseover", null, function () {});
              });
              n[i].setAttribute("aria-expanded", "false"), r._popper && r._popper.destroy(), l.classList.remove("show"), n[i].classList.remove("show"), V.trigger(s, "hidden.bs.dropdown", a);
            }
          }
        }
      }, t.getParentFromElement = function (t) {
        return d(t) || t.parentNode;
      }, t.dataApiKeydownHandler = function (e) {
        if (!(/input|textarea/i.test(e.target.tagName) ? "Space" === e.key || "Escape" !== e.key && ("ArrowDown" !== e.key && "ArrowUp" !== e.key || e.target.closest(".dropdown-menu")) : !vt.test(e.key)) && (e.preventDefault(), e.stopPropagation(), !this.disabled && !this.classList.contains("disabled"))) {
          var n = t.getParentFromElement(this),
            i = this.classList.contains("show");
          if ("Escape" === e.key) return (this.matches('[data-toggle="dropdown"]') ? this : nt.prev(this, '[data-toggle="dropdown"]')[0]).focus(), void t.clearMenus();
          if (i && "Space" !== e.key) {
            var o = nt.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", n).filter(b);
            if (o.length) {
              var s = o.indexOf(e.target);
              "ArrowUp" === e.key && s > 0 && s--, "ArrowDown" === e.key && s < o.length - 1 && s++, o[s = -1 === s ? 0 : s].focus();
            }
          } else t.clearMenus();
        }
      }, t.getInstance = function (t) {
        return L(t, "bs.dropdown");
      }, o(t, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }, {
        key: "Default",
        get: function get() {
          return bt;
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return yt;
        }
      }]), t;
    }();
  V.on(document, "keydown.bs.dropdown.data-api", '[data-toggle="dropdown"]', wt.dataApiKeydownHandler), V.on(document, "keydown.bs.dropdown.data-api", ".dropdown-menu", wt.dataApiKeydownHandler), V.on(document, "click.bs.dropdown.data-api", wt.clearMenus), V.on(document, "keyup.bs.dropdown.data-api", wt.clearMenus), V.on(document, "click.bs.dropdown.data-api", '[data-toggle="dropdown"]', function (t) {
    t.preventDefault(), t.stopPropagation(), wt.dropdownInterface(this, "toggle");
  }), V.on(document, "click.bs.dropdown.data-api", ".dropdown form", function (t) {
    return t.stopPropagation();
  });
  var Et = E();
  if (Et) {
    var Tt = Et.fn[_t];
    Et.fn[_t] = wt.jQueryInterface, Et.fn[_t].Constructor = wt, Et.fn[_t].noConflict = function () {
      return Et.fn[_t] = Tt, wt.jQueryInterface;
    };
  }
  var kt = {
      backdrop: !0,
      keyboard: !0,
      focus: !0,
      show: !0
    },
    Lt = {
      backdrop: "(boolean|string)",
      keyboard: "boolean",
      focus: "boolean",
      show: "boolean"
    },
    Ct = function () {
      function t(t, e) {
        this._config = this._getConfig(e), this._element = t, this._dialog = nt.findOne(".modal-dialog", t), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0, k(t, "bs.modal", this);
      }
      var e = t.prototype;
      return e.toggle = function (t) {
        return this._isShown ? this.hide() : this.show(t);
      }, e.show = function (t) {
        var e = this;
        if (!this._isShown && !this._isTransitioning) {
          this._element.classList.contains("fade") && (this._isTransitioning = !0);
          var n = V.trigger(this._element, "show.bs.modal", {
            relatedTarget: t
          });
          this._isShown || n.defaultPrevented || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), V.on(this._element, "click.dismiss.bs.modal", '[data-dismiss="modal"]', function (t) {
            return e.hide(t);
          }), V.on(this._dialog, "mousedown.dismiss.bs.modal", function () {
            V.one(e._element, "mouseup.dismiss.bs.modal", function (t) {
              t.target === e._element && (e._ignoreBackdropClick = !0);
            });
          }), this._showBackdrop(function () {
            return e._showElement(t);
          }));
        }
      }, e.hide = function (t) {
        var e = this;
        if ((t && t.preventDefault(), this._isShown && !this._isTransitioning) && !V.trigger(this._element, "hide.bs.modal").defaultPrevented) {
          this._isShown = !1;
          var n = this._element.classList.contains("fade");
          if (n && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), V.off(document, "focusin.bs.modal"), this._element.classList.remove("show"), V.off(this._element, "click.dismiss.bs.modal"), V.off(this._dialog, "mousedown.dismiss.bs.modal"), n) {
            var i = g(this._element);
            V.one(this._element, "transitionend", function (t) {
              return e._hideModal(t);
            }), _(this._element, i);
          } else this._hideModal();
        }
      }, e.dispose = function () {
        [window, this._element, this._dialog].forEach(function (t) {
          return V.off(t, ".bs.modal");
        }), V.off(document, "focusin.bs.modal"), C(this._element, "bs.modal"), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;
      }, e.handleUpdate = function () {
        this._adjustDialog();
      }, e._getConfig = function (t) {
        return t = s({}, kt, t), v("modal", t, Lt), t;
      }, e._showElement = function (t) {
        var e = this,
          n = this._element.classList.contains("fade"),
          i = nt.findOne(".modal-body", this._dialog);
        this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.scrollTop = 0, i && (i.scrollTop = 0), n && w(this._element), this._element.classList.add("show"), this._config.focus && this._enforceFocus();
        var o = function o() {
          e._config.focus && e._element.focus(), e._isTransitioning = !1, V.trigger(e._element, "shown.bs.modal", {
            relatedTarget: t
          });
        };
        if (n) {
          var s = g(this._dialog);
          V.one(this._dialog, "transitionend", o), _(this._dialog, s);
        } else o();
      }, e._enforceFocus = function () {
        var t = this;
        V.off(document, "focusin.bs.modal"), V.on(document, "focusin.bs.modal", function (e) {
          document === e.target || t._element === e.target || t._element.contains(e.target) || t._element.focus();
        });
      }, e._setEscapeEvent = function () {
        var t = this;
        this._isShown ? V.on(this._element, "keydown.dismiss.bs.modal", function (e) {
          t._config.keyboard && "Escape" === e.key ? (e.preventDefault(), t.hide()) : t._config.keyboard || "Escape" !== e.key || t._triggerBackdropTransition();
        }) : V.off(this._element, "keydown.dismiss.bs.modal");
      }, e._setResizeEvent = function () {
        var t = this;
        this._isShown ? V.on(window, "resize.bs.modal", function () {
          return t._adjustDialog();
        }) : V.off(window, "resize.bs.modal");
      }, e._hideModal = function () {
        var t = this;
        this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = !1, this._showBackdrop(function () {
          document.body.classList.remove("modal-open"), t._resetAdjustments(), t._resetScrollbar(), V.trigger(t._element, "hidden.bs.modal");
        });
      }, e._removeBackdrop = function () {
        this._backdrop.parentNode.removeChild(this._backdrop), this._backdrop = null;
      }, e._showBackdrop = function (t) {
        var e = this,
          n = this._element.classList.contains("fade") ? "fade" : "";
        if (this._isShown && this._config.backdrop) {
          if (this._backdrop = document.createElement("div"), this._backdrop.className = "modal-backdrop", n && this._backdrop.classList.add(n), document.body.appendChild(this._backdrop), V.on(this._element, "click.dismiss.bs.modal", function (t) {
            e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && e._triggerBackdropTransition();
          }), n && w(this._backdrop), this._backdrop.classList.add("show"), !n) return void t();
          var i = g(this._backdrop);
          V.one(this._backdrop, "transitionend", t), _(this._backdrop, i);
        } else if (!this._isShown && this._backdrop) {
          this._backdrop.classList.remove("show");
          var o = function o() {
            e._removeBackdrop(), t();
          };
          if (this._element.classList.contains("fade")) {
            var s = g(this._backdrop);
            V.one(this._backdrop, "transitionend", o), _(this._backdrop, s);
          } else o();
        } else t();
      }, e._triggerBackdropTransition = function () {
        var t = this;
        if ("static" === this._config.backdrop) {
          if (V.trigger(this._element, "hidePrevented.bs.modal").defaultPrevented) return;
          var e = this._element.scrollHeight > document.documentElement.clientHeight;
          e || (this._element.style.overflowY = "hidden"), this._element.classList.add("modal-static");
          var n = g(this._dialog);
          V.off(this._element, "transitionend"), V.one(this._element, "transitionend", function () {
            t._element.classList.remove("modal-static"), e || (V.one(t._element, "transitionend", function () {
              t._element.style.overflowY = "";
            }), _(t._element, n));
          }), _(this._element, n), this._element.focus();
        } else this.hide();
      }, e._adjustDialog = function () {
        var t = this._element.scrollHeight > document.documentElement.clientHeight;
        !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
      }, e._resetAdjustments = function () {
        this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
      }, e._checkScrollbar = function () {
        var t = document.body.getBoundingClientRect();
        this._isBodyOverflowing = Math.round(t.left + t.right) < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
      }, e._setScrollbar = function () {
        var t = this;
        if (this._isBodyOverflowing) {
          nt.find(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top").forEach(function (e) {
            var n = e.style.paddingRight,
              i = window.getComputedStyle(e)["padding-right"];
            et.setDataAttribute(e, "padding-right", n), e.style.paddingRight = parseFloat(i) + t._scrollbarWidth + "px";
          }), nt.find(".sticky-top").forEach(function (e) {
            var n = e.style.marginRight,
              i = window.getComputedStyle(e)["margin-right"];
            et.setDataAttribute(e, "margin-right", n), e.style.marginRight = parseFloat(i) - t._scrollbarWidth + "px";
          });
          var e = document.body.style.paddingRight,
            n = window.getComputedStyle(document.body)["padding-right"];
          et.setDataAttribute(document.body, "padding-right", e), document.body.style.paddingRight = parseFloat(n) + this._scrollbarWidth + "px";
        }
        document.body.classList.add("modal-open");
      }, e._resetScrollbar = function () {
        nt.find(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top").forEach(function (t) {
          var e = et.getDataAttribute(t, "padding-right");
          void 0 !== e && (et.removeDataAttribute(t, "padding-right"), t.style.paddingRight = e);
        }), nt.find(".sticky-top").forEach(function (t) {
          var e = et.getDataAttribute(t, "margin-right");
          void 0 !== e && (et.removeDataAttribute(t, "margin-right"), t.style.marginRight = e);
        });
        var t = et.getDataAttribute(document.body, "padding-right");
        void 0 === t ? document.body.style.paddingRight = "" : (et.removeDataAttribute(document.body, "padding-right"), document.body.style.paddingRight = t);
      }, e._getScrollbarWidth = function () {
        var t = document.createElement("div");
        t.className = "modal-scrollbar-measure", document.body.appendChild(t);
        var e = t.getBoundingClientRect().width - t.clientWidth;
        return document.body.removeChild(t), e;
      }, t.jQueryInterface = function (e, n) {
        return this.each(function () {
          var i = L(this, "bs.modal"),
            o = s({}, kt, et.getDataAttributes(this), "object" == _typeof(e) && e ? e : {});
          if (i || (i = new t(this, o)), "string" == typeof e) {
            if (void 0 === i[e]) throw new TypeError('No method named "' + e + '"');
            i[e](n);
          } else o.show && i.show(n);
        });
      }, t.getInstance = function (t) {
        return L(t, "bs.modal");
      }, o(t, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }, {
        key: "Default",
        get: function get() {
          return kt;
        }
      }]), t;
    }();
  V.on(document, "click.bs.modal.data-api", '[data-toggle="modal"]', function (t) {
    var e = this,
      n = d(this);
    "A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault(), V.one(n, "show.bs.modal", function (t) {
      t.defaultPrevented || V.one(n, "hidden.bs.modal", function () {
        b(e) && e.focus();
      });
    });
    var i = L(n, "bs.modal");
    if (!i) {
      var o = s({}, et.getDataAttributes(n), et.getDataAttributes(this));
      i = new Ct(n, o);
    }
    i.show(this);
  });
  var At = E();
  if (At) {
    var St = At.fn.modal;
    At.fn.modal = Ct.jQueryInterface, At.fn.modal.Constructor = Ct, At.fn.modal.noConflict = function () {
      return At.fn.modal = St, Ct.jQueryInterface;
    };
  }
  var Dt = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"],
    It = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,
    Ot = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,
    Nt = {
      "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
      a: ["target", "href", "title", "rel"],
      area: [],
      b: [],
      br: [],
      col: [],
      code: [],
      div: [],
      em: [],
      hr: [],
      h1: [],
      h2: [],
      h3: [],
      h4: [],
      h5: [],
      h6: [],
      i: [],
      img: ["src", "srcset", "alt", "title", "width", "height"],
      li: [],
      ol: [],
      p: [],
      pre: [],
      s: [],
      small: [],
      span: [],
      sub: [],
      sup: [],
      strong: [],
      u: [],
      ul: []
    };
  function jt(t, e, n) {
    var i;
    if (!t.length) return t;
    if (n && "function" == typeof n) return n(t);
    for (var o = new window.DOMParser().parseFromString(t, "text/html"), s = Object.keys(e), r = (i = []).concat.apply(i, o.body.querySelectorAll("*")), a = function a(t, n) {
        var i,
          o = r[t],
          a = o.nodeName.toLowerCase();
        if (-1 === s.indexOf(a)) return o.parentNode.removeChild(o), "continue";
        var l = (i = []).concat.apply(i, o.attributes),
          c = [].concat(e["*"] || [], e[a] || []);
        l.forEach(function (t) {
          (function (t, e) {
            var n = t.nodeName.toLowerCase();
            if (-1 !== e.indexOf(n)) return -1 === Dt.indexOf(n) || Boolean(t.nodeValue.match(It) || t.nodeValue.match(Ot));
            for (var i = e.filter(function (t) {
                return t instanceof RegExp;
              }), o = 0, s = i.length; o < s; o++) if (n.match(i[o])) return !0;
            return !1;
          })(t, c) || o.removeAttribute(t.nodeName);
        });
      }, l = 0, c = r.length; l < c; l++) a(l);
    return o.body.innerHTML;
  }
  var xt = "tooltip",
    Pt = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),
    Rt = ["sanitize", "allowList", "sanitizeFn"],
    Ht = {
      animation: "boolean",
      template: "string",
      title: "(string|element|function)",
      trigger: "string",
      delay: "(number|object)",
      html: "boolean",
      selector: "(string|boolean)",
      placement: "(string|function)",
      offset: "(number|string|function)",
      container: "(string|element|boolean)",
      fallbackPlacement: "(string|array)",
      boundary: "(string|element)",
      sanitize: "boolean",
      sanitizeFn: "(null|function)",
      allowList: "object",
      popperConfig: "(null|object)"
    },
    Bt = {
      AUTO: "auto",
      TOP: "top",
      RIGHT: "right",
      BOTTOM: "bottom",
      LEFT: "left"
    },
    Mt = {
      animation: !0,
      template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
      trigger: "hover focus",
      title: "",
      delay: 0,
      html: !1,
      selector: !1,
      placement: "top",
      offset: 0,
      container: !1,
      fallbackPlacement: "flip",
      boundary: "scrollParent",
      sanitize: !0,
      sanitizeFn: null,
      allowList: Nt,
      popperConfig: null
    },
    Qt = {
      HIDE: "hide.bs.tooltip",
      HIDDEN: "hidden.bs.tooltip",
      SHOW: "show.bs.tooltip",
      SHOWN: "shown.bs.tooltip",
      INSERTED: "inserted.bs.tooltip",
      CLICK: "click.bs.tooltip",
      FOCUSIN: "focusin.bs.tooltip",
      FOCUSOUT: "focusout.bs.tooltip",
      MOUSEENTER: "mouseenter.bs.tooltip",
      MOUSELEAVE: "mouseleave.bs.tooltip"
    },
    Ut = function () {
      function t(t, e) {
        if (void 0 === n["default"]) throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org)");
        this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners(), k(t, this.constructor.DATA_KEY, this);
      }
      var e = t.prototype;
      return e.enable = function () {
        this._isEnabled = !0;
      }, e.disable = function () {
        this._isEnabled = !1;
      }, e.toggleEnabled = function () {
        this._isEnabled = !this._isEnabled;
      }, e.toggle = function (t) {
        if (this._isEnabled) if (t) {
          var e = this.constructor.DATA_KEY,
            n = L(t.delegateTarget, e);
          n || (n = new this.constructor(t.delegateTarget, this._getDelegateConfig()), k(t.delegateTarget, e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);
        } else {
          if (this.getTipElement().classList.contains("show")) return void this._leave(null, this);
          this._enter(null, this);
        }
      }, e.dispose = function () {
        clearTimeout(this._timeout), C(this.element, this.constructor.DATA_KEY), V.off(this.element, this.constructor.EVENT_KEY), V.off(this.element.closest(".modal"), "hide.bs.modal", this._hideModalHandler), this.tip && this.tip.parentNode.removeChild(this.tip), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
      }, e.show = function () {
        var t = this;
        if ("none" === this.element.style.display) throw new Error("Please use show on visible elements");
        if (this.isWithContent() && this._isEnabled) {
          var e = V.trigger(this.element, this.constructor.Event.SHOW),
            i = function t(e) {
              if (!document.documentElement.attachShadow) return null;
              if ("function" == typeof e.getRootNode) {
                var n = e.getRootNode();
                return n instanceof ShadowRoot ? n : null;
              }
              return e instanceof ShadowRoot ? e : e.parentNode ? t(e.parentNode) : null;
            }(this.element),
            o = null === i ? this.element.ownerDocument.documentElement.contains(this.element) : i.contains(this.element);
          if (e.defaultPrevented || !o) return;
          var s = this.getTipElement(),
            r = u(this.constructor.NAME);
          s.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), this.config.animation && s.classList.add("fade");
          var a = "function" == typeof this.config.placement ? this.config.placement.call(this, s, this.element) : this.config.placement,
            l = this._getAttachment(a);
          this._addAttachmentClass(l);
          var c,
            h = this._getContainer();
          if (k(s, this.constructor.DATA_KEY, this), this.element.ownerDocument.documentElement.contains(this.tip) || h.appendChild(s), V.trigger(this.element, this.constructor.Event.INSERTED), this._popper = new n["default"](this.element, s, this._getPopperConfig(l)), s.classList.add("show"), "ontouchstart" in document.documentElement) (c = []).concat.apply(c, document.body.children).forEach(function (t) {
            V.on(t, "mouseover", function () {});
          });
          var f = function f() {
            t.config.animation && t._fixTransition();
            var e = t._hoverState;
            t._hoverState = null, V.trigger(t.element, t.constructor.Event.SHOWN), "out" === e && t._leave(null, t);
          };
          if (this.tip.classList.contains("fade")) {
            var d = g(this.tip);
            V.one(this.tip, "transitionend", f), _(this.tip, d);
          } else f();
        }
      }, e.hide = function () {
        var t = this;
        if (this._popper) {
          var e = this.getTipElement(),
            n = function n() {
              "show" !== t._hoverState && e.parentNode && e.parentNode.removeChild(e), t._cleanTipClass(), t.element.removeAttribute("aria-describedby"), V.trigger(t.element, t.constructor.Event.HIDDEN), t._popper.destroy();
            };
          if (!V.trigger(this.element, this.constructor.Event.HIDE).defaultPrevented) {
            var i;
            if (e.classList.remove("show"), "ontouchstart" in document.documentElement) (i = []).concat.apply(i, document.body.children).forEach(function (t) {
              return V.off(t, "mouseover", y);
            });
            if (this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1, this.tip.classList.contains("fade")) {
              var o = g(e);
              V.one(e, "transitionend", n), _(e, o);
            } else n();
            this._hoverState = "";
          }
        }
      }, e.update = function () {
        null !== this._popper && this._popper.scheduleUpdate();
      }, e.isWithContent = function () {
        return Boolean(this.getTitle());
      }, e.getTipElement = function () {
        if (this.tip) return this.tip;
        var t = document.createElement("div");
        return t.innerHTML = this.config.template, this.tip = t.children[0], this.tip;
      }, e.setContent = function () {
        var t = this.getTipElement();
        this.setElementContent(nt.findOne(".tooltip-inner", t), this.getTitle()), t.classList.remove("fade", "show");
      }, e.setElementContent = function (t, e) {
        if (null !== t) return "object" == _typeof(e) && m(e) ? (e.jquery && (e = e[0]), void (this.config.html ? e.parentNode !== t && (t.innerHTML = "", t.appendChild(e)) : t.textContent = e.textContent)) : void (this.config.html ? (this.config.sanitize && (e = jt(e, this.config.allowList, this.config.sanitizeFn)), t.innerHTML = e) : t.textContent = e);
      }, e.getTitle = function () {
        var t = this.element.getAttribute("data-original-title");
        return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
      }, e._getPopperConfig = function (t) {
        var e = this;
        return s({}, {
          placement: t,
          modifiers: {
            offset: this._getOffset(),
            flip: {
              behavior: this.config.fallbackPlacement
            },
            arrow: {
              element: "." + this.constructor.NAME + "-arrow"
            },
            preventOverflow: {
              boundariesElement: this.config.boundary
            }
          },
          onCreate: function onCreate(t) {
            t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);
          },
          onUpdate: function onUpdate(t) {
            return e._handlePopperPlacementChange(t);
          }
        }, this.config.popperConfig);
      }, e._addAttachmentClass = function (t) {
        this.getTipElement().classList.add("bs-tooltip-" + t);
      }, e._getOffset = function () {
        var t = this,
          e = {};
        return "function" == typeof this.config.offset ? e.fn = function (e) {
          return e.offsets = s({}, e.offsets, t.config.offset(e.offsets, t.element) || {}), e;
        } : e.offset = this.config.offset, e;
      }, e._getContainer = function () {
        return !1 === this.config.container ? document.body : m(this.config.container) ? this.config.container : nt.findOne(this.config.container);
      }, e._getAttachment = function (t) {
        return Bt[t.toUpperCase()];
      }, e._setListeners = function () {
        var t = this;
        this.config.trigger.split(" ").forEach(function (e) {
          if ("click" === e) V.on(t.element, t.constructor.Event.CLICK, t.config.selector, function (e) {
            return t.toggle(e);
          });else if ("manual" !== e) {
            var n = "hover" === e ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,
              i = "hover" === e ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;
            V.on(t.element, n, t.config.selector, function (e) {
              return t._enter(e);
            }), V.on(t.element, i, t.config.selector, function (e) {
              return t._leave(e);
            });
          }
        }), this._hideModalHandler = function () {
          t.element && t.hide();
        }, V.on(this.element.closest(".modal"), "hide.bs.modal", this._hideModalHandler), this.config.selector ? this.config = s({}, this.config, {
          trigger: "manual",
          selector: ""
        }) : this._fixTitle();
      }, e._fixTitle = function () {
        var t = _typeof(this.element.getAttribute("data-original-title"));
        (this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
      }, e._enter = function (t, e) {
        var n = this.constructor.DATA_KEY;
        (e = e || L(t.delegateTarget, n)) || (e = new this.constructor(t.delegateTarget, this._getDelegateConfig()), k(t.delegateTarget, n, e)), t && (e._activeTrigger["focusin" === t.type ? "focus" : "hover"] = !0), e.getTipElement().classList.contains("show") || "show" === e._hoverState ? e._hoverState = "show" : (clearTimeout(e._timeout), e._hoverState = "show", e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {
          "show" === e._hoverState && e.show();
        }, e.config.delay.show) : e.show());
      }, e._leave = function (t, e) {
        var n = this.constructor.DATA_KEY;
        (e = e || L(t.delegateTarget, n)) || (e = new this.constructor(t.delegateTarget, this._getDelegateConfig()), k(t.delegateTarget, n, e)), t && (e._activeTrigger["focusout" === t.type ? "focus" : "hover"] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = "out", e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {
          "out" === e._hoverState && e.hide();
        }, e.config.delay.hide) : e.hide());
      }, e._isWithActiveTrigger = function () {
        for (var t in this._activeTrigger) if (this._activeTrigger[t]) return !0;
        return !1;
      }, e._getConfig = function (t) {
        var e = et.getDataAttributes(this.element);
        return Object.keys(e).forEach(function (t) {
          -1 !== Rt.indexOf(t) && delete e[t];
        }), t && "object" == _typeof(t.container) && t.container.jquery && (t.container = t.container[0]), "number" == typeof (t = s({}, this.constructor.Default, e, "object" == _typeof(t) && t ? t : {})).delay && (t.delay = {
          show: t.delay,
          hide: t.delay
        }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), v(xt, t, this.constructor.DefaultType), t.sanitize && (t.template = jt(t.template, t.allowList, t.sanitizeFn)), t;
      }, e._getDelegateConfig = function () {
        var t = {};
        if (this.config) for (var e in this.config) this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
        return t;
      }, e._cleanTipClass = function () {
        var t = this.getTipElement(),
          e = t.getAttribute("class").match(Pt);
        null !== e && e.length > 0 && e.map(function (t) {
          return t.trim();
        }).forEach(function (e) {
          return t.classList.remove(e);
        });
      }, e._handlePopperPlacementChange = function (t) {
        this.tip = t.instance.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(t.placement));
      }, e._fixTransition = function () {
        var t = this.getTipElement(),
          e = this.config.animation;
        null === t.getAttribute("x-placement") && (t.classList.remove("fade"), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);
      }, t.jQueryInterface = function (e) {
        return this.each(function () {
          var n = L(this, "bs.tooltip"),
            i = "object" == _typeof(e) && e;
          if ((n || !/dispose|hide/.test(e)) && (n || (n = new t(this, i)), "string" == typeof e)) {
            if (void 0 === n[e]) throw new TypeError('No method named "' + e + '"');
            n[e]();
          }
        });
      }, t.getInstance = function (t) {
        return L(t, "bs.tooltip");
      }, o(t, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }, {
        key: "Default",
        get: function get() {
          return Mt;
        }
      }, {
        key: "NAME",
        get: function get() {
          return xt;
        }
      }, {
        key: "DATA_KEY",
        get: function get() {
          return "bs.tooltip";
        }
      }, {
        key: "Event",
        get: function get() {
          return Qt;
        }
      }, {
        key: "EVENT_KEY",
        get: function get() {
          return ".bs.tooltip";
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return Ht;
        }
      }]), t;
    }(),
    Ft = E();
  if (Ft) {
    var Wt = Ft.fn[xt];
    Ft.fn[xt] = Ut.jQueryInterface, Ft.fn[xt].Constructor = Ut, Ft.fn[xt].noConflict = function () {
      return Ft.fn[xt] = Wt, Ut.jQueryInterface;
    };
  }
  var Kt = "popover",
    Vt = new RegExp("(^|\\s)bs-popover\\S+", "g"),
    qt = s({}, Ut.Default, {
      placement: "right",
      trigger: "click",
      content: "",
      template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
    }),
    zt = s({}, Ut.DefaultType, {
      content: "(string|element|function)"
    }),
    Xt = {
      HIDE: "hide.bs.popover",
      HIDDEN: "hidden.bs.popover",
      SHOW: "show.bs.popover",
      SHOWN: "shown.bs.popover",
      INSERTED: "inserted.bs.popover",
      CLICK: "click.bs.popover",
      FOCUSIN: "focusin.bs.popover",
      FOCUSOUT: "focusout.bs.popover",
      MOUSEENTER: "mouseenter.bs.popover",
      MOUSELEAVE: "mouseleave.bs.popover"
    },
    Yt = function (t) {
      var e, n;
      function i() {
        return t.apply(this, arguments) || this;
      }
      n = t, (e = i).prototype = Object.create(n.prototype), e.prototype.constructor = e, e.__proto__ = n;
      var s = i.prototype;
      return s.isWithContent = function () {
        return this.getTitle() || this._getContent();
      }, s.setContent = function () {
        var t = this.getTipElement();
        this.setElementContent(nt.findOne(".popover-header", t), this.getTitle());
        var e = this._getContent();
        "function" == typeof e && (e = e.call(this.element)), this.setElementContent(nt.findOne(".popover-body", t), e), t.classList.remove("fade", "show");
      }, s._addAttachmentClass = function (t) {
        this.getTipElement().classList.add("bs-popover-" + t);
      }, s._getContent = function () {
        return this.element.getAttribute("data-content") || this.config.content;
      }, s._cleanTipClass = function () {
        var t = this.getTipElement(),
          e = t.getAttribute("class").match(Vt);
        null !== e && e.length > 0 && e.map(function (t) {
          return t.trim();
        }).forEach(function (e) {
          return t.classList.remove(e);
        });
      }, i.jQueryInterface = function (t) {
        return this.each(function () {
          var e = L(this, "bs.popover"),
            n = "object" == _typeof(t) ? t : null;
          if ((e || !/dispose|hide/.test(t)) && (e || (e = new i(this, n), k(this, "bs.popover", e)), "string" == typeof t)) {
            if (void 0 === e[t]) throw new TypeError('No method named "' + t + '"');
            e[t]();
          }
        });
      }, i.getInstance = function (t) {
        return L(t, "bs.popover");
      }, o(i, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }, {
        key: "Default",
        get: function get() {
          return qt;
        }
      }, {
        key: "NAME",
        get: function get() {
          return Kt;
        }
      }, {
        key: "DATA_KEY",
        get: function get() {
          return "bs.popover";
        }
      }, {
        key: "Event",
        get: function get() {
          return Xt;
        }
      }, {
        key: "EVENT_KEY",
        get: function get() {
          return ".bs.popover";
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return zt;
        }
      }]), i;
    }(Ut),
    $t = E();
  if ($t) {
    var Gt = $t.fn[Kt];
    $t.fn[Kt] = Yt.jQueryInterface, $t.fn[Kt].Constructor = Yt, $t.fn[Kt].noConflict = function () {
      return $t.fn[Kt] = Gt, Yt.jQueryInterface;
    };
  }
  var Zt = "scrollspy",
    Jt = {
      offset: 10,
      method: "auto",
      target: ""
    },
    te = {
      offset: "number",
      method: "string",
      target: "(string|element)"
    },
    ee = function () {
      function t(t, e) {
        var n = this;
        this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + " .nav-link, " + this._config.target + " .list-group-item, " + this._config.target + " .dropdown-item", this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, V.on(this._scrollElement, "scroll.bs.scrollspy", function (t) {
          return n._process(t);
        }), this.refresh(), this._process(), k(t, "bs.scrollspy", this);
      }
      var e = t.prototype;
      return e.refresh = function () {
        var t = this,
          e = this._scrollElement === this._scrollElement.window ? "offset" : "position",
          n = "auto" === this._config.method ? e : this._config.method,
          i = "position" === n ? this._getScrollTop() : 0;
        this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), nt.find(this._selector).map(function (t) {
          var e = f(t),
            o = e ? nt.findOne(e) : null;
          if (o) {
            var s = o.getBoundingClientRect();
            if (s.width || s.height) return [et[n](o).top + i, e];
          }
          return null;
        }).filter(function (t) {
          return t;
        }).sort(function (t, e) {
          return t[0] - e[0];
        }).forEach(function (e) {
          t._offsets.push(e[0]), t._targets.push(e[1]);
        });
      }, e.dispose = function () {
        C(this._element, "bs.scrollspy"), V.off(this._scrollElement, ".bs.scrollspy"), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
      }, e._getConfig = function (t) {
        if ("string" != typeof (t = s({}, Jt, "object" == _typeof(t) && t ? t : {})).target && m(t.target)) {
          var e = t.target.id;
          e || (e = u(Zt), t.target.id = e), t.target = "#" + e;
        }
        return v(Zt, t, te), t;
      }, e._getScrollTop = function () {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }, e._getScrollHeight = function () {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }, e._getOffsetHeight = function () {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }, e._process = function () {
        var t = this._getScrollTop() + this._config.offset,
          e = this._getScrollHeight(),
          n = this._config.offset + e - this._getOffsetHeight();
        if (this._scrollHeight !== e && this.refresh(), t >= n) {
          var i = this._targets[this._targets.length - 1];
          this._activeTarget !== i && this._activate(i);
        } else {
          if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();
          for (var o = this._offsets.length; o--;) {
            this._activeTarget !== this._targets[o] && t >= this._offsets[o] && (void 0 === this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);
          }
        }
      }, e._activate = function (t) {
        this._activeTarget = t, this._clear();
        var e = this._selector.split(",").map(function (e) {
            return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]';
          }),
          n = nt.findOne(e.join(","));
        n.classList.contains("dropdown-item") ? (nt.findOne(".dropdown-toggle", n.closest(".dropdown")).classList.add("active"), n.classList.add("active")) : (n.classList.add("active"), nt.parents(n, ".nav, .list-group").forEach(function (t) {
          nt.prev(t, ".nav-link, .list-group-item").forEach(function (t) {
            return t.classList.add("active");
          }), nt.prev(t, ".nav-item").forEach(function (t) {
            nt.children(t, ".nav-link").forEach(function (t) {
              return t.classList.add("active");
            });
          });
        })), V.trigger(this._scrollElement, "activate.bs.scrollspy", {
          relatedTarget: t
        });
      }, e._clear = function () {
        nt.find(this._selector).filter(function (t) {
          return t.classList.contains("active");
        }).forEach(function (t) {
          return t.classList.remove("active");
        });
      }, t.jQueryInterface = function (e) {
        return this.each(function () {
          var n = L(this, "bs.scrollspy");
          if (n || (n = new t(this, "object" == _typeof(e) && e)), "string" == typeof e) {
            if (void 0 === n[e]) throw new TypeError('No method named "' + e + '"');
            n[e]();
          }
        });
      }, t.getInstance = function (t) {
        return L(t, "bs.scrollspy");
      }, o(t, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }, {
        key: "Default",
        get: function get() {
          return Jt;
        }
      }]), t;
    }();
  V.on(window, "load.bs.scrollspy.data-api", function () {
    nt.find('[data-spy="scroll"]').forEach(function (t) {
      return new ee(t, et.getDataAttributes(t));
    });
  });
  var ne = E();
  if (ne) {
    var ie = ne.fn[Zt];
    ne.fn[Zt] = ee.jQueryInterface, ne.fn[Zt].Constructor = ee, ne.fn[Zt].noConflict = function () {
      return ne.fn[Zt] = ie, ee.jQueryInterface;
    };
  }
  var oe = function () {
    function t(t) {
      this._element = t, k(this._element, "bs.tab", this);
    }
    var e = t.prototype;
    return e.show = function () {
      var t = this;
      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains("active") || this._element.classList.contains("disabled"))) {
        var e,
          n = d(this._element),
          i = this._element.closest(".nav, .list-group");
        if (i) {
          var o = "UL" === i.nodeName || "OL" === i.nodeName ? ":scope > li > .active" : ".active";
          e = (e = nt.find(o, i))[e.length - 1];
        }
        var s = null;
        if (e && (s = V.trigger(e, "hide.bs.tab", {
          relatedTarget: this._element
        })), !(V.trigger(this._element, "show.bs.tab", {
          relatedTarget: e
        }).defaultPrevented || null !== s && s.defaultPrevented)) {
          this._activate(this._element, i);
          var r = function r() {
            V.trigger(e, "hidden.bs.tab", {
              relatedTarget: t._element
            }), V.trigger(t._element, "shown.bs.tab", {
              relatedTarget: e
            });
          };
          n ? this._activate(n, n.parentNode, r) : r();
        }
      }
    }, e.dispose = function () {
      C(this._element, "bs.tab"), this._element = null;
    }, e._activate = function (t, e, n) {
      var i = this,
        o = (!e || "UL" !== e.nodeName && "OL" !== e.nodeName ? nt.children(e, ".active") : nt.find(":scope > li > .active", e))[0],
        s = n && o && o.classList.contains("fade"),
        r = function r() {
          return i._transitionComplete(t, o, n);
        };
      if (o && s) {
        var a = g(o);
        o.classList.remove("show"), V.one(o, "transitionend", r), _(o, a);
      } else r();
    }, e._transitionComplete = function (t, e, n) {
      if (e) {
        e.classList.remove("active");
        var i = nt.findOne(":scope > .dropdown-menu .active", e.parentNode);
        i && i.classList.remove("active"), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !1);
      }
      (t.classList.add("active"), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), w(t), t.classList.contains("fade") && t.classList.add("show"), t.parentNode && t.parentNode.classList.contains("dropdown-menu")) && (t.closest(".dropdown") && nt.find(".dropdown-toggle").forEach(function (t) {
        return t.classList.add("active");
      }), t.setAttribute("aria-expanded", !0));
      n && n();
    }, t.jQueryInterface = function (e) {
      return this.each(function () {
        var n = L(this, "bs.tab") || new t(this);
        if ("string" == typeof e) {
          if (void 0 === n[e]) throw new TypeError('No method named "' + e + '"');
          n[e]();
        }
      });
    }, t.getInstance = function (t) {
      return L(t, "bs.tab");
    }, o(t, null, [{
      key: "VERSION",
      get: function get() {
        return "5.0.0-alpha2";
      }
    }]), t;
  }();
  V.on(document, "click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', function (t) {
    t.preventDefault(), (L(this, "bs.tab") || new oe(this)).show();
  });
  var se = E();
  if (se) {
    var re = se.fn.tab;
    se.fn.tab = oe.jQueryInterface, se.fn.tab.Constructor = oe, se.fn.tab.noConflict = function () {
      return se.fn.tab = re, oe.jQueryInterface;
    };
  }
  var ae = {
      animation: "boolean",
      autohide: "boolean",
      delay: "number"
    },
    le = {
      animation: !0,
      autohide: !0,
      delay: 5e3
    },
    ce = function () {
      function t(t, e) {
        this._element = t, this._config = this._getConfig(e), this._timeout = null, this._setListeners(), k(t, "bs.toast", this);
      }
      var e = t.prototype;
      return e.show = function () {
        var t = this;
        if (!V.trigger(this._element, "show.bs.toast").defaultPrevented) {
          this._clearTimeout(), this._config.animation && this._element.classList.add("fade");
          var e = function e() {
            t._element.classList.remove("showing"), t._element.classList.add("show"), V.trigger(t._element, "shown.bs.toast"), t._config.autohide && (t._timeout = setTimeout(function () {
              t.hide();
            }, t._config.delay));
          };
          if (this._element.classList.remove("hide"), w(this._element), this._element.classList.add("showing"), this._config.animation) {
            var n = g(this._element);
            V.one(this._element, "transitionend", e), _(this._element, n);
          } else e();
        }
      }, e.hide = function () {
        var t = this;
        if (this._element.classList.contains("show") && !V.trigger(this._element, "hide.bs.toast").defaultPrevented) {
          var e = function e() {
            t._element.classList.add("hide"), V.trigger(t._element, "hidden.bs.toast");
          };
          if (this._element.classList.remove("show"), this._config.animation) {
            var n = g(this._element);
            V.one(this._element, "transitionend", e), _(this._element, n);
          } else e();
        }
      }, e.dispose = function () {
        this._clearTimeout(), this._element.classList.contains("show") && this._element.classList.remove("show"), V.off(this._element, "click.dismiss.bs.toast"), C(this._element, "bs.toast"), this._element = null, this._config = null;
      }, e._getConfig = function (t) {
        return t = s({}, le, et.getDataAttributes(this._element), "object" == _typeof(t) && t ? t : {}), v("toast", t, this.constructor.DefaultType), t;
      }, e._setListeners = function () {
        var t = this;
        V.on(this._element, "click.dismiss.bs.toast", '[data-dismiss="toast"]', function () {
          return t.hide();
        });
      }, e._clearTimeout = function () {
        clearTimeout(this._timeout), this._timeout = null;
      }, t.jQueryInterface = function (e) {
        return this.each(function () {
          var n = L(this, "bs.toast");
          if (n || (n = new t(this, "object" == _typeof(e) && e)), "string" == typeof e) {
            if (void 0 === n[e]) throw new TypeError('No method named "' + e + '"');
            n[e](this);
          }
        });
      }, t.getInstance = function (t) {
        return L(t, "bs.toast");
      }, o(t, null, [{
        key: "VERSION",
        get: function get() {
          return "5.0.0-alpha2";
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return ae;
        }
      }, {
        key: "Default",
        get: function get() {
          return le;
        }
      }]), t;
    }(),
    ue = E();
  if (ue) {
    var he = ue.fn.toast;
    ue.fn.toast = ce.jQueryInterface, ue.fn.toast.Constructor = ce, ue.fn.toast.noConflict = function () {
      return ue.fn.toast = he, ce.jQueryInterface;
    };
  }
  return {
    Alert: z,
    Button: $,
    Carousel: lt,
    Collapse: gt,
    Dropdown: wt,
    Modal: Ct,
    Popover: Yt,
    ScrollSpy: ee,
    Tab: oe,
    Toast: ce,
    Tooltip: Ut
  };
});

/***/ }),

/***/ "./assets/js/count-up.min.js":
/*!***********************************!*\
  !*** ./assets/js/count-up.min.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
function counterUp(t) {
  "use strict";

  this.defaults = {
    duration: 3e3,
    prepend: "",
    append: "%",
    selector: ".countup",
    start: 0,
    end: 100,
    intvalues: !1,
    interval: 100
  };
  var e = this;
  this.upating = !1, this.intervalID = null, this.props = {};
  for (var r in this.defaults) "undefined" != typeof r && (e.props[r] = e.defaults[r], t.hasOwnProperty(r) && e.props.hasOwnProperty(r) && (e.props[r] = t[r]));
  this.domelems = document.querySelectorAll(this.props.selector), this.elems = [];
  var n = {};
  this.domelems.forEach(function (t) {
    n.obj = t;
    var r = parseInt(t.getAttribute("cup-start"));
    isNaN(r) ? n.start = e.props.start : n.start = r;
    var p = parseInt(t.getAttribute("cup-end"));
    isNaN(p) ? n.end = e.props.end : n.end = p;
    var a = parseInt(t.getAttribute("cup-duration"));
    isNaN(a) ? n.duration = e.props.duration : n.duration = a;
    var s = t.getAttribute("cup-prepend");
    null == s ? n.prepend = e.props.prepend : n.prepend = s;
    var i = t.getAttribute("cup-append");
    null == i ? n.append = e.props.append : n.append = i;
    var o = t.getAttribute("cup-intval");
    null == o ? n.intvalues = e.props.intvalues : n.intvalues = o, n.step = (n.end - n.start) / (n.duration / e.props.interval), n.val = n.start, e.elems.push(n), n = {};
  });
}
counterUp.prototype.start = function () {
  "use strict";

  var t = this;
  this.intervalID = setInterval(function () {
    t.updating || t.update();
  }, t.props.interval);
}, counterUp.prototype.update = function () {
  "use strict";

  this.updating = !0;
  var t = !0;
  this.elems.forEach(function (e) {
    e.val += e.step, e.val < e.end ? (1 == e.intvalues ? e.obj.innerHTML = e.prepend + Math.floor(e.val).toString() + e.append : e.obj.innerHTML = e.prepend + (Math.round(100 * e.val) / 100).toString() + e.append, t = !1) : e.obj.innerHTML = e.prepend + e.end.toString() + e.append;
  }), 1 == t && clearInterval(this.intervalID), this.updating = !1;
};

/***/ }),

/***/ "./assets/js/flatpickr.js":
/*!********************************!*\
  !*** ./assets/js/flatpickr.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var flatpickr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! flatpickr */ "./node_modules/flatpickr/dist/esm/index.js");




var _require = __webpack_require__(/*! flatpickr/dist/l10n/fr */ "./node_modules/flatpickr/dist/l10n/fr.js"),
  French = _require.French;
document.querySelectorAll('.flatpickr').forEach(function (input) {
  (0,flatpickr__WEBPACK_IMPORTED_MODULE_3__["default"])(input, {
    altInput: true,
    altFormat: "j F, Y",
    dateFormat: "d-m-Y",
    "locale": French,
    firstDayOfWeek: 1
  });
});

/***/ }),

/***/ "./assets/js/glightbox.min.js":
/*!************************************!*\
  !*** ./assets/js/glightbox.min.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
__webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
__webpack_require__(/*! core-js/modules/es.date.now.js */ "./node_modules/core-js/modules/es.date.now.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");
__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
__webpack_require__(/*! core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
!function (t, e) {
  "object" == ( false ? 0 : _typeof(exports)) && "undefined" != "object" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(this, function () {
  "use strict";

  function t(e) {
    return (t = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : _typeof(t);
    })(e);
  }
  function e(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }
  function i(t, e) {
    for (var i = 0; i < e.length; i++) {
      var n = e[i];
      n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
    }
  }
  function n(t, e, n) {
    return e && i(t.prototype, e), n && i(t, n), t;
  }
  function s(t) {
    return function (t) {
      if (Array.isArray(t)) {
        for (var e = 0, i = new Array(t.length); e < t.length; e++) i[e] = t[e];
        return i;
      }
    }(t) || function (t) {
      if (Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t)) return Array.from(t);
    }(t) || function () {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }();
  }
  function o(t) {
    return Math.sqrt(t.x * t.x + t.y * t.y);
  }
  function l(t, e) {
    var i = function (t, e) {
      var i = o(t) * o(e);
      if (0 === i) return 0;
      var n = function (t, e) {
        return t.x * e.x + t.y * e.y;
      }(t, e) / i;
      return n > 1 && (n = 1), Math.acos(n);
    }(t, e);
    return function (t, e) {
      return t.x * e.y - e.x * t.y;
    }(t, e) > 0 && (i *= -1), 180 * i / Math.PI;
  }
  var r = function () {
    function t(i) {
      e(this, t), this.handlers = [], this.el = i;
    }
    return n(t, [{
      key: "add",
      value: function value(t) {
        this.handlers.push(t);
      }
    }, {
      key: "del",
      value: function value(t) {
        t || (this.handlers = []);
        for (var e = this.handlers.length; e >= 0; e--) this.handlers[e] === t && this.handlers.splice(e, 1);
      }
    }, {
      key: "dispatch",
      value: function value() {
        for (var t = 0, e = this.handlers.length; t < e; t++) {
          var i = this.handlers[t];
          "function" == typeof i && i.apply(this.el, arguments);
        }
      }
    }]), t;
  }();
  function a(t, e) {
    var i = new r(t);
    return i.add(e), i;
  }
  var h = function () {
      function t(i, n) {
        e(this, t), this.element = "string" == typeof i ? document.querySelector(i) : i, this.start = this.start.bind(this), this.move = this.move.bind(this), this.end = this.end.bind(this), this.cancel = this.cancel.bind(this), this.element.addEventListener("touchstart", this.start, !1), this.element.addEventListener("touchmove", this.move, !1), this.element.addEventListener("touchend", this.end, !1), this.element.addEventListener("touchcancel", this.cancel, !1), this.preV = {
          x: null,
          y: null
        }, this.pinchStartLen = null, this.zoom = 1, this.isDoubleTap = !1;
        var s = function s() {};
        this.rotate = a(this.element, n.rotate || s), this.touchStart = a(this.element, n.touchStart || s), this.multipointStart = a(this.element, n.multipointStart || s), this.multipointEnd = a(this.element, n.multipointEnd || s), this.pinch = a(this.element, n.pinch || s), this.swipe = a(this.element, n.swipe || s), this.tap = a(this.element, n.tap || s), this.doubleTap = a(this.element, n.doubleTap || s), this.longTap = a(this.element, n.longTap || s), this.singleTap = a(this.element, n.singleTap || s), this.pressMove = a(this.element, n.pressMove || s), this.twoFingerPressMove = a(this.element, n.twoFingerPressMove || s), this.touchMove = a(this.element, n.touchMove || s), this.touchEnd = a(this.element, n.touchEnd || s), this.touchCancel = a(this.element, n.touchCancel || s), this._cancelAllHandler = this.cancelAll.bind(this), window.addEventListener("scroll", this._cancelAllHandler), this.delta = null, this.last = null, this.now = null, this.tapTimeout = null, this.singleTapTimeout = null, this.longTapTimeout = null, this.swipeTimeout = null, this.x1 = this.x2 = this.y1 = this.y2 = null, this.preTapPosition = {
          x: null,
          y: null
        };
      }
      return n(t, [{
        key: "start",
        value: function value(t) {
          if (t.touches) {
            this.now = Date.now(), this.x1 = t.touches[0].pageX, this.y1 = t.touches[0].pageY, this.delta = this.now - (this.last || this.now), this.touchStart.dispatch(t, this.element), null !== this.preTapPosition.x && (this.isDoubleTap = this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30, this.isDoubleTap && clearTimeout(this.singleTapTimeout)), this.preTapPosition.x = this.x1, this.preTapPosition.y = this.y1, this.last = this.now;
            var e = this.preV;
            if (t.touches.length > 1) {
              this._cancelLongTap(), this._cancelSingleTap();
              var i = {
                x: t.touches[1].pageX - this.x1,
                y: t.touches[1].pageY - this.y1
              };
              e.x = i.x, e.y = i.y, this.pinchStartLen = o(e), this.multipointStart.dispatch(t, this.element);
            }
            this._preventTap = !1, this.longTapTimeout = setTimeout(function () {
              this.longTap.dispatch(t, this.element), this._preventTap = !0;
            }.bind(this), 750);
          }
        }
      }, {
        key: "move",
        value: function value(t) {
          if (t.touches) {
            var e = this.preV,
              i = t.touches.length,
              n = t.touches[0].pageX,
              s = t.touches[0].pageY;
            if (this.isDoubleTap = !1, i > 1) {
              var r = t.touches[1].pageX,
                a = t.touches[1].pageY,
                h = {
                  x: t.touches[1].pageX - n,
                  y: t.touches[1].pageY - s
                };
              null !== e.x && (this.pinchStartLen > 0 && (t.zoom = o(h) / this.pinchStartLen, this.pinch.dispatch(t, this.element)), t.angle = l(h, e), this.rotate.dispatch(t, this.element)), e.x = h.x, e.y = h.y, null !== this.x2 && null !== this.sx2 ? (t.deltaX = (n - this.x2 + r - this.sx2) / 2, t.deltaY = (s - this.y2 + a - this.sy2) / 2) : (t.deltaX = 0, t.deltaY = 0), this.twoFingerPressMove.dispatch(t, this.element), this.sx2 = r, this.sy2 = a;
            } else {
              if (null !== this.x2) {
                t.deltaX = n - this.x2, t.deltaY = s - this.y2;
                var c = Math.abs(this.x1 - this.x2),
                  d = Math.abs(this.y1 - this.y2);
                (c > 10 || d > 10) && (this._preventTap = !0);
              } else t.deltaX = 0, t.deltaY = 0;
              this.pressMove.dispatch(t, this.element);
            }
            this.touchMove.dispatch(t, this.element), this._cancelLongTap(), this.x2 = n, this.y2 = s, i > 1 && t.preventDefault();
          }
        }
      }, {
        key: "end",
        value: function value(t) {
          if (t.changedTouches) {
            this._cancelLongTap();
            var e = this;
            t.touches.length < 2 && (this.multipointEnd.dispatch(t, this.element), this.sx2 = this.sy2 = null), this.x2 && Math.abs(this.x1 - this.x2) > 30 || this.y2 && Math.abs(this.y1 - this.y2) > 30 ? (t.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2), this.swipeTimeout = setTimeout(function () {
              e.swipe.dispatch(t, e.element);
            }, 0)) : (this.tapTimeout = setTimeout(function () {
              e._preventTap || e.tap.dispatch(t, e.element), e.isDoubleTap && (e.doubleTap.dispatch(t, e.element), e.isDoubleTap = !1);
            }, 0), e.isDoubleTap || (e.singleTapTimeout = setTimeout(function () {
              e.singleTap.dispatch(t, e.element);
            }, 250))), this.touchEnd.dispatch(t, this.element), this.preV.x = 0, this.preV.y = 0, this.zoom = 1, this.pinchStartLen = null, this.x1 = this.x2 = this.y1 = this.y2 = null;
          }
        }
      }, {
        key: "cancelAll",
        value: function value() {
          this._preventTap = !0, clearTimeout(this.singleTapTimeout), clearTimeout(this.tapTimeout), clearTimeout(this.longTapTimeout), clearTimeout(this.swipeTimeout);
        }
      }, {
        key: "cancel",
        value: function value(t) {
          this.cancelAll(), this.touchCancel.dispatch(t, this.element);
        }
      }, {
        key: "_cancelLongTap",
        value: function value() {
          clearTimeout(this.longTapTimeout);
        }
      }, {
        key: "_cancelSingleTap",
        value: function value() {
          clearTimeout(this.singleTapTimeout);
        }
      }, {
        key: "_swipeDirection",
        value: function value(t, e, i, n) {
          return Math.abs(t - e) >= Math.abs(i - n) ? t - e > 0 ? "Left" : "Right" : i - n > 0 ? "Up" : "Down";
        }
      }, {
        key: "on",
        value: function value(t, e) {
          this[t] && this[t].add(e);
        }
      }, {
        key: "off",
        value: function value(t, e) {
          this[t] && this[t].del(e);
        }
      }, {
        key: "destroy",
        value: function value() {
          return this.singleTapTimeout && clearTimeout(this.singleTapTimeout), this.tapTimeout && clearTimeout(this.tapTimeout), this.longTapTimeout && clearTimeout(this.longTapTimeout), this.swipeTimeout && clearTimeout(this.swipeTimeout), this.element.removeEventListener("touchstart", this.start), this.element.removeEventListener("touchmove", this.move), this.element.removeEventListener("touchend", this.end), this.element.removeEventListener("touchcancel", this.cancel), this.rotate.del(), this.touchStart.del(), this.multipointStart.del(), this.multipointEnd.del(), this.pinch.del(), this.swipe.del(), this.tap.del(), this.doubleTap.del(), this.longTap.del(), this.singleTap.del(), this.pressMove.del(), this.twoFingerPressMove.del(), this.touchMove.del(), this.touchEnd.del(), this.touchCancel.del(), this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null, window.removeEventListener("scroll", this._cancelAllHandler), null;
        }
      }]), t;
    }(),
    c = function () {
      function t(i, n) {
        var s = this,
          o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
        if (e(this, t), this.img = i, this.slide = n, this.onclose = o, this.img.setZoomEvents) return !1;
        this.active = !1, this.zoomedIn = !1, this.dragging = !1, this.currentX = null, this.currentY = null, this.initialX = null, this.initialY = null, this.xOffset = 0, this.yOffset = 0, this.img.addEventListener("mousedown", function (t) {
          return s.dragStart(t);
        }, !1), this.img.addEventListener("mouseup", function (t) {
          return s.dragEnd(t);
        }, !1), this.img.addEventListener("mousemove", function (t) {
          return s.drag(t);
        }, !1), this.img.addEventListener("click", function (t) {
          if (!s.zoomedIn) return s.zoomIn();
          s.zoomedIn && !s.dragging && s.zoomOut();
        }, !1), this.img.setZoomEvents = !0;
      }
      return n(t, [{
        key: "zoomIn",
        value: function value() {
          var t = this.widowWidth();
          if (!(this.zoomedIn || t <= 768)) {
            var e = this.img;
            if (e.setAttribute("data-style", e.getAttribute("style")), e.style.maxWidth = e.naturalWidth + "px", e.style.maxHeight = e.naturalHeight + "px", e.naturalWidth > t) {
              var i = t / 2 - e.naturalWidth / 2;
              this.setTranslate(this.img.parentNode, i, 0);
            }
            this.slide.classList.add("zoomed"), this.zoomedIn = !0;
          }
        }
      }, {
        key: "zoomOut",
        value: function value() {
          this.img.parentNode.setAttribute("style", ""), this.img.setAttribute("style", this.img.getAttribute("data-style")), this.slide.classList.remove("zoomed"), this.zoomedIn = !1, this.currentX = null, this.currentY = null, this.initialX = null, this.initialY = null, this.xOffset = 0, this.yOffset = 0, this.onclose && "function" == typeof this.onclose && this.onclose();
        }
      }, {
        key: "dragStart",
        value: function value(t) {
          t.preventDefault(), this.zoomedIn ? ("touchstart" === t.type ? (this.initialX = t.touches[0].clientX - this.xOffset, this.initialY = t.touches[0].clientY - this.yOffset) : (this.initialX = t.clientX - this.xOffset, this.initialY = t.clientY - this.yOffset), t.target === this.img && (this.active = !0, this.img.classList.add("dragging"))) : this.active = !1;
        }
      }, {
        key: "dragEnd",
        value: function value(t) {
          var e = this;
          t.preventDefault(), this.initialX = this.currentX, this.initialY = this.currentY, this.active = !1, setTimeout(function () {
            e.dragging = !1, e.img.isDragging = !1, e.img.classList.remove("dragging");
          }, 100);
        }
      }, {
        key: "drag",
        value: function value(t) {
          this.active && (t.preventDefault(), "touchmove" === t.type ? (this.currentX = t.touches[0].clientX - this.initialX, this.currentY = t.touches[0].clientY - this.initialY) : (this.currentX = t.clientX - this.initialX, this.currentY = t.clientY - this.initialY), this.xOffset = this.currentX, this.yOffset = this.currentY, this.img.isDragging = !0, this.dragging = !0, this.setTranslate(this.img, this.currentX, this.currentY));
        }
      }, {
        key: "onMove",
        value: function value(t) {
          if (this.zoomedIn) {
            var e = t.clientX - this.img.naturalWidth / 2,
              i = t.clientY - this.img.naturalHeight / 2;
            this.setTranslate(this.img, e, i);
          }
        }
      }, {
        key: "setTranslate",
        value: function value(t, e, i) {
          t.style.transform = "translate3d(" + e + "px, " + i + "px, 0)";
        }
      }, {
        key: "widowWidth",
        value: function value() {
          return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        }
      }]), t;
    }(),
    d = "navigator" in window && window.navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(Android)|(PlayBook)|(BB10)|(BlackBerry)|(Opera Mini)|(IEMobile)|(webOS)|(MeeGo)/i),
    u = null !== d || void 0 !== document.createTouch || "ontouchstart" in window || "onmsgesturechange" in window || navigator.msMaxTouchPoints,
    g = document.getElementsByTagName("html")[0],
    p = function () {
      var t,
        e = document.createElement("fakeelement"),
        i = {
          transition: "transitionend",
          OTransition: "oTransitionEnd",
          MozTransition: "transitionend",
          WebkitTransition: "webkitTransitionEnd"
        };
      for (t in i) if (void 0 !== e.style[t]) return i[t];
    }(),
    v = function () {
      var t,
        e = document.createElement("fakeelement"),
        i = {
          animation: "animationend",
          OAnimation: "oAnimationEnd",
          MozAnimation: "animationend",
          WebkitAnimation: "webkitAnimationEnd"
        };
      for (t in i) if (void 0 !== e.style[t]) return i[t];
    }(),
    f = Date.now(),
    m = {},
    y = {
      selector: ".glightbox",
      elements: null,
      skin: "clean",
      closeButton: !0,
      startAt: null,
      autoplayVideos: !0,
      descPosition: "bottom",
      width: "900px",
      height: "506px",
      videosWidth: "960px",
      beforeSlideChange: null,
      afterSlideChange: null,
      beforeSlideLoad: null,
      afterSlideLoad: null,
      slideInserted: null,
      slideRemoved: null,
      onOpen: null,
      onClose: null,
      loop: !1,
      touchNavigation: !0,
      touchFollowAxis: !0,
      keyboardNavigation: !0,
      closeOnOutsideClick: !0,
      plyr: {
        css: "https://cdn.plyr.io/3.5.6/plyr.css",
        js: "https://cdn.plyr.io/3.5.6/plyr.js",
        config: {
          ratio: "16:9",
          youtube: {
            noCookie: !0,
            rel: 0,
            showinfo: 0,
            iv_load_policy: 3
          },
          vimeo: {
            byline: !1,
            portrait: !1,
            title: !1,
            transparent: !1
          }
        }
      },
      openEffect: "zoomIn",
      closeEffect: "zoomOut",
      slideEffect: "slide",
      moreText: "See more",
      moreLength: 60,
      lightboxHtml: "",
      cssEfects: {
        fade: {
          "in": "fadeIn",
          out: "fadeOut"
        },
        zoom: {
          "in": "zoomIn",
          out: "zoomOut"
        },
        slide: {
          "in": "slideInRight",
          out: "slideOutLeft"
        },
        slide_back: {
          "in": "slideInLeft",
          out: "slideOutRight"
        }
      },
      svg: {
        close: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" xml:space="preserve"><g><g><path d="M505.943,6.058c-8.077-8.077-21.172-8.077-29.249,0L6.058,476.693c-8.077,8.077-8.077,21.172,0,29.249C10.096,509.982,15.39,512,20.683,512c5.293,0,10.586-2.019,14.625-6.059L505.943,35.306C514.019,27.23,514.019,14.135,505.943,6.058z"/></g></g><g><g><path d="M505.942,476.694L35.306,6.059c-8.076-8.077-21.172-8.077-29.248,0c-8.077,8.076-8.077,21.171,0,29.248l470.636,470.636c4.038,4.039,9.332,6.058,14.625,6.058c5.293,0,10.587-2.019,14.624-6.057C514.018,497.866,514.018,484.771,505.942,476.694z"/></g></g></svg>',
        next: '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"> <g><path d="M360.731,229.075l-225.1-225.1c-5.3-5.3-13.8-5.3-19.1,0s-5.3,13.8,0,19.1l215.5,215.5l-215.5,215.5c-5.3,5.3-5.3,13.8,0,19.1c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-4l225.1-225.1C365.931,242.875,365.931,234.275,360.731,229.075z"/></g></svg>',
        prev: '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M145.188,238.575l215.5-215.5c5.3-5.3,5.3-13.8,0-19.1s-13.8-5.3-19.1,0l-225.1,225.1c-5.3,5.3-5.3,13.8,0,19.1l225.1,225c2.6,2.6,6.1,4,9.5,4s6.9-1.3,9.5-4c5.3-5.3,5.3-13.8,0-19.1L145.188,238.575z"/></g></svg>'
      }
    };
  y.slideHtml = '<div class="gslide">\n    <div class="gslide-inner-content">\n        <div class="ginner-container">\n            <div class="gslide-media">\n            </div>\n            <div class="gslide-description">\n                <div class="gdesc-inner">\n                    <h4 class="gslide-title"></h4>\n                    <div class="gslide-desc"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>';
  y.lightboxHtml = '<div id="glightbox-body" class="glightbox-container">\n    <div class="gloader visible"></div>\n    <div class="goverlay"></div>\n    <div class="gcontainer">\n    <div id="glightbox-slider" class="gslider"></div>\n    <button class="gnext gbtn" tabindex="0">{nextSVG}</button>\n    <button class="gprev gbtn" tabindex="1">{prevSVG}</button>\n    <button class="gclose gbtn" tabindex="2">{closeSVG}</button>\n</div>\n</div>';
  var b = {
    href: "",
    title: "",
    type: "",
    description: "",
    descPosition: "",
    effect: "",
    width: "",
    height: "",
    node: !1,
    content: !1
  };
  function x() {
    var t = {},
      e = !0,
      i = 0,
      n = arguments.length;
    "[object Boolean]" === Object.prototype.toString.call(arguments[0]) && (e = arguments[0], i++);
    for (var s = function s(i) {
      for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e && "[object Object]" === Object.prototype.toString.call(i[n]) ? t[n] = x(!0, t[n], i[n]) : t[n] = i[n]);
    }; i < n; i++) {
      s(arguments[i]);
    }
    return t;
  }
  var w = {
    isFunction: function isFunction(t) {
      return "function" == typeof t;
    },
    isString: function isString(t) {
      return "string" == typeof t;
    },
    isNode: function isNode(t) {
      return !(!t || !t.nodeType || 1 != t.nodeType);
    },
    isArray: function isArray(t) {
      return Array.isArray(t);
    },
    isArrayLike: function isArrayLike(t) {
      return t && t.length && isFinite(t.length);
    },
    isObject: function isObject(e) {
      return "object" === t(e) && null != e && !w.isFunction(e) && !w.isArray(e);
    },
    isNil: function isNil(t) {
      return null == t;
    },
    has: function has(t, e) {
      return null !== t && hasOwnProperty.call(t, e);
    },
    size: function size(t) {
      if (w.isObject(t)) {
        if (t.keys) return t.keys().length;
        var e = 0;
        for (var i in t) w.has(t, i) && e++;
        return e;
      }
      return t.length;
    },
    isNumber: function isNumber(t) {
      return !isNaN(parseFloat(t)) && isFinite(t);
    }
  };
  function S(t, e) {
    if ((w.isNode(t) || t === window || t === document) && (t = [t]), w.isArrayLike(t) || w.isObject(t) || (t = [t]), 0 != w.size(t)) if (w.isArrayLike(t) && !w.isObject(t)) for (var i = t.length, n = 0; n < i && !1 !== e.call(t[n], t[n], n, t); n++);else if (w.isObject(t)) for (var s in t) if (w.has(t, s) && !1 === e.call(t[s], t[s], s, t)) break;
  }
  function T(t) {
    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
      i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
      n = t[f] = t[f] || [],
      s = {
        all: n,
        evt: null,
        found: null
      };
    return e && i && w.size(n) > 0 && S(n, function (t, n) {
      if (t.eventName == e && t.fn.toString() == i.toString()) return s.found = !0, s.evt = n, !1;
    }), s;
  }
  function k(t) {
    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      i = e.onElement,
      n = e.withCallback,
      s = e.avoidDuplicate,
      o = void 0 === s || s,
      l = e.once,
      r = void 0 !== l && l,
      a = e.useCapture,
      h = void 0 !== a && a,
      c = arguments.length > 2 ? arguments[2] : void 0,
      d = i || [];
    function u(t) {
      w.isFunction(n) && n.call(c, t, this), r && u.destroy();
    }
    return w.isString(d) && (d = document.querySelectorAll(d)), u.destroy = function () {
      S(d, function (e) {
        var i = T(e, t, u);
        i.found && i.all.splice(i.evt, 1), e.removeEventListener && e.removeEventListener(t, u, h);
      });
    }, S(d, function (e) {
      var i = T(e, t, u);
      (e.addEventListener && o && !i.found || !o) && (e.addEventListener(t, u, h), i.all.push({
        eventName: t,
        fn: u
      }));
    }), u;
  }
  function E(t, e) {
    S(e.split(" "), function (e) {
      return t.classList.add(e);
    });
  }
  function A(t, e) {
    S(e.split(" "), function (e) {
      return t.classList.remove(e);
    });
  }
  function C(t, e) {
    return t.classList.contains(e);
  }
  function L(t) {
    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
    if (!t || "" === e) return !1;
    if ("none" == e) return w.isFunction(i) && i(), !1;
    var n = e.split(" ");
    S(n, function (e) {
      E(t, "g" + e);
    }), k(v, {
      onElement: t,
      avoidDuplicate: !1,
      once: !0,
      withCallback: function withCallback(t, e) {
        S(n, function (t) {
          A(e, "g" + t);
        }), w.isFunction(i) && i();
      }
    });
  }
  function N(t) {
    var e = document.createDocumentFragment(),
      i = document.createElement("div");
    for (i.innerHTML = t; i.firstChild;) e.appendChild(i.firstChild);
    return e;
  }
  function I(t, e) {
    for (; t !== document.body;) {
      if ("function" == typeof (t = t.parentElement).matches ? t.matches(e) : t.msMatchesSelector(e)) return t;
    }
  }
  function O(t) {
    t.style.display = "block";
  }
  function M(t) {
    t.style.display = "none";
  }
  function q() {
    return {
      width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
      height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight
    };
  }
  function z(t) {
    if (C(t.target, "plyr--html5")) {
      var e = I(t.target, ".gslide-media");
      "enterfullscreen" == t.type && E(e, "fullscreen"), "exitfullscreen" == t.type && A(e, "fullscreen");
    }
  }
  function P(t) {
    return w.isNumber(t) ? "".concat(t, "px") : t;
  }
  function D(t, e) {
    var i = "video" == t.type ? P(e.videosWidth) : P(e.width),
      n = P(e.height);
    return t.width = w.has(t, "width") && "" !== t.width ? P(t.width) : i, t.height = w.has(t, "height") && "" !== t.height ? P(t.height) : n, t;
  }
  var X = function X() {
      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
        e = arguments.length > 1 ? arguments[1] : void 0,
        i = x({
          descPosition: e.descPosition
        }, b);
      if (w.isObject(t) && !w.isNode(t)) {
        w.has(t, "type") || (w.has(t, "content") && t.content ? t.type = "inline" : w.has(t, "href") && (t.type = W(t.href)));
        var n = x(i, t);
        return D(n, e), n;
      }
      var s = "",
        o = t.getAttribute("data-glightbox"),
        l = t.nodeName.toLowerCase();
      if ("a" === l && (s = t.href), "img" === l && (s = t.src), i.href = s, S(i, function (n, s) {
        w.has(e, s) && "width" !== s && (i[s] = e[s]);
        var o = t.dataset[s];
        w.isNil(o) || (i[s] = o);
      }), i.content && (i.type = "inline"), !i.type && s && (i.type = W(s)), w.isNil(o)) {
        if ("a" == l) {
          var r = t.title;
          w.isNil(r) || "" === r || (i.title = r);
        }
        if ("img" == l) {
          var a = t.alt;
          w.isNil(a) || "" === a || (i.title = a);
        }
        var h = t.getAttribute("data-description");
        w.isNil(h) || "" === h || (i.description = h);
      } else {
        var c = [];
        S(i, function (t, e) {
          c.push(";\\s?" + e);
        }), c = c.join("\\s?:|"), "" !== o.trim() && S(i, function (t, e) {
          var n = o,
            s = new RegExp("s?" + e + "s?:s?(.*?)(" + c + "s?:|$)"),
            l = n.match(s);
          if (l && l.length && l[1]) {
            var r = l[1].trim().replace(/;\s*$/, "");
            i[e] = r;
          }
        });
      }
      if (i.description && "." == i.description.substring(0, 1) && document.querySelector(i.description)) i.description = document.querySelector(i.description).innerHTML;else {
        var d = t.querySelector(".glightbox-desc");
        d && (i.description = d.innerHTML);
      }
      return D(i, e), i;
    },
    B = function B() {
      var t = this,
        e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
        i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
      if (C(e, "loaded")) return !1;
      w.isFunction(this.settings.beforeSlideLoad) && this.settings.beforeSlideLoad({
        index: i.index,
        slide: e,
        player: !1
      });
      var s = i.type,
        o = i.descPosition,
        l = e.querySelector(".gslide-media"),
        r = e.querySelector(".gslide-title"),
        a = e.querySelector(".gslide-desc"),
        h = e.querySelector(".gdesc-inner"),
        u = n,
        g = "gSlideTitle_" + i.index,
        p = "gSlideDesc_" + i.index;
      if (w.isFunction(this.settings.afterSlideLoad) && (u = function u() {
        w.isFunction(n) && n(), t.settings.afterSlideLoad({
          index: i.index,
          slide: e,
          player: t.getSlidePlayerInstance(i.index)
        });
      }), "" == i.title && "" == i.description ? h && h.parentNode.parentNode.removeChild(h.parentNode) : (r && "" !== i.title ? (r.id = g, r.innerHTML = i.title) : r.parentNode.removeChild(r), a && "" !== i.description ? (a.id = p, d && this.settings.moreLength > 0 ? (i.smallDescription = $(i.description, this.settings.moreLength, this.settings.moreText), a.innerHTML = i.smallDescription, U.apply(this, [a, i])) : a.innerHTML = i.description) : a.parentNode.removeChild(a), E(l.parentNode, "desc-".concat(o)), E(h.parentNode, "description-".concat(o))), E(l, "gslide-".concat(s)), E(e, "loaded"), "video" === s) return E(l.parentNode, "gvideo-container"), l.insertBefore(N('<div class="gvideo-wrapper"></div>'), l.firstChild), void F.apply(this, [e, i, u]);
      if ("external" === s) {
        var v = Y({
          url: i.href,
          callback: u
        });
        return l.parentNode.style.maxWidth = i.width, l.parentNode.style.height = i.height, void l.appendChild(v);
      }
      if ("inline" !== s) {
        if ("image" === s) {
          var f = new Image();
          return f.addEventListener("load", function () {
            f.naturalWidth > f.offsetWidth && (E(f, "zoomable"), new c(f, e, function () {
              t.resize(e);
            })), w.isFunction(u) && u();
          }, !1), f.src = i.href, f.alt = "", "" !== i.title && f.setAttribute("aria-labelledby", g), "" !== i.description && f.setAttribute("aria-describedby", p), void l.insertBefore(f, l.firstChild);
        }
        w.isFunction(u) && u();
      } else H.apply(this, [e, i, u]);
    };
  function F(t, e, i) {
    var n = this,
      s = "gvideo" + e.index,
      o = t.querySelector(".gvideo-wrapper");
    _(this.settings.plyr.css);
    var l = e.href,
      r = location.protocol.replace(":", ""),
      a = "",
      h = "",
      c = !1;
    "file" == r && (r = "http"), o.parentNode.style.maxWidth = e.width, _(this.settings.plyr.js, "Plyr", function () {
      if (l.match(/vimeo\.com\/([0-9]*)/)) {
        var t = /vimeo.*\/(\d+)/i.exec(l);
        a = "vimeo", h = t[1];
      }
      if (l.match(/(youtube\.com|youtube-nocookie\.com)\/watch\?v=([a-zA-Z0-9\-_]+)/) || l.match(/youtu\.be\/([a-zA-Z0-9\-_]+)/) || l.match(/(youtube\.com|youtube-nocookie\.com)\/embed\/([a-zA-Z0-9\-_]+)/)) {
        var r = function (t) {
          var e = "";
          e = void 0 !== (t = t.replace(/(>|<)/gi, "").split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/)/))[2] ? (e = t[2].split(/[^0-9a-z_\-]/i))[0] : t;
          return e;
        }(l);
        a = "youtube", h = r;
      }
      if (null !== l.match(/\.(mp4|ogg|webm|mov)$/)) {
        a = "local";
        var d = '<video id="' + s + '" ';
        d += 'style="background:#000; max-width: '.concat(e.width, ';" '), d += 'preload="metadata" ', d += 'x-webkit-airplay="allow" ', d += 'webkit-playsinline="" ', d += "controls ", d += 'class="gvideo-local">';
        var u = l.toLowerCase().split(".").pop(),
          g = {
            mp4: "",
            ogg: "",
            webm: ""
          };
        for (var p in g[u = "mov" == u ? "mp4" : u] = l, g) if (g.hasOwnProperty(p)) {
          var v = g[p];
          e.hasOwnProperty(p) && (v = e[p]), "" !== v && (d += '<source src="'.concat(v, '" type="video/').concat(p, '">'));
        }
        c = N(d += "</video>");
      }
      var f = c || N('<div id="'.concat(s, '" data-plyr-provider="').concat(a, '" data-plyr-embed-id="').concat(h, '"></div>'));
      E(o, "".concat(a, "-video gvideo")), o.appendChild(f), o.setAttribute("data-id", s), o.setAttribute("data-index", e.index);
      var y = w.has(n.settings.plyr, "config") ? n.settings.plyr.config : {},
        b = new Plyr("#" + s, y);
      b.on("ready", function (t) {
        var e = t.detail.plyr;
        m[s] = e, w.isFunction(i) && i();
      }), b.on("enterfullscreen", z), b.on("exitfullscreen", z);
    });
  }
  function Y(t) {
    var e = t.url,
      i = t.allow,
      n = t.callback,
      s = t.appendTo,
      o = document.createElement("iframe");
    return o.className = "vimeo-video gvideo", o.src = e, o.style.width = "100%", o.style.height = "100%", i && o.setAttribute("allow", i), o.onload = function () {
      E(o, "node-ready"), w.isFunction(n) && n();
    }, s && s.appendChild(o), o;
  }
  function _(t, e, i) {
    if (w.isNil(t)) console.error("Inject videos api error");else {
      var n;
      if (w.isFunction(e) && (i = e, e = !1), -1 !== t.indexOf(".css")) {
        if ((n = document.querySelectorAll('link[href="' + t + '"]')) && n.length > 0) return void (w.isFunction(i) && i());
        var s = document.getElementsByTagName("head")[0],
          o = s.querySelectorAll('link[rel="stylesheet"]'),
          l = document.createElement("link");
        return l.rel = "stylesheet", l.type = "text/css", l.href = t, l.media = "all", o ? s.insertBefore(l, o[0]) : s.appendChild(l), void (w.isFunction(i) && i());
      }
      if ((n = document.querySelectorAll('script[src="' + t + '"]')) && n.length > 0) {
        if (w.isFunction(i)) {
          if (w.isString(e)) return j(function () {
            return void 0 !== window[e];
          }, function () {
            i();
          }), !1;
          i();
        }
      } else {
        var r = document.createElement("script");
        r.type = "text/javascript", r.src = t, r.onload = function () {
          if (w.isFunction(i)) {
            if (w.isString(e)) return j(function () {
              return void 0 !== window[e];
            }, function () {
              i();
            }), !1;
            i();
          }
        }, document.body.appendChild(r);
      }
    }
  }
  function j(t, e, i, n) {
    if (t()) e();else {
      var s;
      i || (i = 100);
      var o = setInterval(function () {
        t() && (clearInterval(o), s && clearTimeout(s), e());
      }, i);
      n && (s = setTimeout(function () {
        clearInterval(o);
      }, n));
    }
  }
  function H(t, e, i) {
    var n,
      s = this,
      o = t.querySelector(".gslide-media"),
      l = !(!w.has(e, "href") || !e.href) && e.href.split("#").pop().trim(),
      r = !(!w.has(e, "content") || !e.content) && e.content;
    if (r && (w.isString(r) && (n = N('<div class="ginlined-content">'.concat(r, "</div>"))), w.isNode(r))) {
      "none" == r.style.display && (r.style.display = "block");
      var a = document.createElement("div");
      a.className = "ginlined-content", a.appendChild(r), n = a;
    }
    if (l) {
      var h = document.getElementById(l);
      if (!h) return !1;
      var c = h.cloneNode(!0);
      c.style.height = e.height, c.style.maxWidth = e.width, E(c, "ginlined-content"), n = c;
    }
    if (!n) return console.error("Unable to append inline slide content", e), !1;
    o.style.height = e.height, o.style.width = e.width, o.appendChild(n), this.events["inlineclose" + l] = k("click", {
      onElement: o.querySelectorAll(".gtrigger-close"),
      withCallback: function withCallback(t) {
        t.preventDefault(), s.close();
      }
    }), w.isFunction(i) && i();
  }
  var W = function W(t) {
    var e = t;
    if (null !== (t = t.toLowerCase()).match(/\.(jpeg|jpg|jpe|gif|png|apn|webp|svg)$/)) return "image";
    if (t.match(/(youtube\.com|youtube-nocookie\.com)\/watch\?v=([a-zA-Z0-9\-_]+)/) || t.match(/youtu\.be\/([a-zA-Z0-9\-_]+)/) || t.match(/(youtube\.com|youtube-nocookie\.com)\/embed\/([a-zA-Z0-9\-_]+)/)) return "video";
    if (t.match(/vimeo\.com\/([0-9]*)/)) return "video";
    if (null !== t.match(/\.(mp4|ogg|webm|mov)$/)) return "video";
    if (t.indexOf("#") > -1 && "" !== e.split("#").pop().trim()) return "inline";
    return t.includes("gajax=true") ? "ajax" : "external";
  };
  function V() {
    var t = this;
    if (this.events.hasOwnProperty("keyboard")) return !1;
    this.events.keyboard = k("keydown", {
      onElement: window,
      withCallback: function withCallback(e, i) {
        var n = (e = e || window.event).keyCode;
        if (9 == n) {
          var o = !(!document.activeElement || !document.activeElement.nodeName) && document.activeElement.nodeName.toLocaleLowerCase();
          if ("input" == o || "textarea" == o || "button" == o) return;
          e.preventDefault();
          var l = document.querySelectorAll(".gbtn");
          if (!l || l.length <= 0) return;
          var r = s(l).filter(function (t) {
            return C(t, "focused");
          });
          if (!r.length) {
            var a = document.querySelector('.gbtn[tabindex="0"]');
            return void (a && (a.focus(), E(a, "focused")));
          }
          l.forEach(function (t) {
            return A(t, "focused");
          });
          var h = r[0].getAttribute("tabindex");
          h = h || "0";
          var c = parseInt(h) + 1;
          c > l.length - 1 && (c = "0");
          var d = document.querySelector('.gbtn[tabindex="'.concat(c, '"]'));
          d && (d.focus(), E(d, "focused"));
        }
        39 == n && t.nextSlide(), 37 == n && t.prevSlide(), 27 == n && t.close();
      }
    });
  }
  function G() {
    var t = this;
    if (this.events.hasOwnProperty("touch")) return !1;
    var e,
      i,
      n,
      s = q(),
      o = s.width,
      l = s.height,
      r = !1,
      a = null,
      c = null,
      d = null,
      u = !1,
      g = 1,
      p = 1,
      v = !1,
      f = !1,
      m = null,
      y = null,
      b = null,
      x = null,
      w = 0,
      S = 0,
      T = !1,
      k = !1,
      L = {},
      N = {},
      O = 0,
      M = 0,
      z = this,
      P = document.getElementById("glightbox-slider"),
      D = document.querySelector(".goverlay"),
      X = (this.loop(), new h(P, {
        touchStart: function touchStart(t) {
          if (C(t.targetTouches[0].target, "ginner-container") || I(t.targetTouches[0].target, ".gslide-desc")) return r = !1, !1;
          r = !0, N = t.targetTouches[0], L.pageX = t.targetTouches[0].pageX, L.pageY = t.targetTouches[0].pageY, O = t.targetTouches[0].clientX, M = t.targetTouches[0].clientY, a = z.activeSlide, c = a.querySelector(".gslide-media"), n = a.querySelector(".gslide-inline"), d = null, C(c, "gslide-image") && (d = c.querySelector("img")), A(D, "greset");
        },
        touchMove: function touchMove(s) {
          if (r && (N = s.targetTouches[0], !v && !f)) {
            if (n && n.offsetHeight > l) {
              var a = L.pageX - N.pageX;
              if (Math.abs(a) <= 13) return !1;
            }
            u = !0;
            var h,
              g = s.targetTouches[0].clientX,
              p = s.targetTouches[0].clientY,
              m = O - g,
              y = M - p;
            if (Math.abs(m) > Math.abs(y) ? (T = !1, k = !0) : (k = !1, T = !0), e = N.pageX - L.pageX, w = 100 * e / o, i = N.pageY - L.pageY, S = 100 * i / l, T && d && (h = 1 - Math.abs(i) / l, D.style.opacity = h, t.settings.touchFollowAxis && (w = 0)), k && (h = 1 - Math.abs(e) / o, c.style.opacity = h, t.settings.touchFollowAxis && (S = 0)), !d) return R(c, "translate3d(".concat(w, "%, 0, 0)"));
            R(c, "translate3d(".concat(w, "%, ").concat(S, "%, 0)"));
          }
        },
        touchEnd: function touchEnd() {
          if (r) {
            if (u = !1, f || v) return b = m, void (x = y);
            var e = Math.abs(parseInt(S)),
              i = Math.abs(parseInt(w));
            if (!(e > 29 && d)) return e < 29 && i < 25 ? (E(D, "greset"), D.style.opacity = 1, Z(c)) : void 0;
            t.close();
          }
        },
        multipointEnd: function multipointEnd() {
          setTimeout(function () {
            v = !1;
          }, 50);
        },
        multipointStart: function multipointStart() {
          v = !0, g = p || 1;
        },
        pinch: function pinch(t) {
          if (!d || u) return !1;
          v = !0, d.scaleX = d.scaleY = g * t.zoom;
          var e = g * t.zoom;
          if (f = !0, e <= 1) return f = !1, e = 1, x = null, b = null, m = null, y = null, void d.setAttribute("style", "");
          e > 4.5 && (e = 4.5), d.style.transform = "scale3d(".concat(e, ", ").concat(e, ", 1)"), p = e;
        },
        pressMove: function pressMove(t) {
          if (f && !v) {
            var e = N.pageX - L.pageX,
              i = N.pageY - L.pageY;
            b && (e += b), x && (i += x), m = e, y = i;
            var n = "translate3d(".concat(e, "px, ").concat(i, "px, 0)");
            p && (n += " scale3d(".concat(p, ", ").concat(p, ", 1)")), R(d, n);
          }
        },
        swipe: function swipe(e) {
          if (!f) if (v) v = !1;else {
            if ("Left" == e.direction) {
              if (t.index == t.elements.length - 1) return Z(c);
              t.nextSlide();
            }
            if ("Right" == e.direction) {
              if (0 == t.index) return Z(c);
              t.prevSlide();
            }
          }
        }
      }));
    this.events.touch = X;
  }
  function R(t) {
    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
    if ("" == e) return t.style.webkitTransform = "", t.style.MozTransform = "", t.style.msTransform = "", t.style.OTransform = "", t.style.transform = "", !1;
    t.style.webkitTransform = e, t.style.MozTransform = e, t.style.msTransform = e, t.style.OTransform = e, t.style.transform = e;
  }
  function Z(t) {
    var e = C(t, "gslide-media") ? t : t.querySelector(".gslide-media"),
      i = t.querySelector(".gslide-description");
    E(e, "greset"), R(e, "translate3d(0, 0, 0)");
    k(p, {
      onElement: e,
      once: !0,
      withCallback: function withCallback(t, i) {
        A(e, "greset");
      }
    });
    e.style.opacity = "", i && (i.style.opacity = "");
  }
  function $(t) {
    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 50,
      i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
      n = i;
    if ((t = t.trim()).length <= e) return t;
    var s = t.substr(0, e - 1);
    return n ? s + '... <a href="javascript:void(0)" class="desc-more">' + i + "</a>" : s;
  }
  function U(t, e) {
    var i = t.querySelector(".desc-more");
    if (!i) return !1;
    k("click", {
      onElement: i,
      withCallback: function withCallback(t, i) {
        t.preventDefault();
        var n = document.body,
          s = I(i, ".gslide-desc");
        if (!s) return !1;
        s.innerHTML = e.description, E(n, "gdesc-open");
        var o = k("click", {
          onElement: [n, I(s, ".gslide-description")],
          withCallback: function withCallback(t, i) {
            "a" !== t.target.nodeName.toLowerCase() && (A(n, "gdesc-open"), E(n, "gdesc-closed"), s.innerHTML = e.smallDescription, U(s, e), setTimeout(function () {
              A(n, "gdesc-closed");
            }, 400), o.destroy());
          }
        });
      }
    });
  }
  var J = function () {
    function t() {
      var i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      e(this, t), this.settings = x(y, i), this.effectsClasses = this.getAnimationClasses(), this.slidesData = {};
    }
    return n(t, [{
      key: "init",
      value: function value() {
        var t = this;
        this.baseEvents = k("click", {
          onElement: this.getSelector(),
          withCallback: function withCallback(e, i) {
            e.preventDefault(), t.open(i);
          }
        }), this.elements = this.getElements();
      }
    }, {
      key: "open",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
          e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
        if (0 == this.elements.length) return !1;
        this.activeSlide = null, this.prevActiveSlideIndex = null, this.prevActiveSlide = null;
        var i = w.isNumber(e) ? e : this.settings.startAt;
        w.isNode(t) && w.isNil(i) && (i = this.getElementIndex(t)) < 0 && (i = 0), w.isNumber(i) || (i = 0), this.build(), L(this.overlay, "none" == this.settings.openEffect ? "none" : this.settings.cssEfects.fade["in"]);
        var n = document.body,
          s = window.innerWidth - document.documentElement.clientWidth;
        if (s > 0) {
          var o = document.createElement("style");
          o.type = "text/css", o.className = "gcss-styles", o.innerText = ".gscrollbar-fixer {margin-right: ".concat(s, "px}"), document.head.appendChild(o), E(n, "gscrollbar-fixer");
        }
        if (E(n, "glightbox-open"), E(g, "glightbox-open"), d && (E(document.body, "glightbox-mobile"), this.settings.slideEffect = "slide"), this.showSlide(i, !0), 1 == this.elements.length ? (M(this.prevButton), M(this.nextButton)) : (O(this.prevButton), O(this.nextButton)), this.lightboxOpen = !0, w.isFunction(this.settings.onOpen) && this.settings.onOpen(), u && this.settings.touchNavigation) return G.apply(this), !1;
        this.settings.keyboardNavigation && V.apply(this);
      }
    }, {
      key: "openAt",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        this.open(null, t);
      }
    }, {
      key: "showSlide",
      value: function value() {
        var t = this,
          e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
          i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        O(this.loader), this.index = parseInt(e);
        var n = this.slidesContainer.querySelector(".current");
        n && A(n, "current"), this.slideAnimateOut();
        var s = this.slidesContainer.querySelectorAll(".gslide")[e];
        if (C(s, "loaded")) this.slideAnimateIn(s, i), M(this.loader);else {
          O(this.loader);
          var o = this.elements[e];
          o.index = e, this.slidesData[e] = o, B.apply(this, [s, o, function () {
            M(t.loader), t.resize(), t.slideAnimateIn(s, i);
          }]);
        }
        this.slideDescription = s.querySelector(".gslide-description"), this.slideDescriptionContained = this.slideDescription && C(this.slideDescription.parentNode, "gslide-media"), this.preloadSlide(e + 1), this.preloadSlide(e - 1), this.updateNavigationClasses(), this.activeSlide = s;
      }
    }, {
      key: "preloadSlide",
      value: function value(t) {
        var e = this;
        if (t < 0 || t > this.elements.length - 1) return !1;
        if (w.isNil(this.elements[t])) return !1;
        var i = this.slidesContainer.querySelectorAll(".gslide")[t];
        if (C(i, "loaded")) return !1;
        var n = this.elements[t];
        n.index = t, this.slidesData[t] = n;
        var s = n.sourcetype;
        "video" == s || "external" == s ? setTimeout(function () {
          B.apply(e, [i, n]);
        }, 200) : B.apply(this, [i, n]);
      }
    }, {
      key: "prevSlide",
      value: function value() {
        this.goToSlide(this.index - 1);
      }
    }, {
      key: "nextSlide",
      value: function value() {
        this.goToSlide(this.index + 1);
      }
    }, {
      key: "goToSlide",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        this.prevActiveSlide = this.activeSlide, this.prevActiveSlideIndex = this.index;
        var e = this.loop();
        if (!e && (t < 0 || t > this.elements.length - 1)) return !1;
        t < 0 ? t = this.elements.length - 1 : t >= this.elements.length && (t = 0), this.showSlide(t);
      }
    }, {
      key: "insertSlide",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1,
          i = x({
            descPosition: this.settings.descPosition
          }, b),
          n = N(this.settings.slideHtml),
          s = this.elements.length - 1;
        if (e < 0 && (e = this.elements.length), (t = x(i, t)).index = e, t.node = !1, this.elements.splice(e, 0, t), this.slidesContainer) {
          if (e > s) this.slidesContainer.appendChild(n);else {
            var o = this.slidesContainer.querySelectorAll(".gslide")[e];
            this.slidesContainer.insertBefore(n, o);
          }
          (0 == this.index && 0 == e || this.index - 1 == e || this.index + 1 == e) && this.preloadSlide(e), 0 == this.index && 0 == e && (this.index = 1), this.updateNavigationClasses();
        }
        w.isFunction(this.settings.slideInserted) && this.settings.slideInserted({
          index: e,
          slide: this.slidesContainer.querySelectorAll(".gslide")[e],
          player: this.getSlidePlayerInstance(e)
        });
      }
    }, {
      key: "removeSlide",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -1;
        if (t < 0 || t > this.elements.length - 1) return !1;
        var e = this.slidesContainer && this.slidesContainer.querySelectorAll(".gslide")[t];
        e && (this.getActiveSlideIndex() == t && (t == this.elements.length - 1 ? this.prevSlide() : this.nextSlide()), e.parentNode.removeChild(e)), this.elements.splice(t, 1), w.isFunction(this.settings.slideRemoved) && this.settings.slideRemoved(t);
      }
    }, {
      key: "slideAnimateIn",
      value: function value(t, e) {
        var i = this,
          n = t.querySelector(".gslide-media"),
          s = t.querySelector(".gslide-description"),
          o = {
            index: this.prevActiveSlideIndex,
            slide: this.prevActiveSlide,
            player: this.getSlidePlayerInstance(this.prevActiveSlideIndex)
          },
          l = {
            index: this.index,
            slide: this.activeSlide,
            player: this.getSlidePlayerInstance(this.index)
          };
        if (n.offsetWidth > 0 && s && (M(s), s.style.display = ""), A(t, this.effectsClasses), e) L(t, this.settings.openEffect, function () {
          !d && i.settings.autoplayVideos && i.playSlideVideo(t), w.isFunction(i.settings.afterSlideChange) && i.settings.afterSlideChange.apply(i, [o, l]);
        });else {
          var r = this.settings.slideEffect,
            a = "none" !== r ? this.settings.cssEfects[r]["in"] : r;
          this.prevActiveSlideIndex > this.index && "slide" == this.settings.slideEffect && (a = this.settings.cssEfects.slide_back["in"]), L(t, a, function () {
            !d && i.settings.autoplayVideos && i.playSlideVideo(t), w.isFunction(i.settings.afterSlideChange) && i.settings.afterSlideChange.apply(i, [o, l]);
          });
        }
        setTimeout(function () {
          i.resize(t);
        }, 100), E(t, "current");
      }
    }, {
      key: "slideAnimateOut",
      value: function value() {
        if (!this.prevActiveSlide) return !1;
        var t = this.prevActiveSlide;
        A(t, this.effectsClasses), E(t, "prev");
        var e = this.settings.slideEffect,
          i = "none" !== e ? this.settings.cssEfects[e].out : e;
        this.stopSlideVideo(t), w.isFunction(this.settings.beforeSlideChange) && this.settings.beforeSlideChange.apply(this, [{
          index: this.prevActiveSlideIndex,
          slide: this.prevActiveSlide,
          player: this.getSlidePlayerInstance(this.prevActiveSlideIndex)
        }, {
          index: this.index,
          slide: this.activeSlide,
          player: this.getSlidePlayerInstance(this.index)
        }]), this.prevActiveSlideIndex > this.index && "slide" == this.settings.slideEffect && (i = this.settings.cssEfects.slide_back.out), L(t, i, function () {
          var e = t.querySelector(".gslide-media"),
            i = t.querySelector(".gslide-description");
          e.style.transform = "", A(e, "greset"), e.style.opacity = "", i && (i.style.opacity = ""), A(t, "prev");
        });
      }
    }, {
      key: "getAllPlayers",
      value: function value() {
        return m;
      }
    }, {
      key: "getSlidePlayerInstance",
      value: function value(t) {
        var e = "gvideo" + t;
        return !(!w.has(m, e) || !m[e]) && m[e];
      }
    }, {
      key: "stopSlideVideo",
      value: function value(t) {
        if (w.isNode(t)) {
          var e = t.querySelector(".gvideo-wrapper");
          e && (t = e.getAttribute("data-index"));
        }
        var i = this.getSlidePlayerInstance(t);
        i && i.playing && i.pause();
      }
    }, {
      key: "playSlideVideo",
      value: function value(t) {
        if (w.isNode(t)) {
          var e = t.querySelector(".gvideo-wrapper");
          e && (t = e.getAttribute("data-index"));
        }
        var i = this.getSlidePlayerInstance(t);
        i && !i.playing && i.play();
      }
    }, {
      key: "setElements",
      value: function value(t) {
        var e = this;
        this.settings.elements = !1;
        var i = [];
        S(t, function (t) {
          var n = X(t, e.settings);
          i.push(n);
        }), this.elements = i, this.lightboxOpen && (this.slidesContainer.innerHTML = "", S(this.elements, function () {
          var t = N(e.settings.slideHtml);
          e.slidesContainer.appendChild(t);
        }), this.showSlide(0, !0));
      }
    }, {
      key: "getElementIndex",
      value: function value(t) {
        var e = !1;
        return S(this.elements, function (i, n) {
          if (w.has(i, "node") && i.node == t) return e = n, !0;
        }), e;
      }
    }, {
      key: "getElements",
      value: function value() {
        var t = this,
          e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
          i = [];
        this.elements = this.elements ? this.elements : [], !w.isNil(this.settings.elements) && w.isArray(this.settings.elements) && (i = this.settings.elements);
        var n = !1,
          s = this.getSelector();
        if (null !== e) {
          var o = e.getAttribute("data-gallery");
          o && "" !== o && (n = document.querySelectorAll('[data-gallery="'.concat(o, '"]')));
        }
        return 0 == n && s && (n = document.querySelectorAll(this.getSelector())), S(n = Array.prototype.slice.call(n), function (e, n) {
          var s = X(e, t.settings);
          s.node = e, s.index = n, i.push(s);
        }), i;
      }
    }, {
      key: "getSelector",
      value: function value() {
        return "data-" == this.settings.selector.substring(0, 5) ? "*[".concat(this.settings.selector, "]") : this.settings.selector;
      }
    }, {
      key: "getActiveSlide",
      value: function value() {
        return this.slidesContainer.querySelectorAll(".gslide")[this.index];
      }
    }, {
      key: "getActiveSlideIndex",
      value: function value() {
        return this.index;
      }
    }, {
      key: "getAnimationClasses",
      value: function value() {
        var t = [];
        for (var e in this.settings.cssEfects) if (this.settings.cssEfects.hasOwnProperty(e)) {
          var i = this.settings.cssEfects[e];
          t.push("g".concat(i["in"])), t.push("g".concat(i.out));
        }
        return t.join(" ");
      }
    }, {
      key: "build",
      value: function value() {
        var t = this;
        if (this.built) return !1;
        var e = w.has(this.settings.svg, "next") ? this.settings.svg.next : "",
          i = w.has(this.settings.svg, "prev") ? this.settings.svg.prev : "",
          n = w.has(this.settings.svg, "close") ? this.settings.svg.close : "",
          s = this.settings.lightboxHtml;
        s = N(s = (s = (s = s.replace(/{nextSVG}/g, e)).replace(/{prevSVG}/g, i)).replace(/{closeSVG}/g, n)), document.body.appendChild(s);
        var o = document.getElementById("glightbox-body");
        this.modal = o;
        var l = o.querySelector(".gclose");
        this.prevButton = o.querySelector(".gprev"), this.nextButton = o.querySelector(".gnext"), this.overlay = o.querySelector(".goverlay"), this.loader = o.querySelector(".gloader"), this.slidesContainer = document.getElementById("glightbox-slider"), this.events = {}, E(this.modal, "glightbox-" + this.settings.skin), this.settings.closeButton && l && (this.events.close = k("click", {
          onElement: l,
          withCallback: function withCallback(e, i) {
            e.preventDefault(), t.close();
          }
        })), l && !this.settings.closeButton && l.parentNode.removeChild(l), this.nextButton && (this.events.next = k("click", {
          onElement: this.nextButton,
          withCallback: function withCallback(e, i) {
            e.preventDefault(), t.nextSlide();
          }
        })), this.prevButton && (this.events.prev = k("click", {
          onElement: this.prevButton,
          withCallback: function withCallback(e, i) {
            e.preventDefault(), t.prevSlide();
          }
        })), this.settings.closeOnOutsideClick && (this.events.outClose = k("click", {
          onElement: o,
          withCallback: function withCallback(e, i) {
            C(document.body, "glightbox-mobile") || I(e.target, ".ginner-container") || I(e.target, ".gbtn") || C(e.target, "gnext") || C(e.target, "gprev") || t.close();
          }
        })), S(this.elements, function () {
          var e = N(t.settings.slideHtml);
          t.slidesContainer.appendChild(e);
        }), u && E(document.body, "glightbox-touch"), this.events.resize = k("resize", {
          onElement: window,
          withCallback: function withCallback() {
            t.resize();
          }
        }), this.built = !0;
      }
    }, {
      key: "resize",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        if ((t = t || this.activeSlide) && !C(t, "zoomed")) {
          var e = q(),
            i = t.querySelector(".gvideo-wrapper"),
            n = t.querySelector(".gslide-image"),
            s = this.slideDescription,
            o = e.width,
            l = e.height;
          if (o <= 768 ? E(document.body, "glightbox-mobile") : A(document.body, "glightbox-mobile"), i || n) {
            var r = !1;
            if (s && (C(s, "description-bottom") || C(s, "description-top")) && !C(s, "gabsolute") && (r = !0), n) if (o <= 768) {
              var a = n.querySelector("img");
              a.setAttribute("style", "");
            } else if (r) {
              var h = s.offsetHeight,
                c = this.slidesData[this.index].width;
              c = c <= o ? c + "px" : "100%";
              var d = n.querySelector("img");
              d.setAttribute("style", "max-height: calc(100vh - ".concat(h, "px)")), s.setAttribute("style", "max-width: ".concat(d.offsetWidth, "px;"));
            }
            if (i) {
              var u = w.has(this.settings.plyr.config, "ratio") ? this.settings.plyr.config.ratio : "16:9",
                g = u.split(":"),
                p = this.slidesData[this.index].width,
                v = p / (parseInt(g[0]) / parseInt(g[1]));
              if (v = Math.floor(v), r && (l -= s.offsetHeight), l < v && o > p) {
                var f = i.offsetWidth,
                  m = i.offsetHeight,
                  y = l / m,
                  b = {
                    width: f * y,
                    height: m * y
                  };
                i.parentNode.setAttribute("style", "max-width: ".concat(b.width, "px")), r && s.setAttribute("style", "max-width: ".concat(b.width, "px;"));
              } else i.parentNode.style.maxWidth = "".concat(p, "px"), r && s.setAttribute("style", "max-width: ".concat(p, "px;"));
            }
          }
        }
      }
    }, {
      key: "reload",
      value: function value() {
        this.init();
      }
    }, {
      key: "updateNavigationClasses",
      value: function value() {
        var t = this.loop();
        A(this.nextButton, "disabled"), A(this.prevButton, "disabled"), 0 == this.index && this.elements.length - 1 == 0 ? (E(this.prevButton, "disabled"), E(this.nextButton, "disabled")) : 0 !== this.index || t ? this.index !== this.elements.length - 1 || t || E(this.nextButton, "disabled") : E(this.prevButton, "disabled");
      }
    }, {
      key: "loop",
      value: function value() {
        var t = w.has(this.settings, "loopAtEnd") ? this.settings.loopAtEnd : null;
        return t = w.has(this.settings, "loop") ? this.settings.loop : t, t;
      }
    }, {
      key: "close",
      value: function value() {
        var t = this;
        if (!this.lightboxOpen) {
          if (this.events) {
            for (var e in this.events) this.events.hasOwnProperty(e) && this.events[e].destroy();
            this.events = null;
          }
          return !1;
        }
        if (this.closing) return !1;
        this.closing = !0, this.stopSlideVideo(this.activeSlide), E(this.modal, "glightbox-closing"), L(this.overlay, "none" == this.settings.openEffect ? "none" : this.settings.cssEfects.fade.out), L(this.activeSlide, this.settings.closeEffect, function () {
          if (t.activeSlide = null, t.prevActiveSlideIndex = null, t.prevActiveSlide = null, t.built = !1, t.events) {
            for (var e in t.events) t.events.hasOwnProperty(e) && t.events[e].destroy();
            t.events = null;
          }
          var i = document.body;
          A(g, "glightbox-open"), A(i, "glightbox-open touching gdesc-open glightbox-touch glightbox-mobile gscrollbar-fixer"), t.modal.parentNode.removeChild(t.modal), w.isFunction(t.settings.onClose) && t.settings.onClose();
          var n = document.querySelector(".gcss-styles");
          n && n.parentNode.removeChild(n), t.lightboxOpen = !1, t.closing = null;
        });
      }
    }, {
      key: "destroy",
      value: function value() {
        this.close(), this.baseEvents.destroy();
      }
    }]), t;
  }();
  return function () {
    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
      e = new J(t);
    return e.init(), e;
  };
});

/***/ }),

/***/ "./assets/js/imagesloaded.min.js":
/*!***************************************!*\
  !*** ./assets/js/imagesloaded.min.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_LOCAL_MODULE_0__, __WEBPACK_LOCAL_MODULE_0__factory, __WEBPACK_LOCAL_MODULE_0__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
__webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * imagesLoaded PACKAGED v4.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

!function (e, t) {
   true ? !(__WEBPACK_LOCAL_MODULE_0__factory = (t), (typeof __WEBPACK_LOCAL_MODULE_0__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_0__module = { id: "ev-emitter/ev-emitter", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_0__ = __WEBPACK_LOCAL_MODULE_0__factory.call(__WEBPACK_LOCAL_MODULE_0__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_0__module.exports, __WEBPACK_LOCAL_MODULE_0__module)), (__WEBPACK_LOCAL_MODULE_0__module.loaded = true), __WEBPACK_LOCAL_MODULE_0__ === undefined && (__WEBPACK_LOCAL_MODULE_0__ = __WEBPACK_LOCAL_MODULE_0__module.exports)) : __WEBPACK_LOCAL_MODULE_0__ = __WEBPACK_LOCAL_MODULE_0__factory)) : 0;
}("undefined" != typeof window ? window : this, function () {
  function e() {}
  var t = e.prototype;
  return t.on = function (e, t) {
    if (e && t) {
      var i = this._events = this._events || {},
        n = i[e] = i[e] || [];
      return n.indexOf(t) == -1 && n.push(t), this;
    }
  }, t.once = function (e, t) {
    if (e && t) {
      this.on(e, t);
      var i = this._onceEvents = this._onceEvents || {},
        n = i[e] = i[e] || {};
      return n[t] = !0, this;
    }
  }, t.off = function (e, t) {
    var i = this._events && this._events[e];
    if (i && i.length) {
      var n = i.indexOf(t);
      return n != -1 && i.splice(n, 1), this;
    }
  }, t.emitEvent = function (e, t) {
    var i = this._events && this._events[e];
    if (i && i.length) {
      i = i.slice(0), t = t || [];
      for (var n = this._onceEvents && this._onceEvents[e], o = 0; o < i.length; o++) {
        var r = i[o],
          s = n && n[r];
        s && (this.off(e, r), delete n[r]), r.apply(this, t);
      }
      return this;
    }
  }, t.allOff = function () {
    delete this._events, delete this._onceEvents;
  }, e;
}), function (e, t) {
  "use strict";

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (i) {
    return t(e, i);
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}("undefined" != typeof window ? window : this, function (e, t) {
  function i(e, t) {
    for (var i in t) e[i] = t[i];
    return e;
  }
  function n(e) {
    if (Array.isArray(e)) return e;
    var t = "object" == _typeof(e) && "number" == typeof e.length;
    return t ? d.call(e) : [e];
  }
  function o(e, t, r) {
    if (!(this instanceof o)) return new o(e, t, r);
    var s = e;
    return "string" == typeof e && (s = document.querySelectorAll(e)), s ? (this.elements = n(s), this.options = i({}, this.options), "function" == typeof t ? r = t : i(this.options, t), r && this.on("always", r), this.getImages(), h && (this.jqDeferred = new h.Deferred()), void setTimeout(this.check.bind(this))) : void a.error("Bad element for imagesLoaded " + (s || e));
  }
  function r(e) {
    this.img = e;
  }
  function s(e, t) {
    this.url = e, this.element = t, this.img = new Image();
  }
  var h = e.jQuery,
    a = e.console,
    d = Array.prototype.slice;
  o.prototype = Object.create(t.prototype), o.prototype.options = {}, o.prototype.getImages = function () {
    this.images = [], this.elements.forEach(this.addElementImages, this);
  }, o.prototype.addElementImages = function (e) {
    "IMG" == e.nodeName && this.addImage(e), this.options.background === !0 && this.addElementBackgroundImages(e);
    var t = e.nodeType;
    if (t && u[t]) {
      for (var i = e.querySelectorAll("img"), n = 0; n < i.length; n++) {
        var o = i[n];
        this.addImage(o);
      }
      if ("string" == typeof this.options.background) {
        var r = e.querySelectorAll(this.options.background);
        for (n = 0; n < r.length; n++) {
          var s = r[n];
          this.addElementBackgroundImages(s);
        }
      }
    }
  };
  var u = {
    1: !0,
    9: !0,
    11: !0
  };
  return o.prototype.addElementBackgroundImages = function (e) {
    var t = getComputedStyle(e);
    if (t) for (var i = /url\((['"])?(.*?)\1\)/gi, n = i.exec(t.backgroundImage); null !== n;) {
      var o = n && n[2];
      o && this.addBackground(o, e), n = i.exec(t.backgroundImage);
    }
  }, o.prototype.addImage = function (e) {
    var t = new r(e);
    this.images.push(t);
  }, o.prototype.addBackground = function (e, t) {
    var i = new s(e, t);
    this.images.push(i);
  }, o.prototype.check = function () {
    function e(e, i, n) {
      setTimeout(function () {
        t.progress(e, i, n);
      });
    }
    var t = this;
    return this.progressedCount = 0, this.hasAnyBroken = !1, this.images.length ? void this.images.forEach(function (t) {
      t.once("progress", e), t.check();
    }) : void this.complete();
  }, o.prototype.progress = function (e, t, i) {
    this.progressedCount++, this.hasAnyBroken = this.hasAnyBroken || !e.isLoaded, this.emitEvent("progress", [this, e, t]), this.jqDeferred && this.jqDeferred.notify && this.jqDeferred.notify(this, e), this.progressedCount == this.images.length && this.complete(), this.options.debug && a && a.log("progress: " + i, e, t);
  }, o.prototype.complete = function () {
    var e = this.hasAnyBroken ? "fail" : "done";
    if (this.isComplete = !0, this.emitEvent(e, [this]), this.emitEvent("always", [this]), this.jqDeferred) {
      var t = this.hasAnyBroken ? "reject" : "resolve";
      this.jqDeferred[t](this);
    }
  }, r.prototype = Object.create(t.prototype), r.prototype.check = function () {
    var e = this.getIsImageComplete();
    return e ? void this.confirm(0 !== this.img.naturalWidth, "naturalWidth") : (this.proxyImage = new Image(), this.proxyImage.addEventListener("load", this), this.proxyImage.addEventListener("error", this), this.img.addEventListener("load", this), this.img.addEventListener("error", this), void (this.proxyImage.src = this.img.src));
  }, r.prototype.getIsImageComplete = function () {
    return this.img.complete && this.img.naturalWidth;
  }, r.prototype.confirm = function (e, t) {
    this.isLoaded = e, this.emitEvent("progress", [this, this.img, t]);
  }, r.prototype.handleEvent = function (e) {
    var t = "on" + e.type;
    this[t] && this[t](e);
  }, r.prototype.onload = function () {
    this.confirm(!0, "onload"), this.unbindEvents();
  }, r.prototype.onerror = function () {
    this.confirm(!1, "onerror"), this.unbindEvents();
  }, r.prototype.unbindEvents = function () {
    this.proxyImage.removeEventListener("load", this), this.proxyImage.removeEventListener("error", this), this.img.removeEventListener("load", this), this.img.removeEventListener("error", this);
  }, s.prototype = Object.create(r.prototype), s.prototype.check = function () {
    this.img.addEventListener("load", this), this.img.addEventListener("error", this), this.img.src = this.url;
    var e = this.getIsImageComplete();
    e && (this.confirm(0 !== this.img.naturalWidth, "naturalWidth"), this.unbindEvents());
  }, s.prototype.unbindEvents = function () {
    this.img.removeEventListener("load", this), this.img.removeEventListener("error", this);
  }, s.prototype.confirm = function (e, t) {
    this.isLoaded = e, this.emitEvent("progress", [this, this.element, t]);
  }, o.makeJQueryPlugin = function (t) {
    t = t || e.jQuery, t && (h = t, h.fn.imagesLoaded = function (e, t) {
      var i = new o(this, e, t);
      return i.jqDeferred.promise(h(this));
    });
  }, o.makeJQueryPlugin(), o;
});

/***/ }),

/***/ "./assets/js/isotope.min.js":
/*!**********************************!*\
  !*** ./assets/js/isotope.min.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_1__factory, __WEBPACK_LOCAL_MODULE_1__module;var __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_2__factory, __WEBPACK_LOCAL_MODULE_2__module;var __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_3__factory, __WEBPACK_LOCAL_MODULE_3__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_4__exports;var __WEBPACK_LOCAL_MODULE_5__array, __WEBPACK_LOCAL_MODULE_5__factory, __WEBPACK_LOCAL_MODULE_5__exports, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_6__exports;var __WEBPACK_LOCAL_MODULE_7__array, __WEBPACK_LOCAL_MODULE_7__factory, __WEBPACK_LOCAL_MODULE_7__exports, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_LOCAL_MODULE_8__array, __WEBPACK_LOCAL_MODULE_8__factory, __WEBPACK_LOCAL_MODULE_8__exports, __WEBPACK_LOCAL_MODULE_8__;var __WEBPACK_LOCAL_MODULE_9__array, __WEBPACK_LOCAL_MODULE_9__factory, __WEBPACK_LOCAL_MODULE_9__exports, __WEBPACK_LOCAL_MODULE_9__;var __WEBPACK_LOCAL_MODULE_10__array, __WEBPACK_LOCAL_MODULE_10__factory, __WEBPACK_LOCAL_MODULE_10__exports, __WEBPACK_LOCAL_MODULE_10__;var __WEBPACK_LOCAL_MODULE_11__array, __WEBPACK_LOCAL_MODULE_11__factory, __WEBPACK_LOCAL_MODULE_11__exports, __WEBPACK_LOCAL_MODULE_11__;var __WEBPACK_LOCAL_MODULE_12__array, __WEBPACK_LOCAL_MODULE_12__factory, __WEBPACK_LOCAL_MODULE_12__exports, __WEBPACK_LOCAL_MODULE_12__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
__webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
__webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * Isotope PACKAGED v3.0.6
 *
 * Licensed GPLv3 for open source use
 * or Isotope Commercial License for commercial use
 *
 * https://isotope.metafizzy.co
 * Copyright 2010-2018 Metafizzy
 */

!function (t, e) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (i) {
    return e(t, i);
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(window, function (t, e) {
  "use strict";

  function i(i, s, a) {
    function u(t, e, o) {
      var n,
        s = "$()." + i + '("' + e + '")';
      return t.each(function (t, u) {
        var h = a.data(u, i);
        if (!h) return void r(i + " not initialized. Cannot call methods, i.e. " + s);
        var d = h[e];
        if (!d || "_" == e.charAt(0)) return void r(s + " is not a valid method");
        var l = d.apply(h, o);
        n = void 0 === n ? l : n;
      }), void 0 !== n ? n : t;
    }
    function h(t, e) {
      t.each(function (t, o) {
        var n = a.data(o, i);
        n ? (n.option(e), n._init()) : (n = new s(o, e), a.data(o, i, n));
      });
    }
    a = a || e || t.jQuery, a && (s.prototype.option || (s.prototype.option = function (t) {
      a.isPlainObject(t) && (this.options = a.extend(!0, this.options, t));
    }), a.fn[i] = function (t) {
      if ("string" == typeof t) {
        var e = n.call(arguments, 1);
        return u(this, t, e);
      }
      return h(this, t), this;
    }, o(a));
  }
  function o(t) {
    !t || t && t.bridget || (t.bridget = i);
  }
  var n = Array.prototype.slice,
    s = t.console,
    r = "undefined" == typeof s ? function () {} : function (t) {
      s.error(t);
    };
  return o(e || t.jQuery), i;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_1__factory = (e), (typeof __WEBPACK_LOCAL_MODULE_1__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_1__module = { id: "ev-emitter/ev-emitter", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__factory.call(__WEBPACK_LOCAL_MODULE_1__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_1__module.exports, __WEBPACK_LOCAL_MODULE_1__module)), (__WEBPACK_LOCAL_MODULE_1__module.loaded = true), __WEBPACK_LOCAL_MODULE_1__ === undefined && (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__module.exports)) : __WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__factory)) : 0;
}("undefined" != typeof window ? window : this, function () {
  function t() {}
  var e = t.prototype;
  return e.on = function (t, e) {
    if (t && e) {
      var i = this._events = this._events || {},
        o = i[t] = i[t] || [];
      return o.indexOf(e) == -1 && o.push(e), this;
    }
  }, e.once = function (t, e) {
    if (t && e) {
      this.on(t, e);
      var i = this._onceEvents = this._onceEvents || {},
        o = i[t] = i[t] || {};
      return o[e] = !0, this;
    }
  }, e.off = function (t, e) {
    var i = this._events && this._events[t];
    if (i && i.length) {
      var o = i.indexOf(e);
      return o != -1 && i.splice(o, 1), this;
    }
  }, e.emitEvent = function (t, e) {
    var i = this._events && this._events[t];
    if (i && i.length) {
      i = i.slice(0), e = e || [];
      for (var o = this._onceEvents && this._onceEvents[t], n = 0; n < i.length; n++) {
        var s = i[n],
          r = o && o[s];
        r && (this.off(t, s), delete o[s]), s.apply(this, e);
      }
      return this;
    }
  }, e.allOff = function () {
    delete this._events, delete this._onceEvents;
  }, t;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_2__factory = (e), (typeof __WEBPACK_LOCAL_MODULE_2__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_2__module = { id: "get-size/get-size", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__factory.call(__WEBPACK_LOCAL_MODULE_2__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_2__module.exports, __WEBPACK_LOCAL_MODULE_2__module)), (__WEBPACK_LOCAL_MODULE_2__module.loaded = true), __WEBPACK_LOCAL_MODULE_2__ === undefined && (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__module.exports)) : __WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__factory)) : 0;
}(window, function () {
  "use strict";

  function t(t) {
    var e = parseFloat(t),
      i = t.indexOf("%") == -1 && !isNaN(e);
    return i && e;
  }
  function e() {}
  function i() {
    for (var t = {
        width: 0,
        height: 0,
        innerWidth: 0,
        innerHeight: 0,
        outerWidth: 0,
        outerHeight: 0
      }, e = 0; e < h; e++) {
      var i = u[e];
      t[i] = 0;
    }
    return t;
  }
  function o(t) {
    var e = getComputedStyle(t);
    return e || a("Style returned " + e + ". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"), e;
  }
  function n() {
    if (!d) {
      d = !0;
      var e = document.createElement("div");
      e.style.width = "200px", e.style.padding = "1px 2px 3px 4px", e.style.borderStyle = "solid", e.style.borderWidth = "1px 2px 3px 4px", e.style.boxSizing = "border-box";
      var i = document.body || document.documentElement;
      i.appendChild(e);
      var n = o(e);
      r = 200 == Math.round(t(n.width)), s.isBoxSizeOuter = r, i.removeChild(e);
    }
  }
  function s(e) {
    if (n(), "string" == typeof e && (e = document.querySelector(e)), e && "object" == _typeof(e) && e.nodeType) {
      var s = o(e);
      if ("none" == s.display) return i();
      var a = {};
      a.width = e.offsetWidth, a.height = e.offsetHeight;
      for (var d = a.isBorderBox = "border-box" == s.boxSizing, l = 0; l < h; l++) {
        var f = u[l],
          c = s[f],
          m = parseFloat(c);
        a[f] = isNaN(m) ? 0 : m;
      }
      var p = a.paddingLeft + a.paddingRight,
        y = a.paddingTop + a.paddingBottom,
        g = a.marginLeft + a.marginRight,
        v = a.marginTop + a.marginBottom,
        _ = a.borderLeftWidth + a.borderRightWidth,
        z = a.borderTopWidth + a.borderBottomWidth,
        I = d && r,
        x = t(s.width);
      x !== !1 && (a.width = x + (I ? 0 : p + _));
      var S = t(s.height);
      return S !== !1 && (a.height = S + (I ? 0 : y + z)), a.innerWidth = a.width - (p + _), a.innerHeight = a.height - (y + z), a.outerWidth = a.width + g, a.outerHeight = a.height + v, a;
    }
  }
  var r,
    a = "undefined" == typeof console ? e : function (t) {
      console.error(t);
    },
    u = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"],
    h = u.length,
    d = !1;
  return s;
}), function (t, e) {
  "use strict";

   true ? !(__WEBPACK_LOCAL_MODULE_3__factory = (e), (typeof __WEBPACK_LOCAL_MODULE_3__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_3__module = { id: "desandro-matches-selector/matches-selector", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__factory.call(__WEBPACK_LOCAL_MODULE_3__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_3__module.exports, __WEBPACK_LOCAL_MODULE_3__module)), (__WEBPACK_LOCAL_MODULE_3__module.loaded = true), __WEBPACK_LOCAL_MODULE_3__ === undefined && (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__module.exports)) : __WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__factory)) : 0;
}(window, function () {
  "use strict";

  var t = function () {
    var t = window.Element.prototype;
    if (t.matches) return "matches";
    if (t.matchesSelector) return "matchesSelector";
    for (var e = ["webkit", "moz", "ms", "o"], i = 0; i < e.length; i++) {
      var o = e[i],
        n = o + "MatchesSelector";
      if (t[n]) return n;
    }
  }();
  return function (e, i) {
    return e[t](i);
  };
}), function (t, e) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_3__], __WEBPACK_LOCAL_MODULE_4__ = (function (i) {
    return e(t, i);
  }).apply(__WEBPACK_LOCAL_MODULE_4__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_4__ === undefined && (__WEBPACK_LOCAL_MODULE_4__ = __WEBPACK_LOCAL_MODULE_4__exports)) : 0;
}(window, function (t, e) {
  var i = {};
  i.extend = function (t, e) {
    for (var i in e) t[i] = e[i];
    return t;
  }, i.modulo = function (t, e) {
    return (t % e + e) % e;
  };
  var o = Array.prototype.slice;
  i.makeArray = function (t) {
    if (Array.isArray(t)) return t;
    if (null === t || void 0 === t) return [];
    var e = "object" == _typeof(t) && "number" == typeof t.length;
    return e ? o.call(t) : [t];
  }, i.removeFrom = function (t, e) {
    var i = t.indexOf(e);
    i != -1 && t.splice(i, 1);
  }, i.getParent = function (t, i) {
    for (; t.parentNode && t != document.body;) if (t = t.parentNode, e(t, i)) return t;
  }, i.getQueryElement = function (t) {
    return "string" == typeof t ? document.querySelector(t) : t;
  }, i.handleEvent = function (t) {
    var e = "on" + t.type;
    this[e] && this[e](t);
  }, i.filterFindElements = function (t, o) {
    t = i.makeArray(t);
    var n = [];
    return t.forEach(function (t) {
      if (t instanceof HTMLElement) {
        if (!o) return void n.push(t);
        e(t, o) && n.push(t);
        for (var i = t.querySelectorAll(o), s = 0; s < i.length; s++) n.push(i[s]);
      }
    }), n;
  }, i.debounceMethod = function (t, e, i) {
    i = i || 100;
    var o = t.prototype[e],
      n = e + "Timeout";
    t.prototype[e] = function () {
      var t = this[n];
      clearTimeout(t);
      var e = arguments,
        s = this;
      this[n] = setTimeout(function () {
        o.apply(s, e), delete s[n];
      }, i);
    };
  }, i.docReady = function (t) {
    var e = document.readyState;
    "complete" == e || "interactive" == e ? setTimeout(t) : document.addEventListener("DOMContentLoaded", t);
  }, i.toDashed = function (t) {
    return t.replace(/(.)([A-Z])/g, function (t, e, i) {
      return e + "-" + i;
    }).toLowerCase();
  };
  var n = t.console;
  return i.htmlInit = function (e, o) {
    i.docReady(function () {
      var s = i.toDashed(o),
        r = "data-" + s,
        a = document.querySelectorAll("[" + r + "]"),
        u = document.querySelectorAll(".js-" + s),
        h = i.makeArray(a).concat(i.makeArray(u)),
        d = r + "-options",
        l = t.jQuery;
      h.forEach(function (t) {
        var i,
          s = t.getAttribute(r) || t.getAttribute(d);
        try {
          i = s && JSON.parse(s);
        } catch (a) {
          return void (n && n.error("Error parsing " + r + " on " + t.className + ": " + a));
        }
        var u = new e(t, i);
        l && l.data(t, o, u);
      });
    });
  }, i;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_5__array = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__], __WEBPACK_LOCAL_MODULE_5__factory = (e),
		(typeof __WEBPACK_LOCAL_MODULE_5__factory === 'function' ?
			((__WEBPACK_LOCAL_MODULE_5__ = __WEBPACK_LOCAL_MODULE_5__factory.apply(__WEBPACK_LOCAL_MODULE_5__exports = {}, __WEBPACK_LOCAL_MODULE_5__array)), __WEBPACK_LOCAL_MODULE_5__ === undefined && (__WEBPACK_LOCAL_MODULE_5__ = __WEBPACK_LOCAL_MODULE_5__exports)) :
			(__WEBPACK_LOCAL_MODULE_5__ = __WEBPACK_LOCAL_MODULE_5__factory)
		)) : 0;
}(window, function (t, e) {
  "use strict";

  function i(t) {
    for (var e in t) return !1;
    return e = null, !0;
  }
  function o(t, e) {
    t && (this.element = t, this.layout = e, this.position = {
      x: 0,
      y: 0
    }, this._create());
  }
  function n(t) {
    return t.replace(/([A-Z])/g, function (t) {
      return "-" + t.toLowerCase();
    });
  }
  var s = document.documentElement.style,
    r = "string" == typeof s.transition ? "transition" : "WebkitTransition",
    a = "string" == typeof s.transform ? "transform" : "WebkitTransform",
    u = {
      WebkitTransition: "webkitTransitionEnd",
      transition: "transitionend"
    }[r],
    h = {
      transform: a,
      transition: r,
      transitionDuration: r + "Duration",
      transitionProperty: r + "Property",
      transitionDelay: r + "Delay"
    },
    d = o.prototype = Object.create(t.prototype);
  d.constructor = o, d._create = function () {
    this._transn = {
      ingProperties: {},
      clean: {},
      onEnd: {}
    }, this.css({
      position: "absolute"
    });
  }, d.handleEvent = function (t) {
    var e = "on" + t.type;
    this[e] && this[e](t);
  }, d.getSize = function () {
    this.size = e(this.element);
  }, d.css = function (t) {
    var e = this.element.style;
    for (var i in t) {
      var o = h[i] || i;
      e[o] = t[i];
    }
  }, d.getPosition = function () {
    var t = getComputedStyle(this.element),
      e = this.layout._getOption("originLeft"),
      i = this.layout._getOption("originTop"),
      o = t[e ? "left" : "right"],
      n = t[i ? "top" : "bottom"],
      s = parseFloat(o),
      r = parseFloat(n),
      a = this.layout.size;
    o.indexOf("%") != -1 && (s = s / 100 * a.width), n.indexOf("%") != -1 && (r = r / 100 * a.height), s = isNaN(s) ? 0 : s, r = isNaN(r) ? 0 : r, s -= e ? a.paddingLeft : a.paddingRight, r -= i ? a.paddingTop : a.paddingBottom, this.position.x = s, this.position.y = r;
  }, d.layoutPosition = function () {
    var t = this.layout.size,
      e = {},
      i = this.layout._getOption("originLeft"),
      o = this.layout._getOption("originTop"),
      n = i ? "paddingLeft" : "paddingRight",
      s = i ? "left" : "right",
      r = i ? "right" : "left",
      a = this.position.x + t[n];
    e[s] = this.getXValue(a), e[r] = "";
    var u = o ? "paddingTop" : "paddingBottom",
      h = o ? "top" : "bottom",
      d = o ? "bottom" : "top",
      l = this.position.y + t[u];
    e[h] = this.getYValue(l), e[d] = "", this.css(e), this.emitEvent("layout", [this]);
  }, d.getXValue = function (t) {
    var e = this.layout._getOption("horizontal");
    return this.layout.options.percentPosition && !e ? t / this.layout.size.width * 100 + "%" : t + "px";
  }, d.getYValue = function (t) {
    var e = this.layout._getOption("horizontal");
    return this.layout.options.percentPosition && e ? t / this.layout.size.height * 100 + "%" : t + "px";
  }, d._transitionTo = function (t, e) {
    this.getPosition();
    var i = this.position.x,
      o = this.position.y,
      n = t == this.position.x && e == this.position.y;
    if (this.setPosition(t, e), n && !this.isTransitioning) return void this.layoutPosition();
    var s = t - i,
      r = e - o,
      a = {};
    a.transform = this.getTranslate(s, r), this.transition({
      to: a,
      onTransitionEnd: {
        transform: this.layoutPosition
      },
      isCleaning: !0
    });
  }, d.getTranslate = function (t, e) {
    var i = this.layout._getOption("originLeft"),
      o = this.layout._getOption("originTop");
    return t = i ? t : -t, e = o ? e : -e, "translate3d(" + t + "px, " + e + "px, 0)";
  }, d.goTo = function (t, e) {
    this.setPosition(t, e), this.layoutPosition();
  }, d.moveTo = d._transitionTo, d.setPosition = function (t, e) {
    this.position.x = parseFloat(t), this.position.y = parseFloat(e);
  }, d._nonTransition = function (t) {
    this.css(t.to), t.isCleaning && this._removeStyles(t.to);
    for (var e in t.onTransitionEnd) t.onTransitionEnd[e].call(this);
  }, d.transition = function (t) {
    if (!parseFloat(this.layout.options.transitionDuration)) return void this._nonTransition(t);
    var e = this._transn;
    for (var i in t.onTransitionEnd) e.onEnd[i] = t.onTransitionEnd[i];
    for (i in t.to) e.ingProperties[i] = !0, t.isCleaning && (e.clean[i] = !0);
    if (t.from) {
      this.css(t.from);
      var o = this.element.offsetHeight;
      o = null;
    }
    this.enableTransition(t.to), this.css(t.to), this.isTransitioning = !0;
  };
  var l = "opacity," + n(a);
  d.enableTransition = function () {
    if (!this.isTransitioning) {
      var t = this.layout.options.transitionDuration;
      t = "number" == typeof t ? t + "ms" : t, this.css({
        transitionProperty: l,
        transitionDuration: t,
        transitionDelay: this.staggerDelay || 0
      }), this.element.addEventListener(u, this, !1);
    }
  }, d.onwebkitTransitionEnd = function (t) {
    this.ontransitionend(t);
  }, d.onotransitionend = function (t) {
    this.ontransitionend(t);
  };
  var f = {
    "-webkit-transform": "transform"
  };
  d.ontransitionend = function (t) {
    if (t.target === this.element) {
      var e = this._transn,
        o = f[t.propertyName] || t.propertyName;
      if (delete e.ingProperties[o], i(e.ingProperties) && this.disableTransition(), o in e.clean && (this.element.style[t.propertyName] = "", delete e.clean[o]), o in e.onEnd) {
        var n = e.onEnd[o];
        n.call(this), delete e.onEnd[o];
      }
      this.emitEvent("transitionEnd", [this]);
    }
  }, d.disableTransition = function () {
    this.removeTransitionStyles(), this.element.removeEventListener(u, this, !1), this.isTransitioning = !1;
  }, d._removeStyles = function (t) {
    var e = {};
    for (var i in t) e[i] = "";
    this.css(e);
  };
  var c = {
    transitionProperty: "",
    transitionDuration: "",
    transitionDelay: ""
  };
  return d.removeTransitionStyles = function () {
    this.css(c);
  }, d.stagger = function (t) {
    t = isNaN(t) ? 0 : t, this.staggerDelay = t + "ms";
  }, d.removeElem = function () {
    this.element.parentNode.removeChild(this.element), this.css({
      display: ""
    }), this.emitEvent("remove", [this]);
  }, d.remove = function () {
    return r && parseFloat(this.layout.options.transitionDuration) ? (this.once("transitionEnd", function () {
      this.removeElem();
    }), void this.hide()) : void this.removeElem();
  }, d.reveal = function () {
    delete this.isHidden, this.css({
      display: ""
    });
    var t = this.layout.options,
      e = {},
      i = this.getHideRevealTransitionEndProperty("visibleStyle");
    e[i] = this.onRevealTransitionEnd, this.transition({
      from: t.hiddenStyle,
      to: t.visibleStyle,
      isCleaning: !0,
      onTransitionEnd: e
    });
  }, d.onRevealTransitionEnd = function () {
    this.isHidden || this.emitEvent("reveal");
  }, d.getHideRevealTransitionEndProperty = function (t) {
    var e = this.layout.options[t];
    if (e.opacity) return "opacity";
    for (var i in e) return i;
  }, d.hide = function () {
    this.isHidden = !0, this.css({
      display: ""
    });
    var t = this.layout.options,
      e = {},
      i = this.getHideRevealTransitionEndProperty("hiddenStyle");
    e[i] = this.onHideTransitionEnd, this.transition({
      from: t.visibleStyle,
      to: t.hiddenStyle,
      isCleaning: !0,
      onTransitionEnd: e
    });
  }, d.onHideTransitionEnd = function () {
    this.isHidden && (this.css({
      display: "none"
    }), this.emitEvent("hide"));
  }, d.destroy = function () {
    this.css({
      position: "",
      left: "",
      right: "",
      top: "",
      bottom: "",
      transition: "",
      transform: ""
    });
  }, o;
}), function (t, e) {
  "use strict";

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_5__], __WEBPACK_LOCAL_MODULE_6__ = (function (i, o, n, s) {
    return e(t, i, o, n, s);
  }).apply(__WEBPACK_LOCAL_MODULE_6__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_6__ === undefined && (__WEBPACK_LOCAL_MODULE_6__ = __WEBPACK_LOCAL_MODULE_6__exports)) : 0;
}(window, function (t, e, i, o, n) {
  "use strict";

  function s(t, e) {
    var i = o.getQueryElement(t);
    if (!i) return void (u && u.error("Bad element for " + this.constructor.namespace + ": " + (i || t)));
    this.element = i, h && (this.$element = h(this.element)), this.options = o.extend({}, this.constructor.defaults), this.option(e);
    var n = ++l;
    this.element.outlayerGUID = n, f[n] = this, this._create();
    var s = this._getOption("initLayout");
    s && this.layout();
  }
  function r(t) {
    function e() {
      t.apply(this, arguments);
    }
    return e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e;
  }
  function a(t) {
    if ("number" == typeof t) return t;
    var e = t.match(/(^\d*\.?\d*)(\w*)/),
      i = e && e[1],
      o = e && e[2];
    if (!i.length) return 0;
    i = parseFloat(i);
    var n = m[o] || 1;
    return i * n;
  }
  var u = t.console,
    h = t.jQuery,
    d = function d() {},
    l = 0,
    f = {};
  s.namespace = "outlayer", s.Item = n, s.defaults = {
    containerStyle: {
      position: "relative"
    },
    initLayout: !0,
    originLeft: !0,
    originTop: !0,
    resize: !0,
    resizeContainer: !0,
    transitionDuration: "0.4s",
    hiddenStyle: {
      opacity: 0,
      transform: "scale(0.001)"
    },
    visibleStyle: {
      opacity: 1,
      transform: "scale(1)"
    }
  };
  var c = s.prototype;
  o.extend(c, e.prototype), c.option = function (t) {
    o.extend(this.options, t);
  }, c._getOption = function (t) {
    var e = this.constructor.compatOptions[t];
    return e && void 0 !== this.options[e] ? this.options[e] : this.options[t];
  }, s.compatOptions = {
    initLayout: "isInitLayout",
    horizontal: "isHorizontal",
    layoutInstant: "isLayoutInstant",
    originLeft: "isOriginLeft",
    originTop: "isOriginTop",
    resize: "isResizeBound",
    resizeContainer: "isResizingContainer"
  }, c._create = function () {
    this.reloadItems(), this.stamps = [], this.stamp(this.options.stamp), o.extend(this.element.style, this.options.containerStyle);
    var t = this._getOption("resize");
    t && this.bindResize();
  }, c.reloadItems = function () {
    this.items = this._itemize(this.element.children);
  }, c._itemize = function (t) {
    for (var e = this._filterFindItemElements(t), i = this.constructor.Item, o = [], n = 0; n < e.length; n++) {
      var s = e[n],
        r = new i(s, this);
      o.push(r);
    }
    return o;
  }, c._filterFindItemElements = function (t) {
    return o.filterFindElements(t, this.options.itemSelector);
  }, c.getItemElements = function () {
    return this.items.map(function (t) {
      return t.element;
    });
  }, c.layout = function () {
    this._resetLayout(), this._manageStamps();
    var t = this._getOption("layoutInstant"),
      e = void 0 !== t ? t : !this._isLayoutInited;
    this.layoutItems(this.items, e), this._isLayoutInited = !0;
  }, c._init = c.layout, c._resetLayout = function () {
    this.getSize();
  }, c.getSize = function () {
    this.size = i(this.element);
  }, c._getMeasurement = function (t, e) {
    var o,
      n = this.options[t];
    n ? ("string" == typeof n ? o = this.element.querySelector(n) : n instanceof HTMLElement && (o = n), this[t] = o ? i(o)[e] : n) : this[t] = 0;
  }, c.layoutItems = function (t, e) {
    t = this._getItemsForLayout(t), this._layoutItems(t, e), this._postLayout();
  }, c._getItemsForLayout = function (t) {
    return t.filter(function (t) {
      return !t.isIgnored;
    });
  }, c._layoutItems = function (t, e) {
    if (this._emitCompleteOnItems("layout", t), t && t.length) {
      var i = [];
      t.forEach(function (t) {
        var o = this._getItemLayoutPosition(t);
        o.item = t, o.isInstant = e || t.isLayoutInstant, i.push(o);
      }, this), this._processLayoutQueue(i);
    }
  }, c._getItemLayoutPosition = function () {
    return {
      x: 0,
      y: 0
    };
  }, c._processLayoutQueue = function (t) {
    this.updateStagger(), t.forEach(function (t, e) {
      this._positionItem(t.item, t.x, t.y, t.isInstant, e);
    }, this);
  }, c.updateStagger = function () {
    var t = this.options.stagger;
    return null === t || void 0 === t ? void (this.stagger = 0) : (this.stagger = a(t), this.stagger);
  }, c._positionItem = function (t, e, i, o, n) {
    o ? t.goTo(e, i) : (t.stagger(n * this.stagger), t.moveTo(e, i));
  }, c._postLayout = function () {
    this.resizeContainer();
  }, c.resizeContainer = function () {
    var t = this._getOption("resizeContainer");
    if (t) {
      var e = this._getContainerSize();
      e && (this._setContainerMeasure(e.width, !0), this._setContainerMeasure(e.height, !1));
    }
  }, c._getContainerSize = d, c._setContainerMeasure = function (t, e) {
    if (void 0 !== t) {
      var i = this.size;
      i.isBorderBox && (t += e ? i.paddingLeft + i.paddingRight + i.borderLeftWidth + i.borderRightWidth : i.paddingBottom + i.paddingTop + i.borderTopWidth + i.borderBottomWidth), t = Math.max(t, 0), this.element.style[e ? "width" : "height"] = t + "px";
    }
  }, c._emitCompleteOnItems = function (t, e) {
    function i() {
      n.dispatchEvent(t + "Complete", null, [e]);
    }
    function o() {
      r++, r == s && i();
    }
    var n = this,
      s = e.length;
    if (!e || !s) return void i();
    var r = 0;
    e.forEach(function (e) {
      e.once(t, o);
    });
  }, c.dispatchEvent = function (t, e, i) {
    var o = e ? [e].concat(i) : i;
    if (this.emitEvent(t, o), h) if (this.$element = this.$element || h(this.element), e) {
      var n = h.Event(e);
      n.type = t, this.$element.trigger(n, i);
    } else this.$element.trigger(t, i);
  }, c.ignore = function (t) {
    var e = this.getItem(t);
    e && (e.isIgnored = !0);
  }, c.unignore = function (t) {
    var e = this.getItem(t);
    e && delete e.isIgnored;
  }, c.stamp = function (t) {
    t = this._find(t), t && (this.stamps = this.stamps.concat(t), t.forEach(this.ignore, this));
  }, c.unstamp = function (t) {
    t = this._find(t), t && t.forEach(function (t) {
      o.removeFrom(this.stamps, t), this.unignore(t);
    }, this);
  }, c._find = function (t) {
    if (t) return "string" == typeof t && (t = this.element.querySelectorAll(t)), t = o.makeArray(t);
  }, c._manageStamps = function () {
    this.stamps && this.stamps.length && (this._getBoundingRect(), this.stamps.forEach(this._manageStamp, this));
  }, c._getBoundingRect = function () {
    var t = this.element.getBoundingClientRect(),
      e = this.size;
    this._boundingRect = {
      left: t.left + e.paddingLeft + e.borderLeftWidth,
      top: t.top + e.paddingTop + e.borderTopWidth,
      right: t.right - (e.paddingRight + e.borderRightWidth),
      bottom: t.bottom - (e.paddingBottom + e.borderBottomWidth)
    };
  }, c._manageStamp = d, c._getElementOffset = function (t) {
    var e = t.getBoundingClientRect(),
      o = this._boundingRect,
      n = i(t),
      s = {
        left: e.left - o.left - n.marginLeft,
        top: e.top - o.top - n.marginTop,
        right: o.right - e.right - n.marginRight,
        bottom: o.bottom - e.bottom - n.marginBottom
      };
    return s;
  }, c.handleEvent = o.handleEvent, c.bindResize = function () {
    t.addEventListener("resize", this), this.isResizeBound = !0;
  }, c.unbindResize = function () {
    t.removeEventListener("resize", this), this.isResizeBound = !1;
  }, c.onresize = function () {
    this.resize();
  }, o.debounceMethod(s, "onresize", 100), c.resize = function () {
    this.isResizeBound && this.needsResizeLayout() && this.layout();
  }, c.needsResizeLayout = function () {
    var t = i(this.element),
      e = this.size && t;
    return e && t.innerWidth !== this.size.innerWidth;
  }, c.addItems = function (t) {
    var e = this._itemize(t);
    return e.length && (this.items = this.items.concat(e)), e;
  }, c.appended = function (t) {
    var e = this.addItems(t);
    e.length && (this.layoutItems(e, !0), this.reveal(e));
  }, c.prepended = function (t) {
    var e = this._itemize(t);
    if (e.length) {
      var i = this.items.slice(0);
      this.items = e.concat(i), this._resetLayout(), this._manageStamps(), this.layoutItems(e, !0), this.reveal(e), this.layoutItems(i);
    }
  }, c.reveal = function (t) {
    if (this._emitCompleteOnItems("reveal", t), t && t.length) {
      var e = this.updateStagger();
      t.forEach(function (t, i) {
        t.stagger(i * e), t.reveal();
      });
    }
  }, c.hide = function (t) {
    if (this._emitCompleteOnItems("hide", t), t && t.length) {
      var e = this.updateStagger();
      t.forEach(function (t, i) {
        t.stagger(i * e), t.hide();
      });
    }
  }, c.revealItemElements = function (t) {
    var e = this.getItems(t);
    this.reveal(e);
  }, c.hideItemElements = function (t) {
    var e = this.getItems(t);
    this.hide(e);
  }, c.getItem = function (t) {
    for (var e = 0; e < this.items.length; e++) {
      var i = this.items[e];
      if (i.element == t) return i;
    }
  }, c.getItems = function (t) {
    t = o.makeArray(t);
    var e = [];
    return t.forEach(function (t) {
      var i = this.getItem(t);
      i && e.push(i);
    }, this), e;
  }, c.remove = function (t) {
    var e = this.getItems(t);
    this._emitCompleteOnItems("remove", e), e && e.length && e.forEach(function (t) {
      t.remove(), o.removeFrom(this.items, t);
    }, this);
  }, c.destroy = function () {
    var t = this.element.style;
    t.height = "", t.position = "", t.width = "", this.items.forEach(function (t) {
      t.destroy();
    }), this.unbindResize();
    var e = this.element.outlayerGUID;
    delete f[e], delete this.element.outlayerGUID, h && h.removeData(this.element, this.constructor.namespace);
  }, s.data = function (t) {
    t = o.getQueryElement(t);
    var e = t && t.outlayerGUID;
    return e && f[e];
  }, s.create = function (t, e) {
    var i = r(s);
    return i.defaults = o.extend({}, s.defaults), o.extend(i.defaults, e), i.compatOptions = o.extend({}, s.compatOptions), i.namespace = t, i.data = s.data, i.Item = r(n), o.htmlInit(i, t), h && h.bridget && h.bridget(t, i), i;
  };
  var m = {
    ms: 1,
    s: 1e3
  };
  return s.Item = n, s;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_7__array = [__WEBPACK_LOCAL_MODULE_6__], __WEBPACK_LOCAL_MODULE_7__factory = (e),
		(typeof __WEBPACK_LOCAL_MODULE_7__factory === 'function' ?
			((__WEBPACK_LOCAL_MODULE_7__ = __WEBPACK_LOCAL_MODULE_7__factory.apply(__WEBPACK_LOCAL_MODULE_7__exports = {}, __WEBPACK_LOCAL_MODULE_7__array)), __WEBPACK_LOCAL_MODULE_7__ === undefined && (__WEBPACK_LOCAL_MODULE_7__ = __WEBPACK_LOCAL_MODULE_7__exports)) :
			(__WEBPACK_LOCAL_MODULE_7__ = __WEBPACK_LOCAL_MODULE_7__factory)
		)) : 0;
}(window, function (t) {
  "use strict";

  function e() {
    t.Item.apply(this, arguments);
  }
  var i = e.prototype = Object.create(t.Item.prototype),
    o = i._create;
  i._create = function () {
    this.id = this.layout.itemGUID++, o.call(this), this.sortData = {};
  }, i.updateSortData = function () {
    if (!this.isIgnored) {
      this.sortData.id = this.id, this.sortData["original-order"] = this.id, this.sortData.random = Math.random();
      var t = this.layout.options.getSortData,
        e = this.layout._sorters;
      for (var i in t) {
        var o = e[i];
        this.sortData[i] = o(this.element, this);
      }
    }
  };
  var n = i.destroy;
  return i.destroy = function () {
    n.apply(this, arguments), this.css({
      display: ""
    });
  }, e;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_8__array = [__WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_6__], __WEBPACK_LOCAL_MODULE_8__factory = (e),
		(typeof __WEBPACK_LOCAL_MODULE_8__factory === 'function' ?
			((__WEBPACK_LOCAL_MODULE_8__ = __WEBPACK_LOCAL_MODULE_8__factory.apply(__WEBPACK_LOCAL_MODULE_8__exports = {}, __WEBPACK_LOCAL_MODULE_8__array)), __WEBPACK_LOCAL_MODULE_8__ === undefined && (__WEBPACK_LOCAL_MODULE_8__ = __WEBPACK_LOCAL_MODULE_8__exports)) :
			(__WEBPACK_LOCAL_MODULE_8__ = __WEBPACK_LOCAL_MODULE_8__factory)
		)) : 0;
}(window, function (t, e) {
  "use strict";

  function i(t) {
    this.isotope = t, t && (this.options = t.options[this.namespace], this.element = t.element, this.items = t.filteredItems, this.size = t.size);
  }
  var o = i.prototype,
    n = ["_resetLayout", "_getItemLayoutPosition", "_manageStamp", "_getContainerSize", "_getElementOffset", "needsResizeLayout", "_getOption"];
  return n.forEach(function (t) {
    o[t] = function () {
      return e.prototype[t].apply(this.isotope, arguments);
    };
  }), o.needsVerticalResizeLayout = function () {
    var e = t(this.isotope.element),
      i = this.isotope.size && e;
    return i && e.innerHeight != this.isotope.size.innerHeight;
  }, o._getMeasurement = function () {
    this.isotope._getMeasurement.apply(this, arguments);
  }, o.getColumnWidth = function () {
    this.getSegmentSize("column", "Width");
  }, o.getRowHeight = function () {
    this.getSegmentSize("row", "Height");
  }, o.getSegmentSize = function (t, e) {
    var i = t + e,
      o = "outer" + e;
    if (this._getMeasurement(i, o), !this[i]) {
      var n = this.getFirstItemSize();
      this[i] = n && n[o] || this.isotope.size["inner" + e];
    }
  }, o.getFirstItemSize = function () {
    var e = this.isotope.filteredItems[0];
    return e && e.element && t(e.element);
  }, o.layout = function () {
    this.isotope.layout.apply(this.isotope, arguments);
  }, o.getSize = function () {
    this.isotope.getSize(), this.size = this.isotope.size;
  }, i.modes = {}, i.create = function (t, e) {
    function n() {
      i.apply(this, arguments);
    }
    return n.prototype = Object.create(o), n.prototype.constructor = n, e && (n.options = e), n.prototype.namespace = t, i.modes[t] = n, n;
  }, i;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_9__array = [__WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_2__], __WEBPACK_LOCAL_MODULE_9__factory = (e),
		(typeof __WEBPACK_LOCAL_MODULE_9__factory === 'function' ?
			((__WEBPACK_LOCAL_MODULE_9__ = __WEBPACK_LOCAL_MODULE_9__factory.apply(__WEBPACK_LOCAL_MODULE_9__exports = {}, __WEBPACK_LOCAL_MODULE_9__array)), __WEBPACK_LOCAL_MODULE_9__ === undefined && (__WEBPACK_LOCAL_MODULE_9__ = __WEBPACK_LOCAL_MODULE_9__exports)) :
			(__WEBPACK_LOCAL_MODULE_9__ = __WEBPACK_LOCAL_MODULE_9__factory)
		)) : 0;
}(window, function (t, e) {
  var i = t.create("masonry");
  i.compatOptions.fitWidth = "isFitWidth";
  var o = i.prototype;
  return o._resetLayout = function () {
    this.getSize(), this._getMeasurement("columnWidth", "outerWidth"), this._getMeasurement("gutter", "outerWidth"), this.measureColumns(), this.colYs = [];
    for (var t = 0; t < this.cols; t++) this.colYs.push(0);
    this.maxY = 0, this.horizontalColIndex = 0;
  }, o.measureColumns = function () {
    if (this.getContainerWidth(), !this.columnWidth) {
      var t = this.items[0],
        i = t && t.element;
      this.columnWidth = i && e(i).outerWidth || this.containerWidth;
    }
    var o = this.columnWidth += this.gutter,
      n = this.containerWidth + this.gutter,
      s = n / o,
      r = o - n % o,
      a = r && r < 1 ? "round" : "floor";
    s = Math[a](s), this.cols = Math.max(s, 1);
  }, o.getContainerWidth = function () {
    var t = this._getOption("fitWidth"),
      i = t ? this.element.parentNode : this.element,
      o = e(i);
    this.containerWidth = o && o.innerWidth;
  }, o._getItemLayoutPosition = function (t) {
    t.getSize();
    var e = t.size.outerWidth % this.columnWidth,
      i = e && e < 1 ? "round" : "ceil",
      o = Math[i](t.size.outerWidth / this.columnWidth);
    o = Math.min(o, this.cols);
    for (var n = this.options.horizontalOrder ? "_getHorizontalColPosition" : "_getTopColPosition", s = this[n](o, t), r = {
        x: this.columnWidth * s.col,
        y: s.y
      }, a = s.y + t.size.outerHeight, u = o + s.col, h = s.col; h < u; h++) this.colYs[h] = a;
    return r;
  }, o._getTopColPosition = function (t) {
    var e = this._getTopColGroup(t),
      i = Math.min.apply(Math, e);
    return {
      col: e.indexOf(i),
      y: i
    };
  }, o._getTopColGroup = function (t) {
    if (t < 2) return this.colYs;
    for (var e = [], i = this.cols + 1 - t, o = 0; o < i; o++) e[o] = this._getColGroupY(o, t);
    return e;
  }, o._getColGroupY = function (t, e) {
    if (e < 2) return this.colYs[t];
    var i = this.colYs.slice(t, t + e);
    return Math.max.apply(Math, i);
  }, o._getHorizontalColPosition = function (t, e) {
    var i = this.horizontalColIndex % this.cols,
      o = t > 1 && i + t > this.cols;
    i = o ? 0 : i;
    var n = e.size.outerWidth && e.size.outerHeight;
    return this.horizontalColIndex = n ? i + t : this.horizontalColIndex, {
      col: i,
      y: this._getColGroupY(i, t)
    };
  }, o._manageStamp = function (t) {
    var i = e(t),
      o = this._getElementOffset(t),
      n = this._getOption("originLeft"),
      s = n ? o.left : o.right,
      r = s + i.outerWidth,
      a = Math.floor(s / this.columnWidth);
    a = Math.max(0, a);
    var u = Math.floor(r / this.columnWidth);
    u -= r % this.columnWidth ? 0 : 1, u = Math.min(this.cols - 1, u);
    for (var h = this._getOption("originTop"), d = (h ? o.top : o.bottom) + i.outerHeight, l = a; l <= u; l++) this.colYs[l] = Math.max(d, this.colYs[l]);
  }, o._getContainerSize = function () {
    this.maxY = Math.max.apply(Math, this.colYs);
    var t = {
      height: this.maxY
    };
    return this._getOption("fitWidth") && (t.width = this._getContainerFitWidth()), t;
  }, o._getContainerFitWidth = function () {
    for (var t = 0, e = this.cols; --e && 0 === this.colYs[e];) t++;
    return (this.cols - t) * this.columnWidth - this.gutter;
  }, o.needsResizeLayout = function () {
    var t = this.containerWidth;
    return this.getContainerWidth(), t != this.containerWidth;
  }, i;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_10__array = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_9__], __WEBPACK_LOCAL_MODULE_10__factory = (e),
		(typeof __WEBPACK_LOCAL_MODULE_10__factory === 'function' ?
			((__WEBPACK_LOCAL_MODULE_10__ = __WEBPACK_LOCAL_MODULE_10__factory.apply(__WEBPACK_LOCAL_MODULE_10__exports = {}, __WEBPACK_LOCAL_MODULE_10__array)), __WEBPACK_LOCAL_MODULE_10__ === undefined && (__WEBPACK_LOCAL_MODULE_10__ = __WEBPACK_LOCAL_MODULE_10__exports)) :
			(__WEBPACK_LOCAL_MODULE_10__ = __WEBPACK_LOCAL_MODULE_10__factory)
		)) : 0;
}(window, function (t, e) {
  "use strict";

  var i = t.create("masonry"),
    o = i.prototype,
    n = {
      _getElementOffset: !0,
      layout: !0,
      _getMeasurement: !0
    };
  for (var s in e.prototype) n[s] || (o[s] = e.prototype[s]);
  var r = o.measureColumns;
  o.measureColumns = function () {
    this.items = this.isotope.filteredItems, r.call(this);
  };
  var a = o._getOption;
  return o._getOption = function (t) {
    return "fitWidth" == t ? void 0 !== this.options.isFitWidth ? this.options.isFitWidth : this.options.fitWidth : a.apply(this.isotope, arguments);
  }, i;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_11__array = [__WEBPACK_LOCAL_MODULE_8__], __WEBPACK_LOCAL_MODULE_11__factory = (e),
		(typeof __WEBPACK_LOCAL_MODULE_11__factory === 'function' ?
			((__WEBPACK_LOCAL_MODULE_11__ = __WEBPACK_LOCAL_MODULE_11__factory.apply(__WEBPACK_LOCAL_MODULE_11__exports = {}, __WEBPACK_LOCAL_MODULE_11__array)), __WEBPACK_LOCAL_MODULE_11__ === undefined && (__WEBPACK_LOCAL_MODULE_11__ = __WEBPACK_LOCAL_MODULE_11__exports)) :
			(__WEBPACK_LOCAL_MODULE_11__ = __WEBPACK_LOCAL_MODULE_11__factory)
		)) : 0;
}(window, function (t) {
  "use strict";

  var e = t.create("fitRows"),
    i = e.prototype;
  return i._resetLayout = function () {
    this.x = 0, this.y = 0, this.maxY = 0, this._getMeasurement("gutter", "outerWidth");
  }, i._getItemLayoutPosition = function (t) {
    t.getSize();
    var e = t.size.outerWidth + this.gutter,
      i = this.isotope.size.innerWidth + this.gutter;
    0 !== this.x && e + this.x > i && (this.x = 0, this.y = this.maxY);
    var o = {
      x: this.x,
      y: this.y
    };
    return this.maxY = Math.max(this.maxY, this.y + t.size.outerHeight), this.x += e, o;
  }, i._getContainerSize = function () {
    return {
      height: this.maxY
    };
  }, e;
}), function (t, e) {
   true ? !(__WEBPACK_LOCAL_MODULE_12__array = [__WEBPACK_LOCAL_MODULE_8__], __WEBPACK_LOCAL_MODULE_12__factory = (e),
		(typeof __WEBPACK_LOCAL_MODULE_12__factory === 'function' ?
			((__WEBPACK_LOCAL_MODULE_12__ = __WEBPACK_LOCAL_MODULE_12__factory.apply(__WEBPACK_LOCAL_MODULE_12__exports = {}, __WEBPACK_LOCAL_MODULE_12__array)), __WEBPACK_LOCAL_MODULE_12__ === undefined && (__WEBPACK_LOCAL_MODULE_12__ = __WEBPACK_LOCAL_MODULE_12__exports)) :
			(__WEBPACK_LOCAL_MODULE_12__ = __WEBPACK_LOCAL_MODULE_12__factory)
		)) : 0;
}(window, function (t) {
  "use strict";

  var e = t.create("vertical", {
      horizontalAlignment: 0
    }),
    i = e.prototype;
  return i._resetLayout = function () {
    this.y = 0;
  }, i._getItemLayoutPosition = function (t) {
    t.getSize();
    var e = (this.isotope.size.innerWidth - t.size.outerWidth) * this.options.horizontalAlignment,
      i = this.y;
    return this.y += t.size.outerHeight, {
      x: e,
      y: i
    };
  }, i._getContainerSize = function () {
    return {
      height: this.y
    };
  }, e;
}), function (t, e) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_7__, __WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_10__, __WEBPACK_LOCAL_MODULE_11__, __WEBPACK_LOCAL_MODULE_12__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (i, o, n, s, r, a) {
    return e(t, i, o, n, s, r, a);
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(window, function (t, e, i, o, n, s, r) {
  function a(t, e) {
    return function (i, o) {
      for (var n = 0; n < t.length; n++) {
        var s = t[n],
          r = i.sortData[s],
          a = o.sortData[s];
        if (r > a || r < a) {
          var u = void 0 !== e[s] ? e[s] : e,
            h = u ? 1 : -1;
          return (r > a ? 1 : -1) * h;
        }
      }
      return 0;
    };
  }
  var u = t.jQuery,
    h = String.prototype.trim ? function (t) {
      return t.trim();
    } : function (t) {
      return t.replace(/^\s+|\s+$/g, "");
    },
    d = e.create("isotope", {
      layoutMode: "masonry",
      isJQueryFiltering: !0,
      sortAscending: !0
    });
  d.Item = s, d.LayoutMode = r;
  var l = d.prototype;
  l._create = function () {
    this.itemGUID = 0, this._sorters = {}, this._getSorters(), e.prototype._create.call(this), this.modes = {}, this.filteredItems = this.items, this.sortHistory = ["original-order"];
    for (var t in r.modes) this._initLayoutMode(t);
  }, l.reloadItems = function () {
    this.itemGUID = 0, e.prototype.reloadItems.call(this);
  }, l._itemize = function () {
    for (var t = e.prototype._itemize.apply(this, arguments), i = 0; i < t.length; i++) {
      var o = t[i];
      o.id = this.itemGUID++;
    }
    return this._updateItemsSortData(t), t;
  }, l._initLayoutMode = function (t) {
    var e = r.modes[t],
      i = this.options[t] || {};
    this.options[t] = e.options ? n.extend(e.options, i) : i, this.modes[t] = new e(this);
  }, l.layout = function () {
    return !this._isLayoutInited && this._getOption("initLayout") ? void this.arrange() : void this._layout();
  }, l._layout = function () {
    var t = this._getIsInstant();
    this._resetLayout(), this._manageStamps(), this.layoutItems(this.filteredItems, t), this._isLayoutInited = !0;
  }, l.arrange = function (t) {
    this.option(t), this._getIsInstant();
    var e = this._filter(this.items);
    this.filteredItems = e.matches, this._bindArrangeComplete(), this._isInstant ? this._noTransition(this._hideReveal, [e]) : this._hideReveal(e), this._sort(), this._layout();
  }, l._init = l.arrange, l._hideReveal = function (t) {
    this.reveal(t.needReveal), this.hide(t.needHide);
  }, l._getIsInstant = function () {
    var t = this._getOption("layoutInstant"),
      e = void 0 !== t ? t : !this._isLayoutInited;
    return this._isInstant = e, e;
  }, l._bindArrangeComplete = function () {
    function t() {
      e && i && o && n.dispatchEvent("arrangeComplete", null, [n.filteredItems]);
    }
    var e,
      i,
      o,
      n = this;
    this.once("layoutComplete", function () {
      e = !0, t();
    }), this.once("hideComplete", function () {
      i = !0, t();
    }), this.once("revealComplete", function () {
      o = !0, t();
    });
  }, l._filter = function (t) {
    var e = this.options.filter;
    e = e || "*";
    for (var i = [], o = [], n = [], s = this._getFilterTest(e), r = 0; r < t.length; r++) {
      var a = t[r];
      if (!a.isIgnored) {
        var u = s(a);
        u && i.push(a), u && a.isHidden ? o.push(a) : u || a.isHidden || n.push(a);
      }
    }
    return {
      matches: i,
      needReveal: o,
      needHide: n
    };
  }, l._getFilterTest = function (t) {
    return u && this.options.isJQueryFiltering ? function (e) {
      return u(e.element).is(t);
    } : "function" == typeof t ? function (e) {
      return t(e.element);
    } : function (e) {
      return o(e.element, t);
    };
  }, l.updateSortData = function (t) {
    var e;
    t ? (t = n.makeArray(t), e = this.getItems(t)) : e = this.items, this._getSorters(), this._updateItemsSortData(e);
  }, l._getSorters = function () {
    var t = this.options.getSortData;
    for (var e in t) {
      var i = t[e];
      this._sorters[e] = f(i);
    }
  }, l._updateItemsSortData = function (t) {
    for (var e = t && t.length, i = 0; e && i < e; i++) {
      var o = t[i];
      o.updateSortData();
    }
  };
  var f = function () {
    function t(t) {
      if ("string" != typeof t) return t;
      var i = h(t).split(" "),
        o = i[0],
        n = o.match(/^\[(.+)\]$/),
        s = n && n[1],
        r = e(s, o),
        a = d.sortDataParsers[i[1]];
      return t = a ? function (t) {
        return t && a(r(t));
      } : function (t) {
        return t && r(t);
      };
    }
    function e(t, e) {
      return t ? function (e) {
        return e.getAttribute(t);
      } : function (t) {
        var i = t.querySelector(e);
        return i && i.textContent;
      };
    }
    return t;
  }();
  d.sortDataParsers = {
    parseInt: function (_parseInt) {
      function parseInt(_x) {
        return _parseInt.apply(this, arguments);
      }
      parseInt.toString = function () {
        return _parseInt.toString();
      };
      return parseInt;
    }(function (t) {
      return parseInt(t, 10);
    }),
    parseFloat: function (_parseFloat) {
      function parseFloat(_x2) {
        return _parseFloat.apply(this, arguments);
      }
      parseFloat.toString = function () {
        return _parseFloat.toString();
      };
      return parseFloat;
    }(function (t) {
      return parseFloat(t);
    })
  }, l._sort = function () {
    if (this.options.sortBy) {
      var t = n.makeArray(this.options.sortBy);
      this._getIsSameSortBy(t) || (this.sortHistory = t.concat(this.sortHistory));
      var e = a(this.sortHistory, this.options.sortAscending);
      this.filteredItems.sort(e);
    }
  }, l._getIsSameSortBy = function (t) {
    for (var e = 0; e < t.length; e++) if (t[e] != this.sortHistory[e]) return !1;
    return !0;
  }, l._mode = function () {
    var t = this.options.layoutMode,
      e = this.modes[t];
    if (!e) throw new Error("No layout mode: " + t);
    return e.options = this.options[t], e;
  }, l._resetLayout = function () {
    e.prototype._resetLayout.call(this), this._mode()._resetLayout();
  }, l._getItemLayoutPosition = function (t) {
    return this._mode()._getItemLayoutPosition(t);
  }, l._manageStamp = function (t) {
    this._mode()._manageStamp(t);
  }, l._getContainerSize = function () {
    return this._mode()._getContainerSize();
  }, l.needsResizeLayout = function () {
    return this._mode().needsResizeLayout();
  }, l.appended = function (t) {
    var e = this.addItems(t);
    if (e.length) {
      var i = this._filterRevealAdded(e);
      this.filteredItems = this.filteredItems.concat(i);
    }
  }, l.prepended = function (t) {
    var e = this._itemize(t);
    if (e.length) {
      this._resetLayout(), this._manageStamps();
      var i = this._filterRevealAdded(e);
      this.layoutItems(this.filteredItems), this.filteredItems = i.concat(this.filteredItems), this.items = e.concat(this.items);
    }
  }, l._filterRevealAdded = function (t) {
    var e = this._filter(t);
    return this.hide(e.needHide), this.reveal(e.matches), this.layoutItems(e.matches, !0), e.matches;
  }, l.insert = function (t) {
    var e = this.addItems(t);
    if (e.length) {
      var i,
        o,
        n = e.length;
      for (i = 0; i < n; i++) o = e[i], this.element.appendChild(o.element);
      var s = this._filter(e).matches;
      for (i = 0; i < n; i++) e[i].isLayoutInstant = !0;
      for (this.arrange(), i = 0; i < n; i++) delete e[i].isLayoutInstant;
      this.reveal(s);
    }
  };
  var c = l.remove;
  return l.remove = function (t) {
    t = n.makeArray(t);
    var e = this.getItems(t);
    c.call(this, t);
    for (var i = e && e.length, o = 0; i && o < i; o++) {
      var s = e[o];
      n.removeFrom(this.filteredItems, s);
    }
  }, l.shuffle = function () {
    for (var t = 0; t < this.items.length; t++) {
      var e = this.items[t];
      e.sortData.random = Math.random();
    }
    this.options.sortBy = "random", this._sort(), this._layout();
  }, l._noTransition = function (t, e) {
    var i = this.options.transitionDuration;
    this.options.transitionDuration = 0;
    var o = t.apply(this, e);
    return this.options.transitionDuration = i, o;
  }, l.getFilteredItemElements = function () {
    return this.filteredItems.map(function (t) {
      return t.element;
    });
  }, d;
});

/***/ }),

/***/ "./assets/js/main.js":
/*!***************************!*\
  !*** ./assets/js/main.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/*
Template Name: Massive
Author: GrayGrids
*/

(function () {
  //===== Prealoder

  window.onload = function () {
    window.setTimeout(fadeout, 500);
  };
  function fadeout() {
    document.querySelector('.preloader').style.opacity = '0';
    document.querySelector('.preloader').style.display = 'none';
  }

  /*=====================================
  Sticky
  ======================================= */
  window.onscroll = function () {
    var header_navbar = document.querySelector(".navbar-area");
    var sticky = header_navbar.offsetTop;
    if (window.pageYOffset > sticky) {
      header_navbar.classList.add("sticky");
    } else {
      header_navbar.classList.remove("sticky");
    }

    // show or hide the back-top-top button
    var backToTop = document.querySelector(".scroll-top");
    if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {
      backToTop.style.display = "flex";
    } else {
      backToTop.style.display = "none";
    }
  };

  // for menu scroll
  var pageLink = document.querySelectorAll('.page-scroll');
  pageLink.forEach(function (elem) {
    elem.addEventListener('click', function (e) {
      e.preventDefault();
      document.querySelector(elem.getAttribute('href')).scrollIntoView({
        behavior: 'smooth',
        offsetTop: 1 - 60
      });
    });
  });

  //===== close navbar-collapse when a  clicked
  // let navbarToggler = document.querySelector(".navbar-toggler");
  // var navbarCollapse = document.querySelector(".collapse");

  // document.querySelectorAll(".page-scroll").forEach(e =>
  //     e.addEventListener("click", () => {
  //         navbarToggler.classList.remove("active");
  //         navbarCollapse.classList.remove('show')
  //     })
  // );
  // navbarToggler.addEventListener('click', function () {
  //     navbarToggler.classList.toggle("active");
  // });
  // WOW active

  // new WOW().init();
  var filterButtons = document.querySelectorAll('.btn');
  filterButtons.forEach(function (e) {
    return e.addEventListener('click', function () {
      var filterValue = event.target.getAttribute('data-filter');
      iso.arrange({
        filter: filterValue
      });
    });
  });
  var elements = document.getElementsByClassName("portfolio-btn");
  for (var i = 0; i < elements.length; i++) {
    elements[i].onclick = function () {
      var el = elements[0];
      while (el) {
        if (el.tagName === "BUTTON") {
          el.classList.remove("active");
        }
        el = el.nextSibling;
      }
      this.classList.add("active");
    };
  }

  //====== counter up
  // var cu = new counterUp({
  //     start: 0,
  //     duration: 2000,
  //     intvalues: true,
  //     interval: 100,
  //     append: " ",
  // });
  // cu.start();
})();

/***/ }),

/***/ "./assets/js/popper.js":
/*!*****************************!*\
  !*** ./assets/js/popper.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * @popperjs/core v2.11.5 - MIT License
 */



__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
__webpack_require__(/*! core-js/modules/es.array.reduce.js */ "./node_modules/core-js/modules/es.array.reduce.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.map.js */ "./node_modules/core-js/modules/es.map.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
__webpack_require__(/*! core-js/modules/es.set.js */ "./node_modules/core-js/modules/es.set.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
__webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
__webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");
__webpack_require__(/*! core-js/modules/es.array.some.js */ "./node_modules/core-js/modules/es.array.some.js");
__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");
__webpack_require__(/*! core-js/modules/es.array.every.js */ "./node_modules/core-js/modules/es.array.every.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement(element) && includeScale) {
    var offsetHeight = element.offsetHeight;
    var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
    // Fallback to 1 in case both values are `0`

    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}
function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument :
  // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}
function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
    overflow = _getComputedStyle.overflow,
    overflowX = _getComputedStyle.overflowX,
    overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' ||
    // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}
function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot ||
    // step into the shadow DOM of the parent of a slotted node
    element.parentNode || (
    // DOM Element detected
    isShadowRoot(element) ? element.host : null) ||
    // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback
  );
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList :
  // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}
function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) ||
  // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }
  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block

function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;
  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle(element);
    if (elementCss.position === 'fixed') {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.

function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }
  return offsetParent || getContainingBlock(element) || window;
}
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }
    return pending;
  };
}
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
    .filter(function (value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }
          break;
        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }
          break;
        case 'phase':
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }
          break;
        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }
          break;
        case 'effect':
          if (modifier.effect != null && typeof modifier.effect !== 'function') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }
          break;
        case 'requires':
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }
          break;
        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }
          break;
        case 'options':
        case 'data':
          break;
        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }
      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}
function getBasePlacement(placement) {
  return placement.split('-')[0];
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}
function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      } // $FlowFixMe[prop-missing]: need a better way to handle this...

      next = next.parentNode || next.host;
    } while (next);
  } // Give up, the result is false

  return false;
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`

function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents

function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function getVariation(placement) {
  return placement.split('-')[1];
}
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}
function computeOffsets(_ref) {
  var reference = _ref.reference,
    element = _ref.element,
    placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }
  return offsets;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options,
    _options$placement = _options.placement,
    placement = _options$placement === void 0 ? state.placement : _options$placement,
    _options$boundary = _options.boundary,
    boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
    _options$rootBoundary = _options.rootBoundary,
    rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
    _options$elementConte = _options.elementContext,
    elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
    _options$altBoundary = _options.altBoundary,
    altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
    _options$padding = _options.padding,
    padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }
  return overflowOffsets;
}
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions,
    _generatorOptions$def = _generatorOptions.defaultModifiers,
    defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
    _generatorOptions$def2 = _generatorOptions.defaultOptions,
    defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }
          var _getComputedStyle = getComputedStyle(popper),
            marginTop = _getComputedStyle.marginTop,
            marginRight = _getComputedStyle.marginRight,
            marginBottom = _getComputedStyle.marginBottom,
            marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer

          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements,
          reference = _state$elements.reference,
          popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        } // Store the reference and popper rects to be read by modifiers

        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index],
            fn = _state$orderedModifie.fn,
            _state$orderedModifie2 = _state$orderedModifie.options,
            _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
            name = _state$orderedModifie.name;
          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference, popper)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
          _ref3$options = _ref3.options,
          options = _ref3$options === void 0 ? {} : _ref3$options,
          effect = _ref3.effect;
        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });
          var noopFn = function noopFn() {};
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var passive = {
  passive: true
};
function effect$2(_ref) {
  var state = _ref.state,
    instance = _ref.instance,
    options = _ref.options;
  var _options$scroll = options.scroll,
    scroll = _options$scroll === void 0 ? true : _options$scroll,
    _options$resize = options.resize,
    resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }
  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }
  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }
    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules

var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect$2,
  data: {}
};
function popperOffsets(_ref) {
  var state = _ref.state,
    name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules

var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};
var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
    y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper = _ref2.popper,
    popperRect = _ref2.popperRect,
    placement = _ref2.placement,
    variation = _ref2.variation,
    offsets = _ref2.offsets,
    position = _ref2.position,
    gpuAcceleration = _ref2.gpuAcceleration,
    adaptive = _ref2.adaptive,
    roundOffsets = _ref2.roundOffsets,
    isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x,
    x = _offsets$x === void 0 ? 0 : _offsets$x,
    _offsets$y = offsets.y,
    y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';
    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);
      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height :
      // $FlowFixMe[prop-missing]
      offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width :
      // $FlowFixMe[prop-missing]
      offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state,
    options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
    gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
    _options$adaptive = options.adaptive,
    adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
    _options$roundOffsets = options.roundOffsets,
    roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';
    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration,
    isFixed: state.options.strategy === 'fixed'
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules

var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]

    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];
      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}
function effect$1(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules

var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$1,
  requires: ['computeStyles']
};
function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
    skidding = _ref[0],
    distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state,
    options = _ref2.options,
    name = _ref2.name;
  var _options$offset = options.offset,
    offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
    x = _data$state$placement.x,
    y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules

var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};
var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options,
    placement = _options.placement,
    boundary = _options.boundary,
    rootBoundary = _options.rootBoundary,
    padding = _options.padding,
    flipVariations = _options.flipVariations,
    _options$allowedAutoP = _options.allowedAutoPlacements,
    allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
    if (true) {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state,
    options = _ref.options,
    name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis,
    checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
    _options$altAxis = options.altAxis,
    checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
    specifiedFallbackPlacements = options.fallbackPlacements,
    padding = options.padding,
    boundary = options.boundary,
    rootBoundary = options.rootBoundary,
    altBoundary = options.altBoundary,
    _options$flipVariatio = options.flipVariations,
    flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
    allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];
  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);
        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules

var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
function withinMaxClamp(min, value, max) {
  var v = within(min, value, max);
  return v > max ? max : v;
}
function preventOverflow(_ref) {
  var state = _ref.state,
    options = _ref.options,
    name = _ref.name;
  var _options$mainAxis = options.mainAxis,
    checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
    _options$altAxis = options.altAxis,
    checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
    boundary = options.boundary,
    rootBoundary = options.rootBoundary,
    altBoundary = options.altBoundary,
    padding = options.padding,
    _options$tether = options.tether,
    tether = _options$tether === void 0 ? true : _options$tether,
    _options$tetherOffset = options.tetherOffset,
    tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = offset + overflow[mainSide];
    var max$1 = offset - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === 'x' ? top : left;
    var _altSide = mainAxis === 'x' ? bottom : right;
    var _offset = popperOffsets[altAxis];
    var _len = altAxis === 'y' ? 'height' : 'width';
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules

var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};
var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state,
    name = _ref.name,
    options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';
  if (!arrowElement || !popperOffsets) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
  var state = _ref2.state,
    options = _ref2.options;
  var _options$element = options.element,
    arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
  if (arrowElement == null) {
    return;
  } // CSS selector

  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }
    return;
  }
  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules

var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state,
    name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules

var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};
var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
var createPopper$1 = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers$1
}); // eslint-disable-next-line import/no-unused-modules

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

exports.applyStyles = applyStyles$1;
exports.arrow = arrow$1;
exports.computeStyles = computeStyles$1;
exports.createPopper = createPopper;
exports.createPopperLite = createPopper$1;
exports.defaultModifiers = defaultModifiers;
exports.detectOverflow = detectOverflow;
exports.eventListeners = eventListeners;
exports.flip = flip$1;
exports.hide = hide$1;
exports.offset = offset$1;
exports.popperGenerator = popperGenerator;
exports.popperOffsets = popperOffsets$1;
exports.preventOverflow = preventOverflow$1;

/***/ }),

/***/ "./assets/js/tiny-slider.js":
/*!**********************************!*\
  !*** ./assets/js/tiny-slider.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
var tns = function () {
  var t = window,
    Ai = t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.msRequestAnimationFrame || function (t) {
      return setTimeout(t, 16);
    },
    e = window,
    Ni = e.cancelAnimationFrame || e.mozCancelAnimationFrame || function (t) {
      clearTimeout(t);
    };
  function Li() {
    for (var t, e, n, i = arguments[0] || {}, a = 1, r = arguments.length; a < r; a++) if (null !== (t = arguments[a])) for (e in t) i !== (n = t[e]) && void 0 !== n && (i[e] = n);
    return i;
  }
  function Bi(t) {
    return 0 <= ["true", "false"].indexOf(t) ? JSON.parse(t) : t;
  }
  function Si(t, e, n, i) {
    if (i) try {
      t.setItem(e, n);
    } catch (t) {}
    return n;
  }
  function Hi() {
    var t = document,
      e = t.body;
    return e || ((e = t.createElement("body")).fake = !0), e;
  }
  var n = document.documentElement;
  function Oi(t) {
    var e = "";
    return t.fake && (e = n.style.overflow, t.style.background = "", t.style.overflow = n.style.overflow = "hidden", n.appendChild(t)), e;
  }
  function Di(t, e) {
    t.fake && (t.remove(), n.style.overflow = e, n.offsetHeight);
  }
  function ki(t, e, n, i) {
    "insertRule" in t ? t.insertRule(e + "{" + n + "}", i) : t.addRule(e, n, i);
  }
  function Ri(t) {
    return ("insertRule" in t ? t.cssRules : t.rules).length;
  }
  function Ii(t, e, n) {
    for (var i = 0, a = t.length; i < a; i++) e.call(n, t[i], i);
  }
  var i = ("classList" in document.createElement("_")),
    Pi = i ? function (t, e) {
      return t.classList.contains(e);
    } : function (t, e) {
      return 0 <= t.className.indexOf(e);
    },
    zi = i ? function (t, e) {
      Pi(t, e) || t.classList.add(e);
    } : function (t, e) {
      Pi(t, e) || (t.className += " " + e);
    },
    Wi = i ? function (t, e) {
      Pi(t, e) && t.classList.remove(e);
    } : function (t, e) {
      Pi(t, e) && (t.className = t.className.replace(e, ""));
    };
  function qi(t, e) {
    return t.hasAttribute(e);
  }
  function Fi(t, e) {
    return t.getAttribute(e);
  }
  function r(t) {
    return void 0 !== t.item;
  }
  function ji(t, e) {
    if (t = r(t) || t instanceof Array ? t : [t], "[object Object]" === Object.prototype.toString.call(e)) for (var n = t.length; n--;) for (var i in e) t[n].setAttribute(i, e[i]);
  }
  function Vi(t, e) {
    t = r(t) || t instanceof Array ? t : [t];
    for (var n = (e = e instanceof Array ? e : [e]).length, i = t.length; i--;) for (var a = n; a--;) t[i].removeAttribute(e[a]);
  }
  function Gi(t) {
    for (var e = [], n = 0, i = t.length; n < i; n++) e.push(t[n]);
    return e;
  }
  function Qi(t, e) {
    "none" !== t.style.display && (t.style.display = "none");
  }
  function Xi(t, e) {
    "none" === t.style.display && (t.style.display = "");
  }
  function Yi(t) {
    return "none" !== window.getComputedStyle(t).display;
  }
  function Ki(e) {
    if ("string" == typeof e) {
      var n = [e],
        i = e.charAt(0).toUpperCase() + e.substr(1);
      ["Webkit", "Moz", "ms", "O"].forEach(function (t) {
        "ms" === t && "transform" !== e || n.push(t + i);
      }), e = n;
    }
    for (var t = document.createElement("fakeelement"), a = (e.length, 0); a < e.length; a++) {
      var r = e[a];
      if (void 0 !== t.style[r]) return r;
    }
    return !1;
  }
  function Ji(t, e) {
    var n = !1;
    return /^Webkit/.test(t) ? n = "webkit" + e + "End" : /^O/.test(t) ? n = "o" + e + "End" : t && (n = e.toLowerCase() + "end"), n;
  }
  var a = !1;
  try {
    var o = Object.defineProperty({}, "passive", {
      get: function get() {
        a = !0;
      }
    });
    window.addEventListener("test", null, o);
  } catch (t) {}
  var u = !!a && {
    passive: !0
  };
  function Ui(t, e, n) {
    for (var i in e) {
      var a = 0 <= ["touchstart", "touchmove"].indexOf(i) && !n && u;
      t.addEventListener(i, e[i], a);
    }
  }
  function _i(t, e) {
    for (var n in e) {
      var i = 0 <= ["touchstart", "touchmove"].indexOf(n) && u;
      t.removeEventListener(n, e[n], i);
    }
  }
  function Zi() {
    return {
      topics: {},
      on: function on(t, e) {
        this.topics[t] = this.topics[t] || [], this.topics[t].push(e);
      },
      off: function off(t, e) {
        if (this.topics[t]) for (var n = 0; n < this.topics[t].length; n++) if (this.topics[t][n] === e) {
          this.topics[t].splice(n, 1);
          break;
        }
      },
      emit: function emit(e, n) {
        n.type = e, this.topics[e] && this.topics[e].forEach(function (t) {
          t(n, e);
        });
      }
    };
  }
  Object.keys || (Object.keys = function (t) {
    var e = [];
    for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e.push(n);
    return e;
  }), "remove" in Element.prototype || (Element.prototype.remove = function () {
    this.parentNode && this.parentNode.removeChild(this);
  });
  var $i = function $i(H) {
    H = Li({
      container: ".slider",
      mode: "carousel",
      axis: "horizontal",
      items: 1,
      gutter: 0,
      edgePadding: 0,
      fixedWidth: !1,
      autoWidth: !1,
      viewportMax: !1,
      slideBy: 1,
      center: !1,
      controls: !0,
      controlsPosition: "top",
      controlsText: ["prev", "next"],
      controlsContainer: !1,
      prevButton: !1,
      nextButton: !1,
      nav: !0,
      navPosition: "top",
      navContainer: !1,
      navAsThumbnails: !1,
      arrowKeys: !1,
      speed: 300,
      autoplay: !1,
      autoplayPosition: "top",
      autoplayTimeout: 5e3,
      autoplayDirection: "forward",
      autoplayText: ["start", "stop"],
      autoplayHoverPause: !1,
      autoplayButton: !1,
      autoplayButtonOutput: !0,
      autoplayResetOnVisibility: !0,
      animateIn: "tns-fadeIn",
      animateOut: "tns-fadeOut",
      animateNormal: "tns-normal",
      animateDelay: !1,
      loop: !0,
      rewind: !1,
      autoHeight: !1,
      responsive: !1,
      lazyload: !1,
      lazyloadSelector: ".tns-lazy-img",
      touch: !0,
      mouseDrag: !1,
      swipeAngle: 15,
      nested: !1,
      preventActionWhenRunning: !1,
      preventScrollOnTouch: !1,
      freezable: !0,
      onInit: !1,
      useLocalStorage: !0,
      nonce: !1
    }, H || {});
    var O = document,
      m = window,
      a = {
        ENTER: 13,
        SPACE: 32,
        LEFT: 37,
        RIGHT: 39
      },
      e = {},
      n = H.useLocalStorage;
    if (n) {
      var t = navigator.userAgent,
        i = new Date();
      try {
        (e = m.localStorage) ? (e.setItem(i, i), n = e.getItem(i) == i, e.removeItem(i)) : n = !1, n || (e = {});
      } catch (t) {
        n = !1;
      }
      n && (e.tnsApp && e.tnsApp !== t && ["tC", "tPL", "tMQ", "tTf", "t3D", "tTDu", "tTDe", "tADu", "tADe", "tTE", "tAE"].forEach(function (t) {
        e.removeItem(t);
      }), localStorage.tnsApp = t);
    }
    var y = e.tC ? Bi(e.tC) : Si(e, "tC", function () {
        var t = document,
          e = Hi(),
          n = Oi(e),
          i = t.createElement("div"),
          a = !1;
        e.appendChild(i);
        try {
          for (var r, o = "(10px * 10)", u = ["calc" + o, "-moz-calc" + o, "-webkit-calc" + o], l = 0; l < 3; l++) if (r = u[l], i.style.width = r, 100 === i.offsetWidth) {
            a = r.replace(o, "");
            break;
          }
        } catch (t) {}
        return e.fake ? Di(e, n) : i.remove(), a;
      }(), n),
      g = e.tPL ? Bi(e.tPL) : Si(e, "tPL", function () {
        var t,
          e = document,
          n = Hi(),
          i = Oi(n),
          a = e.createElement("div"),
          r = e.createElement("div"),
          o = "";
        a.className = "tns-t-subp2", r.className = "tns-t-ct";
        for (var u = 0; u < 70; u++) o += "<div></div>";
        return r.innerHTML = o, a.appendChild(r), n.appendChild(a), t = Math.abs(a.getBoundingClientRect().left - r.children[67].getBoundingClientRect().left) < 2, n.fake ? Di(n, i) : a.remove(), t;
      }(), n),
      D = e.tMQ ? Bi(e.tMQ) : Si(e, "tMQ", function () {
        if (window.matchMedia || window.msMatchMedia) return !0;
        var t,
          e = document,
          n = Hi(),
          i = Oi(n),
          a = e.createElement("div"),
          r = e.createElement("style"),
          o = "@media all and (min-width:1px){.tns-mq-test{position:absolute}}";
        return r.type = "text/css", a.className = "tns-mq-test", n.appendChild(r), n.appendChild(a), r.styleSheet ? r.styleSheet.cssText = o : r.appendChild(e.createTextNode(o)), t = window.getComputedStyle ? window.getComputedStyle(a).position : a.currentStyle.position, n.fake ? Di(n, i) : a.remove(), "absolute" === t;
      }(), n),
      r = e.tTf ? Bi(e.tTf) : Si(e, "tTf", Ki("transform"), n),
      o = e.t3D ? Bi(e.t3D) : Si(e, "t3D", function (t) {
        if (!t) return !1;
        if (!window.getComputedStyle) return !1;
        var e,
          n = document,
          i = Hi(),
          a = Oi(i),
          r = n.createElement("p"),
          o = 9 < t.length ? "-" + t.slice(0, -9).toLowerCase() + "-" : "";
        return o += "transform", i.insertBefore(r, null), r.style[t] = "translate3d(1px,1px,1px)", e = window.getComputedStyle(r).getPropertyValue(o), i.fake ? Di(i, a) : r.remove(), void 0 !== e && 0 < e.length && "none" !== e;
      }(r), n),
      x = e.tTDu ? Bi(e.tTDu) : Si(e, "tTDu", Ki("transitionDuration"), n),
      u = e.tTDe ? Bi(e.tTDe) : Si(e, "tTDe", Ki("transitionDelay"), n),
      b = e.tADu ? Bi(e.tADu) : Si(e, "tADu", Ki("animationDuration"), n),
      l = e.tADe ? Bi(e.tADe) : Si(e, "tADe", Ki("animationDelay"), n),
      s = e.tTE ? Bi(e.tTE) : Si(e, "tTE", Ji(x, "Transition"), n),
      c = e.tAE ? Bi(e.tAE) : Si(e, "tAE", Ji(b, "Animation"), n),
      f = m.console && "function" == typeof m.console.warn,
      d = ["container", "controlsContainer", "prevButton", "nextButton", "navContainer", "autoplayButton"],
      v = {};
    if (d.forEach(function (t) {
      if ("string" == typeof H[t]) {
        var e = H[t],
          n = O.querySelector(e);
        if (v[t] = e, !n || !n.nodeName) return void (f && console.warn("Can't find", H[t]));
        H[t] = n;
      }
    }), !(H.container.children.length < 1)) {
      var k = H.responsive,
        R = H.nested,
        I = "carousel" === H.mode;
      if (k) {
        0 in k && (H = Li(H, k[0]), delete k[0]);
        var p = {};
        for (var h in k) {
          var w = k[h];
          w = "number" == typeof w ? {
            items: w
          } : w, p[h] = w;
        }
        k = p, p = null;
      }
      if (I || function t(e) {
        for (var n in e) I || ("slideBy" === n && (e[n] = "page"), "edgePadding" === n && (e[n] = !1), "autoHeight" === n && (e[n] = !1)), "responsive" === n && t(e[n]);
      }(H), !I) {
        H.axis = "horizontal", H.slideBy = "page", H.edgePadding = !1;
        var P = H.animateIn,
          z = H.animateOut,
          C = H.animateDelay,
          W = H.animateNormal;
      }
      var M,
        q,
        F = "horizontal" === H.axis,
        T = O.createElement("div"),
        j = O.createElement("div"),
        V = H.container,
        E = V.parentNode,
        A = V.outerHTML,
        G = V.children,
        Q = G.length,
        X = rn(),
        Y = !1;
      k && En(), I && (V.className += " tns-vpfix");
      var N,
        L,
        B,
        S,
        K,
        J,
        U,
        _,
        Z,
        $ = H.autoWidth,
        tt = sn("fixedWidth"),
        et = sn("edgePadding"),
        nt = sn("gutter"),
        it = un(),
        at = sn("center"),
        rt = $ ? 1 : Math.floor(sn("items")),
        ot = sn("slideBy"),
        ut = H.viewportMax || H.fixedWidthViewportWidth,
        lt = sn("arrowKeys"),
        st = sn("speed"),
        ct = H.rewind,
        ft = !ct && H.loop,
        dt = sn("autoHeight"),
        vt = sn("controls"),
        pt = sn("controlsText"),
        ht = sn("nav"),
        mt = sn("touch"),
        yt = sn("mouseDrag"),
        gt = sn("autoplay"),
        xt = sn("autoplayTimeout"),
        bt = sn("autoplayText"),
        wt = sn("autoplayHoverPause"),
        Ct = sn("autoplayResetOnVisibility"),
        Mt = (U = null, _ = sn("nonce"), Z = document.createElement("style"), U && Z.setAttribute("media", U), _ && Z.setAttribute("nonce", _), document.querySelector("head").appendChild(Z), Z.sheet ? Z.sheet : Z.styleSheet),
        Tt = H.lazyload,
        Et = H.lazyloadSelector,
        At = [],
        Nt = ft ? (K = function () {
          {
            if ($ || tt && !ut) return Q - 1;
            var t = tt ? "fixedWidth" : "items",
              e = [];
            if ((tt || H[t] < Q) && e.push(H[t]), k) for (var n in k) {
              var i = k[n][t];
              i && (tt || i < Q) && e.push(i);
            }
            return e.length || e.push(0), Math.ceil(tt ? ut / Math.min.apply(null, e) : Math.max.apply(null, e));
          }
        }(), J = I ? Math.ceil((5 * K - Q) / 2) : 4 * K - Q, J = Math.max(K, J), ln("edgePadding") ? J + 1 : J) : 0,
        Lt = I ? Q + 2 * Nt : Q + Nt,
        Bt = !(!tt && !$ || ft),
        St = tt ? _n() : null,
        Ht = !I || !ft,
        Ot = F ? "left" : "top",
        Dt = "",
        kt = "",
        Rt = tt ? function () {
          return at && !ft ? Q - 1 : Math.ceil(-St / (tt + nt));
        } : $ ? function () {
          for (var t = 0; t < Lt; t++) if (N[t] >= -St) return t;
        } : function () {
          return at && I && !ft ? Q - 1 : ft || I ? Math.max(0, Lt - Math.ceil(rt)) : Lt - 1;
        },
        It = en(sn("startIndex")),
        Pt = It,
        zt = (tn(), 0),
        Wt = $ ? null : Rt(),
        qt = H.preventActionWhenRunning,
        Ft = H.swipeAngle,
        jt = !Ft || "?",
        Vt = !1,
        Gt = H.onInit,
        Qt = new Zi(),
        Xt = " tns-slider tns-" + H.mode,
        Yt = V.id || (S = window.tnsId, window.tnsId = S ? S + 1 : 1, "tns" + window.tnsId),
        Kt = sn("disable"),
        Jt = !1,
        Ut = H.freezable,
        _t = !(!Ut || $) && Tn(),
        Zt = !1,
        $t = {
          click: oi,
          keydown: function keydown(t) {
            t = pi(t);
            var e = [a.LEFT, a.RIGHT].indexOf(t.keyCode);
            0 <= e && (0 === e ? we.disabled || oi(t, -1) : Ce.disabled || oi(t, 1));
          }
        },
        te = {
          click: function click(t) {
            if (Vt) {
              if (qt) return;
              ai();
            }
            var e = hi(t = pi(t));
            for (; e !== Ae && !qi(e, "data-nav");) e = e.parentNode;
            if (qi(e, "data-nav")) {
              var n = Se = Number(Fi(e, "data-nav")),
                i = tt || $ ? n * Q / Le : n * rt,
                a = le ? n : Math.min(Math.ceil(i), Q - 1);
              ri(a, t), He === n && (Pe && fi(), Se = -1);
            }
          },
          keydown: function keydown(t) {
            t = pi(t);
            var e = O.activeElement;
            if (!qi(e, "data-nav")) return;
            var n = [a.LEFT, a.RIGHT, a.ENTER, a.SPACE].indexOf(t.keyCode),
              i = Number(Fi(e, "data-nav"));
            0 <= n && (0 === n ? 0 < i && vi(Ee[i - 1]) : 1 === n ? i < Le - 1 && vi(Ee[i + 1]) : ri(Se = i, t));
          }
        },
        ee = {
          mouseover: function mouseover() {
            Pe && (li(), ze = !0);
          },
          mouseout: function mouseout() {
            ze && (ui(), ze = !1);
          }
        },
        ne = {
          visibilitychange: function visibilitychange() {
            O.hidden ? Pe && (li(), qe = !0) : qe && (ui(), qe = !1);
          }
        },
        ie = {
          keydown: function keydown(t) {
            t = pi(t);
            var e = [a.LEFT, a.RIGHT].indexOf(t.keyCode);
            0 <= e && oi(t, 0 === e ? -1 : 1);
          }
        },
        ae = {
          touchstart: xi,
          touchmove: bi,
          touchend: wi,
          touchcancel: wi
        },
        re = {
          mousedown: xi,
          mousemove: bi,
          mouseup: wi,
          mouseleave: wi
        },
        oe = ln("controls"),
        ue = ln("nav"),
        le = !!$ || H.navAsThumbnails,
        se = ln("autoplay"),
        ce = ln("touch"),
        fe = ln("mouseDrag"),
        de = "tns-slide-active",
        ve = "tns-slide-cloned",
        pe = "tns-complete",
        he = {
          load: function load(t) {
            kn(hi(t));
          },
          error: function error(t) {
            e = hi(t), zi(e, "failed"), Rn(e);
            var e;
          }
        },
        me = "force" === H.preventScrollOnTouch;
      if (oe) var ye,
        ge,
        xe = H.controlsContainer,
        be = H.controlsContainer ? H.controlsContainer.outerHTML : "",
        we = H.prevButton,
        Ce = H.nextButton,
        Me = H.prevButton ? H.prevButton.outerHTML : "",
        Te = H.nextButton ? H.nextButton.outerHTML : "";
      if (ue) var Ee,
        Ae = H.navContainer,
        Ne = H.navContainer ? H.navContainer.outerHTML : "",
        Le = $ ? Q : Mi(),
        Be = 0,
        Se = -1,
        He = an(),
        Oe = He,
        De = "tns-nav-active",
        ke = "Carousel Page ",
        Re = " (Current Slide)";
      if (se) var Ie,
        Pe,
        ze,
        We,
        qe,
        Fe = "forward" === H.autoplayDirection ? 1 : -1,
        je = H.autoplayButton,
        Ve = H.autoplayButton ? H.autoplayButton.outerHTML : "",
        Ge = ["<span class='tns-visually-hidden'>", " animation</span>"];
      if (ce || fe) var Qe,
        Xe,
        Ye = {},
        Ke = {},
        Je = !1,
        Ue = F ? function (t, e) {
          return t.x - e.x;
        } : function (t, e) {
          return t.y - e.y;
        };
      $ || $e(Kt || _t), r && (Ot = r, Dt = "translate", o ? (Dt += F ? "3d(" : "3d(0px, ", kt = F ? ", 0px, 0px)" : ", 0px)") : (Dt += F ? "X(" : "Y(", kt = ")")), I && (V.className = V.className.replace("tns-vpfix", "")), function () {
        ln("gutter");
        T.className = "tns-outer", j.className = "tns-inner", T.id = Yt + "-ow", j.id = Yt + "-iw", "" === V.id && (V.id = Yt);
        Xt += g || $ ? " tns-subpixel" : " tns-no-subpixel", Xt += y ? " tns-calc" : " tns-no-calc", $ && (Xt += " tns-autowidth");
        Xt += " tns-" + H.axis, V.className += Xt, I ? ((M = O.createElement("div")).id = Yt + "-mw", M.className = "tns-ovh", T.appendChild(M), M.appendChild(j)) : T.appendChild(j);
        if (dt) {
          var t = M || j;
          t.className += " tns-ah";
        }
        if (E.insertBefore(T, V), j.appendChild(V), Ii(G, function (t, e) {
          zi(t, "tns-item"), t.id || (t.id = Yt + "-item" + e), !I && W && zi(t, W), ji(t, {
            "aria-hidden": "true",
            tabindex: "-1"
          });
        }), Nt) {
          for (var e = O.createDocumentFragment(), n = O.createDocumentFragment(), i = Nt; i--;) {
            var a = i % Q,
              r = G[a].cloneNode(!0);
            if (zi(r, ve), Vi(r, "id"), n.insertBefore(r, n.firstChild), I) {
              var o = G[Q - 1 - a].cloneNode(!0);
              zi(o, ve), Vi(o, "id"), e.appendChild(o);
            }
          }
          V.insertBefore(e, V.firstChild), V.appendChild(n), G = V.children;
        }
      }(), function () {
        if (!I) for (var t = It, e = It + Math.min(Q, rt); t < e; t++) {
          var n = G[t];
          n.style.left = 100 * (t - It) / rt + "%", zi(n, P), Wi(n, W);
        }
        F && (g || $ ? (ki(Mt, "#" + Yt + " > .tns-item", "font-size:" + m.getComputedStyle(G[0]).fontSize + ";", Ri(Mt)), ki(Mt, "#" + Yt, "font-size:0;", Ri(Mt))) : I && Ii(G, function (t, e) {
          var n;
          t.style.marginLeft = (n = e, y ? y + "(" + 100 * n + "% / " + Lt + ")" : 100 * n / Lt + "%");
        }));
        if (D) {
          if (x) {
            var i = M && H.autoHeight ? hn(H.speed) : "";
            ki(Mt, "#" + Yt + "-mw", i, Ri(Mt));
          }
          i = cn(H.edgePadding, H.gutter, H.fixedWidth, H.speed, H.autoHeight), ki(Mt, "#" + Yt + "-iw", i, Ri(Mt)), I && (i = F && !$ ? "width:" + fn(H.fixedWidth, H.gutter, H.items) + ";" : "", x && (i += hn(st)), ki(Mt, "#" + Yt, i, Ri(Mt))), i = F && !$ ? dn(H.fixedWidth, H.gutter, H.items) : "", H.gutter && (i += vn(H.gutter)), I || (x && (i += hn(st)), b && (i += mn(st))), i && ki(Mt, "#" + Yt + " > .tns-item", i, Ri(Mt));
        } else {
          I && dt && (M.style[x] = st / 1e3 + "s"), j.style.cssText = cn(et, nt, tt, dt), I && F && !$ && (V.style.width = fn(tt, nt, rt));
          var i = F && !$ ? dn(tt, nt, rt) : "";
          nt && (i += vn(nt)), i && ki(Mt, "#" + Yt + " > .tns-item", i, Ri(Mt));
        }
        if (k && D) for (var a in k) {
          a = parseInt(a);
          var r = k[a],
            i = "",
            o = "",
            u = "",
            l = "",
            s = "",
            c = $ ? null : sn("items", a),
            f = sn("fixedWidth", a),
            d = sn("speed", a),
            v = sn("edgePadding", a),
            p = sn("autoHeight", a),
            h = sn("gutter", a);
          x && M && sn("autoHeight", a) && "speed" in r && (o = "#" + Yt + "-mw{" + hn(d) + "}"), ("edgePadding" in r || "gutter" in r) && (u = "#" + Yt + "-iw{" + cn(v, h, f, d, p) + "}"), I && F && !$ && ("fixedWidth" in r || "items" in r || tt && "gutter" in r) && (l = "width:" + fn(f, h, c) + ";"), x && "speed" in r && (l += hn(d)), l && (l = "#" + Yt + "{" + l + "}"), ("fixedWidth" in r || tt && "gutter" in r || !I && "items" in r) && (s += dn(f, h, c)), "gutter" in r && (s += vn(h)), !I && "speed" in r && (x && (s += hn(d)), b && (s += mn(d))), s && (s = "#" + Yt + " > .tns-item{" + s + "}"), (i = o + u + l + s) && Mt.insertRule("@media (min-width: " + a / 16 + "em) {" + i + "}", Mt.cssRules.length);
        }
      }(), yn();
      var _e = ft ? I ? function () {
          var t = zt,
            e = Wt;
          t += ot, e -= ot, et ? (t += 1, e -= 1) : tt && (it + nt) % (tt + nt) && (e -= 1), Nt && (e < It ? It -= Q : It < t && (It += Q));
        } : function () {
          if (Wt < It) for (; zt + Q <= It;) It -= Q;else if (It < zt) for (; It <= Wt - Q;) It += Q;
        } : function () {
          It = Math.max(zt, Math.min(Wt, It));
        },
        Ze = I ? function () {
          var e, n, i, a, t, r, o, u, l, s, c;
          Jn(V, ""), x || !st ? (ti(), st && Yi(V) || ai()) : (e = V, n = Ot, i = Dt, a = kt, t = Zn(), r = st, o = ai, u = Math.min(r, 10), l = 0 <= t.indexOf("%") ? "%" : "px", t = t.replace(l, ""), s = Number(e.style[n].replace(i, "").replace(a, "").replace(l, "")), c = (t - s) / r * u, setTimeout(function t() {
            r -= u, s += c, e.style[n] = i + s + l + a, 0 < r ? setTimeout(t, u) : o();
          }, u)), F || Ci();
        } : function () {
          At = [];
          var t = {};
          t[s] = t[c] = ai, _i(G[Pt], t), Ui(G[It], t), ei(Pt, P, z, !0), ei(It, W, P), s && c && st && Yi(V) || ai();
        };
      return {
        version: "2.9.2",
        getInfo: Ei,
        events: Qt,
        goTo: ri,
        play: function play() {
          gt && !Pe && (ci(), We = !1);
        },
        pause: function pause() {
          Pe && (fi(), We = !0);
        },
        isOn: Y,
        updateSliderHeight: Fn,
        refresh: yn,
        destroy: function destroy() {
          if (Mt.disabled = !0, Mt.ownerNode && Mt.ownerNode.remove(), _i(m, {
            resize: Cn
          }), lt && _i(O, ie), xe && _i(xe, $t), Ae && _i(Ae, te), _i(V, ee), _i(V, ne), je && _i(je, {
            click: di
          }), gt && clearInterval(Ie), I && s) {
            var t = {};
            t[s] = ai, _i(V, t);
          }
          mt && _i(V, ae), yt && _i(V, re);
          var r = [A, be, Me, Te, Ne, Ve];
          for (var e in d.forEach(function (t, e) {
            var n = "container" === t ? T : H[t];
            if ("object" == _typeof(n) && n) {
              var i = !!n.previousElementSibling && n.previousElementSibling,
                a = n.parentNode;
              n.outerHTML = r[e], H[t] = i ? i.nextElementSibling : a.firstElementChild;
            }
          }), d = P = z = C = W = F = T = j = V = E = A = G = Q = q = X = $ = tt = et = nt = it = rt = ot = ut = lt = st = ct = ft = dt = Mt = Tt = N = At = Nt = Lt = Bt = St = Ht = Ot = Dt = kt = Rt = It = Pt = zt = Wt = Ft = jt = Vt = Gt = Qt = Xt = Yt = Kt = Jt = Ut = _t = Zt = $t = te = ee = ne = ie = ae = re = oe = ue = le = se = ce = fe = de = pe = he = L = vt = pt = xe = be = we = Ce = ye = ge = ht = Ae = Ne = Ee = Le = Be = Se = He = Oe = De = ke = Re = gt = xt = Fe = bt = wt = je = Ve = Ct = Ge = Ie = Pe = ze = We = qe = Ye = Ke = Qe = Je = Xe = Ue = mt = yt = null, this) "rebuild" !== e && (this[e] = null);
          Y = !1;
        },
        rebuild: function rebuild() {
          return $i(Li(H, v));
        }
      };
    }
    function $e(t) {
      t && (vt = ht = mt = yt = lt = gt = wt = Ct = !1);
    }
    function tn() {
      for (var t = I ? It - Nt : It; t < 0;) t += Q;
      return t % Q + 1;
    }
    function en(t) {
      return t = t ? Math.max(0, Math.min(ft ? Q - 1 : Q - rt, t)) : 0, I ? t + Nt : t;
    }
    function nn(t) {
      for (null == t && (t = It), I && (t -= Nt); t < 0;) t += Q;
      return Math.floor(t % Q);
    }
    function an() {
      var t,
        e = nn();
      return t = le ? e : tt || $ ? Math.ceil((e + 1) * Le / Q - 1) : Math.floor(e / rt), !ft && I && It === Wt && (t = Le - 1), t;
    }
    function rn() {
      return m.innerWidth || O.documentElement.clientWidth || O.body.clientWidth;
    }
    function on(t) {
      return "top" === t ? "afterbegin" : "beforeend";
    }
    function un() {
      var t = et ? 2 * et - nt : 0;
      return function t(e) {
        if (null != e) {
          var n,
            i,
            a = O.createElement("div");
          return e.appendChild(a), i = (n = a.getBoundingClientRect()).right - n.left, a.remove(), i || t(e.parentNode);
        }
      }(E) - t;
    }
    function ln(t) {
      if (H[t]) return !0;
      if (k) for (var e in k) if (k[e][t]) return !0;
      return !1;
    }
    function sn(t, e) {
      if (null == e && (e = X), "items" === t && tt) return Math.floor((it + nt) / (tt + nt)) || 1;
      var n = H[t];
      if (k) for (var i in k) e >= parseInt(i) && t in k[i] && (n = k[i][t]);
      return "slideBy" === t && "page" === n && (n = sn("items")), I || "slideBy" !== t && "items" !== t || (n = Math.floor(n)), n;
    }
    function cn(t, e, n, i, a) {
      var r = "";
      if (void 0 !== t) {
        var o = t;
        e && (o -= e), r = F ? "margin: 0 " + o + "px 0 " + t + "px;" : "margin: " + t + "px 0 " + o + "px 0;";
      } else if (e && !n) {
        var u = "-" + e + "px";
        r = "margin: 0 " + (F ? u + " 0 0" : "0 " + u + " 0") + ";";
      }
      return !I && a && x && i && (r += hn(i)), r;
    }
    function fn(t, e, n) {
      return t ? (t + e) * Lt + "px" : y ? y + "(" + 100 * Lt + "% / " + n + ")" : 100 * Lt / n + "%";
    }
    function dn(t, e, n) {
      var i;
      if (t) i = t + e + "px";else {
        I || (n = Math.floor(n));
        var a = I ? Lt : n;
        i = y ? y + "(100% / " + a + ")" : 100 / a + "%";
      }
      return i = "width:" + i, "inner" !== R ? i + ";" : i + " !important;";
    }
    function vn(t) {
      var e = "";
      !1 !== t && (e = (F ? "padding-" : "margin-") + (F ? "right" : "bottom") + ": " + t + "px;");
      return e;
    }
    function pn(t, e) {
      var n = t.substring(0, t.length - e).toLowerCase();
      return n && (n = "-" + n + "-"), n;
    }
    function hn(t) {
      return pn(x, 18) + "transition-duration:" + t / 1e3 + "s;";
    }
    function mn(t) {
      return pn(b, 17) + "animation-duration:" + t / 1e3 + "s;";
    }
    function yn() {
      if (ln("autoHeight") || $ || !F) {
        var t = V.querySelectorAll("img");
        Ii(t, function (t) {
          var e = t.src;
          Tt || (e && e.indexOf("data:image") < 0 ? (t.src = "", Ui(t, he), zi(t, "loading"), t.src = e) : kn(t));
        }), Ai(function () {
          zn(Gi(t), function () {
            L = !0;
          });
        }), ln("autoHeight") && (t = In(It, Math.min(It + rt - 1, Lt - 1))), Tt ? gn() : Ai(function () {
          zn(Gi(t), gn);
        });
      } else I && $n(), bn(), wn();
    }
    function gn() {
      if ($ && 1 < Q) {
        var i = ft ? It : Q - 1;
        !function t() {
          var e = G[i].getBoundingClientRect().left,
            n = G[i - 1].getBoundingClientRect().right;
          Math.abs(e - n) <= 1 ? xn() : setTimeout(function () {
            t();
          }, 16);
        }();
      } else xn();
    }
    function xn() {
      F && !$ || (jn(), $ ? (St = _n(), Ut && (_t = Tn()), Wt = Rt(), $e(Kt || _t)) : Ci()), I && $n(), bn(), wn();
    }
    function bn() {
      if (Vn(), T.insertAdjacentHTML("afterbegin", '<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">' + Hn() + "</span>  of " + Q + "</div>"), B = T.querySelector(".tns-liveregion .current"), se) {
        var t = gt ? "stop" : "start";
        je ? ji(je, {
          "data-action": t
        }) : H.autoplayButtonOutput && (T.insertAdjacentHTML(on(H.autoplayPosition), '<button type="button" data-action="' + t + '">' + Ge[0] + t + Ge[1] + bt[0] + "</button>"), je = T.querySelector("[data-action]")), je && Ui(je, {
          click: di
        }), gt && (ci(), wt && Ui(V, ee), Ct && Ui(V, ne));
      }
      if (ue) {
        if (Ae) ji(Ae, {
          "aria-label": "Carousel Pagination"
        }), Ii(Ee = Ae.children, function (t, e) {
          ji(t, {
            "data-nav": e,
            tabindex: "-1",
            "aria-label": ke + (e + 1),
            "aria-controls": Yt
          });
        });else {
          for (var e = "", n = le ? "" : 'style="display:none"', i = 0; i < Q; i++) e += '<button type="button" data-nav="' + i + '" tabindex="-1" aria-controls="' + Yt + '" ' + n + ' aria-label="' + ke + (i + 1) + '"></button>';
          e = '<div class="tns-nav" aria-label="Carousel Pagination">' + e + "</div>", T.insertAdjacentHTML(on(H.navPosition), e), Ae = T.querySelector(".tns-nav"), Ee = Ae.children;
        }
        if (Ti(), x) {
          var a = x.substring(0, x.length - 18).toLowerCase(),
            r = "transition: all " + st / 1e3 + "s";
          a && (r = "-" + a + "-" + r), ki(Mt, "[aria-controls^=" + Yt + "-item]", r, Ri(Mt));
        }
        ji(Ee[He], {
          "aria-label": ke + (He + 1) + Re
        }), Vi(Ee[He], "tabindex"), zi(Ee[He], De), Ui(Ae, te);
      }
      oe && (xe || we && Ce || (T.insertAdjacentHTML(on(H.controlsPosition), '<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button type="button" data-controls="prev" tabindex="-1" aria-controls="' + Yt + '">' + pt[0] + '</button><button type="button" data-controls="next" tabindex="-1" aria-controls="' + Yt + '">' + pt[1] + "</button></div>"), xe = T.querySelector(".tns-controls")), we && Ce || (we = xe.children[0], Ce = xe.children[1]), H.controlsContainer && ji(xe, {
        "aria-label": "Carousel Navigation",
        tabindex: "0"
      }), (H.controlsContainer || H.prevButton && H.nextButton) && ji([we, Ce], {
        "aria-controls": Yt,
        tabindex: "-1"
      }), (H.controlsContainer || H.prevButton && H.nextButton) && (ji(we, {
        "data-controls": "prev"
      }), ji(Ce, {
        "data-controls": "next"
      })), ye = Qn(we), ge = Qn(Ce), Kn(), xe ? Ui(xe, $t) : (Ui(we, $t), Ui(Ce, $t))), An();
    }
    function wn() {
      if (I && s) {
        var t = {};
        t[s] = ai, Ui(V, t);
      }
      mt && Ui(V, ae, H.preventScrollOnTouch), yt && Ui(V, re), lt && Ui(O, ie), "inner" === R ? Qt.on("outerResized", function () {
        Mn(), Qt.emit("innerLoaded", Ei());
      }) : (k || tt || $ || dt || !F) && Ui(m, {
        resize: Cn
      }), dt && ("outer" === R ? Qt.on("innerLoaded", Pn) : Kt || Pn()), Dn(), Kt ? Bn() : _t && Ln(), Qt.on("indexChanged", Wn), "inner" === R && Qt.emit("innerLoaded", Ei()), "function" == typeof Gt && Gt(Ei()), Y = !0;
    }
    function Cn(t) {
      Ai(function () {
        Mn(pi(t));
      });
    }
    function Mn(t) {
      if (Y) {
        "outer" === R && Qt.emit("outerResized", Ei(t)), X = rn();
        var e,
          n = q,
          i = !1;
        k && (En(), (e = n !== q) && Qt.emit("newBreakpointStart", Ei(t)));
        var a,
          r,
          o,
          u,
          l = rt,
          s = Kt,
          c = _t,
          f = lt,
          d = vt,
          v = ht,
          p = mt,
          h = yt,
          m = gt,
          y = wt,
          g = Ct,
          x = It;
        if (e) {
          var b = tt,
            w = dt,
            C = pt,
            M = at,
            T = bt;
          if (!D) var E = nt,
            A = et;
        }
        if (lt = sn("arrowKeys"), vt = sn("controls"), ht = sn("nav"), mt = sn("touch"), at = sn("center"), yt = sn("mouseDrag"), gt = sn("autoplay"), wt = sn("autoplayHoverPause"), Ct = sn("autoplayResetOnVisibility"), e && (Kt = sn("disable"), tt = sn("fixedWidth"), st = sn("speed"), dt = sn("autoHeight"), pt = sn("controlsText"), bt = sn("autoplayText"), xt = sn("autoplayTimeout"), D || (et = sn("edgePadding"), nt = sn("gutter"))), $e(Kt), it = un(), F && !$ || Kt || (jn(), F || (Ci(), i = !0)), (tt || $) && (St = _n(), Wt = Rt()), (e || tt) && (rt = sn("items"), ot = sn("slideBy"), (r = rt !== l) && (tt || $ || (Wt = Rt()), _e())), e && Kt !== s && (Kt ? Bn() : function () {
          if (!Jt) return;
          if (Mt.disabled = !1, V.className += Xt, $n(), ft) for (var t = Nt; t--;) I && Xi(G[t]), Xi(G[Lt - t - 1]);
          if (!I) for (var e = It, n = It + Q; e < n; e++) {
            var i = G[e],
              a = e < It + rt ? P : W;
            i.style.left = 100 * (e - It) / rt + "%", zi(i, a);
          }
          Nn(), Jt = !1;
        }()), Ut && (e || tt || $) && (_t = Tn()) !== c && (_t ? (ti(Zn(en(0))), Ln()) : (!function () {
          if (!Zt) return;
          et && D && (j.style.margin = "");
          if (Nt) for (var t = "tns-transparent", e = Nt; e--;) I && Wi(G[e], t), Wi(G[Lt - e - 1], t);
          Nn(), Zt = !1;
        }(), i = !0)), $e(Kt || _t), gt || (wt = Ct = !1), lt !== f && (lt ? Ui(O, ie) : _i(O, ie)), vt !== d && (vt ? xe ? Xi(xe) : (we && Xi(we), Ce && Xi(Ce)) : xe ? Qi(xe) : (we && Qi(we), Ce && Qi(Ce))), ht !== v && (ht ? (Xi(Ae), Ti()) : Qi(Ae)), mt !== p && (mt ? Ui(V, ae, H.preventScrollOnTouch) : _i(V, ae)), yt !== h && (yt ? Ui(V, re) : _i(V, re)), gt !== m && (gt ? (je && Xi(je), Pe || We || ci()) : (je && Qi(je), Pe && fi())), wt !== y && (wt ? Ui(V, ee) : _i(V, ee)), Ct !== g && (Ct ? Ui(O, ne) : _i(O, ne)), e) {
          if (tt === b && at === M || (i = !0), dt !== w && (dt || (j.style.height = "")), vt && pt !== C && (we.innerHTML = pt[0], Ce.innerHTML = pt[1]), je && bt !== T) {
            var N = gt ? 1 : 0,
              L = je.innerHTML,
              B = L.length - T[N].length;
            L.substring(B) === T[N] && (je.innerHTML = L.substring(0, B) + bt[N]);
          }
        } else at && (tt || $) && (i = !0);
        if ((r || tt && !$) && (Le = Mi(), Ti()), (a = It !== x) ? (Qt.emit("indexChanged", Ei()), i = !0) : r ? a || Wn() : (tt || $) && (Dn(), Vn(), Sn()), r && !I && function () {
          for (var t = It + Math.min(Q, rt), e = Lt; e--;) {
            var n = G[e];
            It <= e && e < t ? (zi(n, "tns-moving"), n.style.left = 100 * (e - It) / rt + "%", zi(n, P), Wi(n, W)) : n.style.left && (n.style.left = "", zi(n, W), Wi(n, P)), Wi(n, z);
          }
          setTimeout(function () {
            Ii(G, function (t) {
              Wi(t, "tns-moving");
            });
          }, 300);
        }(), !Kt && !_t) {
          if (e && !D && (et === A && nt === E || (j.style.cssText = cn(et, nt, tt, st, dt)), F)) {
            I && (V.style.width = fn(tt, nt, rt));
            var S = dn(tt, nt, rt) + vn(nt);
            u = Ri(o = Mt) - 1, "deleteRule" in o ? o.deleteRule(u) : o.removeRule(u), ki(Mt, "#" + Yt + " > .tns-item", S, Ri(Mt));
          }
          dt && Pn(), i && ($n(), Pt = It);
        }
        e && Qt.emit("newBreakpointEnd", Ei(t));
      }
    }
    function Tn() {
      if (!tt && !$) return Q <= (at ? rt - (rt - 1) / 2 : rt);
      var t = tt ? (tt + nt) * Q : N[Q],
        e = et ? it + 2 * et : it + nt;
      return at && (e -= tt ? (it - tt) / 2 : (it - (N[It + 1] - N[It] - nt)) / 2), t <= e;
    }
    function En() {
      for (var t in q = 0, k) (t = parseInt(t)) <= X && (q = t);
    }
    function An() {
      !gt && je && Qi(je), !ht && Ae && Qi(Ae), vt || (xe ? Qi(xe) : (we && Qi(we), Ce && Qi(Ce)));
    }
    function Nn() {
      gt && je && Xi(je), ht && Ae && Xi(Ae), vt && (xe ? Xi(xe) : (we && Xi(we), Ce && Xi(Ce)));
    }
    function Ln() {
      if (!Zt) {
        if (et && (j.style.margin = "0px"), Nt) for (var t = "tns-transparent", e = Nt; e--;) I && zi(G[e], t), zi(G[Lt - e - 1], t);
        An(), Zt = !0;
      }
    }
    function Bn() {
      if (!Jt) {
        if (Mt.disabled = !0, V.className = V.className.replace(Xt.substring(1), ""), Vi(V, ["style"]), ft) for (var t = Nt; t--;) I && Qi(G[t]), Qi(G[Lt - t - 1]);
        if (F && I || Vi(j, ["style"]), !I) for (var e = It, n = It + Q; e < n; e++) {
          var i = G[e];
          Vi(i, ["style"]), Wi(i, P), Wi(i, W);
        }
        An(), Jt = !0;
      }
    }
    function Sn() {
      var t = Hn();
      B.innerHTML !== t && (B.innerHTML = t);
    }
    function Hn() {
      var t = On(),
        e = t[0] + 1,
        n = t[1] + 1;
      return e === n ? e + "" : e + " to " + n;
    }
    function On(t) {
      null == t && (t = Zn());
      var n,
        i,
        a,
        r = It;
      if (at || et ? ($ || tt) && (i = -(parseFloat(t) + et), a = i + it + 2 * et) : $ && (i = N[It], a = i + it), $) N.forEach(function (t, e) {
        e < Lt && ((at || et) && t <= i + .5 && (r = e), .5 <= a - t && (n = e));
      });else {
        if (tt) {
          var e = tt + nt;
          at || et ? (r = Math.floor(i / e), n = Math.ceil(a / e - 1)) : n = r + Math.ceil(it / e) - 1;
        } else if (at || et) {
          var o = rt - 1;
          if (at ? (r -= o / 2, n = It + o / 2) : n = It + o, et) {
            var u = et * rt / it;
            r -= u, n += u;
          }
          r = Math.floor(r), n = Math.ceil(n);
        } else n = r + rt - 1;
        r = Math.max(r, 0), n = Math.min(n, Lt - 1);
      }
      return [r, n];
    }
    function Dn() {
      if (Tt && !Kt) {
        var t = On();
        t.push(Et), In.apply(null, t).forEach(function (t) {
          if (!Pi(t, pe)) {
            var e = {};
            e[s] = function (t) {
              t.stopPropagation();
            }, Ui(t, e), Ui(t, he), t.src = Fi(t, "data-src");
            var n = Fi(t, "data-srcset");
            n && (t.srcset = n), zi(t, "loading");
          }
        });
      }
    }
    function kn(t) {
      zi(t, "loaded"), Rn(t);
    }
    function Rn(t) {
      zi(t, pe), Wi(t, "loading"), _i(t, he);
    }
    function In(t, e, n) {
      var i = [];
      for (n || (n = "img"); t <= e;) Ii(G[t].querySelectorAll(n), function (t) {
        i.push(t);
      }), t++;
      return i;
    }
    function Pn() {
      var t = In.apply(null, On());
      Ai(function () {
        zn(t, Fn);
      });
    }
    function zn(n, t) {
      return L ? t() : (n.forEach(function (t, e) {
        !Tt && t.complete && Rn(t), Pi(t, pe) && n.splice(e, 1);
      }), n.length ? void Ai(function () {
        zn(n, t);
      }) : t());
    }
    function Wn() {
      Dn(), Vn(), Sn(), Kn(), function () {
        if (ht && (He = 0 <= Se ? Se : an(), Se = -1, He !== Oe)) {
          var t = Ee[Oe],
            e = Ee[He];
          ji(t, {
            tabindex: "-1",
            "aria-label": ke + (Oe + 1)
          }), Wi(t, De), ji(e, {
            "aria-label": ke + (He + 1) + Re
          }), Vi(e, "tabindex"), zi(e, De), Oe = He;
        }
      }();
    }
    function qn(t, e) {
      for (var n = [], i = t, a = Math.min(t + e, Lt); i < a; i++) n.push(G[i].offsetHeight);
      return Math.max.apply(null, n);
    }
    function Fn() {
      var t = dt ? qn(It, rt) : qn(Nt, Q),
        e = M || j;
      e.style.height !== t && (e.style.height = t + "px");
    }
    function jn() {
      N = [0];
      var n = F ? "left" : "top",
        i = F ? "right" : "bottom",
        a = G[0].getBoundingClientRect()[n];
      Ii(G, function (t, e) {
        e && N.push(t.getBoundingClientRect()[n] - a), e === Lt - 1 && N.push(t.getBoundingClientRect()[i] - a);
      });
    }
    function Vn() {
      var t = On(),
        n = t[0],
        i = t[1];
      Ii(G, function (t, e) {
        n <= e && e <= i ? qi(t, "aria-hidden") && (Vi(t, ["aria-hidden", "tabindex"]), zi(t, de)) : qi(t, "aria-hidden") || (ji(t, {
          "aria-hidden": "true",
          tabindex: "-1"
        }), Wi(t, de));
      });
    }
    function Gn(t) {
      return t.nodeName.toLowerCase();
    }
    function Qn(t) {
      return "button" === Gn(t);
    }
    function Xn(t) {
      return "true" === t.getAttribute("aria-disabled");
    }
    function Yn(t, e, n) {
      t ? e.disabled = n : e.setAttribute("aria-disabled", n.toString());
    }
    function Kn() {
      if (vt && !ct && !ft) {
        var t = ye ? we.disabled : Xn(we),
          e = ge ? Ce.disabled : Xn(Ce),
          n = It <= zt,
          i = !ct && Wt <= It;
        n && !t && Yn(ye, we, !0), !n && t && Yn(ye, we, !1), i && !e && Yn(ge, Ce, !0), !i && e && Yn(ge, Ce, !1);
      }
    }
    function Jn(t, e) {
      x && (t.style[x] = e);
    }
    function Un(t) {
      return null == t && (t = It), $ ? (it - (et ? nt : 0) - (N[t + 1] - N[t] - nt)) / 2 : tt ? (it - tt) / 2 : (rt - 1) / 2;
    }
    function _n() {
      var t = it + (et ? nt : 0) - (tt ? (tt + nt) * Lt : N[Lt]);
      return at && !ft && (t = tt ? -(tt + nt) * (Lt - 1) - Un() : Un(Lt - 1) - N[Lt - 1]), 0 < t && (t = 0), t;
    }
    function Zn(t) {
      var e;
      if (null == t && (t = It), F && !$) {
        if (tt) e = -(tt + nt) * t, at && (e += Un());else {
          var n = r ? Lt : rt;
          at && (t -= Un()), e = 100 * -t / n;
        }
      } else e = -N[t], at && $ && (e += Un());
      return Bt && (e = Math.max(e, St)), e += !F || $ || tt ? "px" : "%";
    }
    function $n(t) {
      Jn(V, "0s"), ti(t);
    }
    function ti(t) {
      null == t && (t = Zn()), V.style[Ot] = Dt + t + kt;
    }
    function ei(t, e, n, i) {
      var a = t + rt;
      ft || (a = Math.min(a, Lt));
      for (var r = t; r < a; r++) {
        var o = G[r];
        i || (o.style.left = 100 * (r - It) / rt + "%"), C && u && (o.style[u] = o.style[l] = C * (r - t) / 1e3 + "s"), Wi(o, e), zi(o, n), i && At.push(o);
      }
    }
    function ni(t, e) {
      Ht && _e(), (It !== Pt || e) && (Qt.emit("indexChanged", Ei()), Qt.emit("transitionStart", Ei()), dt && Pn(), Pe && t && 0 <= ["click", "keydown"].indexOf(t.type) && fi(), Vt = !0, Ze());
    }
    function ii(t) {
      return t.toLowerCase().replace(/-/g, "");
    }
    function ai(t) {
      if (I || Vt) {
        if (Qt.emit("transitionEnd", Ei(t)), !I && 0 < At.length) for (var e = 0; e < At.length; e++) {
          var n = At[e];
          n.style.left = "", l && u && (n.style[l] = "", n.style[u] = ""), Wi(n, z), zi(n, W);
        }
        if (!t || !I && t.target.parentNode === V || t.target === V && ii(t.propertyName) === ii(Ot)) {
          if (!Ht) {
            var i = It;
            _e(), It !== i && (Qt.emit("indexChanged", Ei()), $n());
          }
          "inner" === R && Qt.emit("innerLoaded", Ei()), Vt = !1, Pt = It;
        }
      }
    }
    function ri(t, e) {
      if (!_t) if ("prev" === t) oi(e, -1);else if ("next" === t) oi(e, 1);else {
        if (Vt) {
          if (qt) return;
          ai();
        }
        var n = nn(),
          i = 0;
        if ("first" === t ? i = -n : "last" === t ? i = I ? Q - rt - n : Q - 1 - n : ("number" != typeof t && (t = parseInt(t)), isNaN(t) || (e || (t = Math.max(0, Math.min(Q - 1, t))), i = t - n)), !I && i && Math.abs(i) < rt) {
          var a = 0 < i ? 1 : -1;
          i += zt <= It + i - Q ? Q * a : 2 * Q * a * -1;
        }
        It += i, I && ft && (It < zt && (It += Q), Wt < It && (It -= Q)), nn(It) !== nn(Pt) && ni(e);
      }
    }
    function oi(t, e) {
      if (Vt) {
        if (qt) return;
        ai();
      }
      var n;
      if (!e) {
        for (var i = hi(t = pi(t)); i !== xe && [we, Ce].indexOf(i) < 0;) i = i.parentNode;
        var a = [we, Ce].indexOf(i);
        0 <= a && (n = !0, e = 0 === a ? -1 : 1);
      }
      if (ct) {
        if (It === zt && -1 === e) return void ri("last", t);
        if (It === Wt && 1 === e) return void ri("first", t);
      }
      e && (It += ot * e, $ && (It = Math.floor(It)), ni(n || t && "keydown" === t.type ? t : null));
    }
    function ui() {
      Ie = setInterval(function () {
        oi(null, Fe);
      }, xt), Pe = !0;
    }
    function li() {
      clearInterval(Ie), Pe = !1;
    }
    function si(t, e) {
      ji(je, {
        "data-action": t
      }), je.innerHTML = Ge[0] + t + Ge[1] + e;
    }
    function ci() {
      ui(), je && si("stop", bt[1]);
    }
    function fi() {
      li(), je && si("start", bt[0]);
    }
    function di() {
      Pe ? (fi(), We = !0) : (ci(), We = !1);
    }
    function vi(t) {
      t.focus();
    }
    function pi(t) {
      return mi(t = t || m.event) ? t.changedTouches[0] : t;
    }
    function hi(t) {
      return t.target || m.event.srcElement;
    }
    function mi(t) {
      return 0 <= t.type.indexOf("touch");
    }
    function yi(t) {
      t.preventDefault ? t.preventDefault() : t.returnValue = !1;
    }
    function gi() {
      return a = Ke.y - Ye.y, r = Ke.x - Ye.x, t = Math.atan2(a, r) * (180 / Math.PI), e = Ft, n = !1, i = Math.abs(90 - Math.abs(t)), 90 - e <= i ? n = "horizontal" : i <= e && (n = "vertical"), n === H.axis;
      var t, e, n, i, a, r;
    }
    function xi(t) {
      if (Vt) {
        if (qt) return;
        ai();
      }
      gt && Pe && li(), Je = !0, Xe && (Ni(Xe), Xe = null);
      var e = pi(t);
      Qt.emit(mi(t) ? "touchStart" : "dragStart", Ei(t)), !mi(t) && 0 <= ["img", "a"].indexOf(Gn(hi(t))) && yi(t), Ke.x = Ye.x = e.clientX, Ke.y = Ye.y = e.clientY, I && (Qe = parseFloat(V.style[Ot].replace(Dt, "")), Jn(V, "0s"));
    }
    function bi(t) {
      if (Je) {
        var e = pi(t);
        Ke.x = e.clientX, Ke.y = e.clientY, I ? Xe || (Xe = Ai(function () {
          !function t(e) {
            if (!jt) return void (Je = !1);
            Ni(Xe);
            Je && (Xe = Ai(function () {
              t(e);
            }));
            "?" === jt && (jt = gi());
            if (jt) {
              !me && mi(e) && (me = !0);
              try {
                e.type && Qt.emit(mi(e) ? "touchMove" : "dragMove", Ei(e));
              } catch (t) {}
              var n = Qe,
                i = Ue(Ke, Ye);
              if (!F || tt || $) n += i, n += "px";else {
                var a = r ? i * rt * 100 / ((it + nt) * Lt) : 100 * i / (it + nt);
                n += a, n += "%";
              }
              V.style[Ot] = Dt + n + kt;
            }
          }(t);
        })) : ("?" === jt && (jt = gi()), jt && (me = !0)), ("boolean" != typeof t.cancelable || t.cancelable) && me && t.preventDefault();
      }
    }
    function wi(i) {
      if (Je) {
        Xe && (Ni(Xe), Xe = null), I && Jn(V, ""), Je = !1;
        var t = pi(i);
        Ke.x = t.clientX, Ke.y = t.clientY;
        var a = Ue(Ke, Ye);
        if (Math.abs(a)) {
          if (!mi(i)) {
            var n = hi(i);
            Ui(n, {
              click: function t(e) {
                yi(e), _i(n, {
                  click: t
                });
              }
            });
          }
          I ? Xe = Ai(function () {
            if (F && !$) {
              var t = -a * rt / (it + nt);
              t = 0 < a ? Math.floor(t) : Math.ceil(t), It += t;
            } else {
              var e = -(Qe + a);
              if (e <= 0) It = zt;else if (e >= N[Lt - 1]) It = Wt;else for (var n = 0; n < Lt && e >= N[n];) e > N[It = n] && a < 0 && (It += 1), n++;
            }
            ni(i, a), Qt.emit(mi(i) ? "touchEnd" : "dragEnd", Ei(i));
          }) : jt && oi(i, 0 < a ? -1 : 1);
        }
      }
      "auto" === H.preventScrollOnTouch && (me = !1), Ft && (jt = "?"), gt && !Pe && ui();
    }
    function Ci() {
      (M || j).style.height = N[It + rt] - N[It] + "px";
    }
    function Mi() {
      var t = tt ? (tt + nt) * Q / it : Q / rt;
      return Math.min(Math.ceil(t), Q);
    }
    function Ti() {
      if (ht && !le && Le !== Be) {
        var t = Be,
          e = Le,
          n = Xi;
        for (Le < Be && (t = Le, e = Be, n = Qi); t < e;) n(Ee[t]), t++;
        Be = Le;
      }
    }
    function Ei(t) {
      return {
        container: V,
        slideItems: G,
        navContainer: Ae,
        navItems: Ee,
        controlsContainer: xe,
        hasControls: oe,
        prevButton: we,
        nextButton: Ce,
        items: rt,
        slideBy: ot,
        cloneCount: Nt,
        slideCount: Q,
        slideCountNew: Lt,
        index: It,
        indexCached: Pt,
        displayIndex: tn(),
        navCurrentIndex: He,
        navCurrentIndexCached: Oe,
        pages: Le,
        pagesCached: Be,
        sheet: Mt,
        isOn: Y,
        event: t || {}
      };
    }
    f && console.warn("No slides found in", H.container);
  };
  return $i;
}();

/***/ }),

/***/ "./assets/js/web-animations.min.js":
/*!*****************************************!*\
  !*** ./assets/js/web-animations.min.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
__webpack_require__(/*! core-js/modules/es.array.fill.js */ "./node_modules/core-js/modules/es.array.fill.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.get-own-property-names.js */ "./node_modules/core-js/modules/es.object.get-own-property-names.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.array.last-index-of.js */ "./node_modules/core-js/modules/es.array.last-index-of.js");
__webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.date.now.js */ "./node_modules/core-js/modules/es.date.now.js");
__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.array.reduce.js */ "./node_modules/core-js/modules/es.array.reduce.js");
__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
__webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");
__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");
__webpack_require__(/*! core-js/modules/es.string.search.js */ "./node_modules/core-js/modules/es.string.search.js");
// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//     See the License for the specific language governing permissions and
// limitations under the License.

!function (a, b) {
  var c = {},
    d = {},
    e = {},
    f = null;
  !function (a, b) {
    function c(a) {
      if ("number" == typeof a) return a;
      var b = {};
      for (var c in a) b[c] = a[c];
      return b;
    }
    function d() {
      this._delay = 0, this._endDelay = 0, this._fill = "none", this._iterationStart = 0, this._iterations = 1, this._duration = 0, this._playbackRate = 1, this._direction = "normal", this._easing = "linear", this._easingFunction = x;
    }
    function e() {
      return a.isDeprecated("Invalid timing inputs", "2016-03-02", "TypeError exceptions will be thrown instead.", !0);
    }
    function f(b, c, e) {
      var f = new d();
      return c && (f.fill = "both", f.duration = "auto"), "number" != typeof b || isNaN(b) ? void 0 !== b && Object.getOwnPropertyNames(b).forEach(function (c) {
        if ("auto" != b[c]) {
          if (("number" == typeof f[c] || "duration" == c) && ("number" != typeof b[c] || isNaN(b[c]))) return;
          if ("fill" == c && v.indexOf(b[c]) == -1) return;
          if ("direction" == c && w.indexOf(b[c]) == -1) return;
          if ("playbackRate" == c && 1 !== b[c] && a.isDeprecated("AnimationEffectTiming.playbackRate", "2014-11-28", "Use Animation.playbackRate instead.")) return;
          f[c] = b[c];
        }
      }) : f.duration = b, f;
    }
    function g(a) {
      return "number" == typeof a && (a = isNaN(a) ? {
        duration: 0
      } : {
        duration: a
      }), a;
    }
    function h(b, c) {
      return b = a.numericTimingToObject(b), f(b, c);
    }
    function i(a, b, c, d) {
      return a < 0 || a > 1 || c < 0 || c > 1 ? x : function (e) {
        function f(a, b, c) {
          return 3 * a * (1 - c) * (1 - c) * c + 3 * b * (1 - c) * c * c + c * c * c;
        }
        if (e <= 0) {
          var g = 0;
          return a > 0 ? g = b / a : !b && c > 0 && (g = d / c), g * e;
        }
        if (e >= 1) {
          var h = 0;
          return c < 1 ? h = (d - 1) / (c - 1) : 1 == c && a < 1 && (h = (b - 1) / (a - 1)), 1 + h * (e - 1);
        }
        for (var i = 0, j = 1; i < j;) {
          var k = (i + j) / 2,
            l = f(a, c, k);
          if (Math.abs(e - l) < 1e-5) return f(b, d, k);
          l < e ? i = k : j = k;
        }
        return f(b, d, k);
      };
    }
    function j(a, b) {
      return function (c) {
        if (c >= 1) return 1;
        var d = 1 / a;
        return c += b * d, c - c % d;
      };
    }
    function k(a) {
      C || (C = document.createElement("div").style), C.animationTimingFunction = "", C.animationTimingFunction = a;
      var b = C.animationTimingFunction;
      if ("" == b && e()) throw new TypeError(a + " is not a valid value for easing");
      return b;
    }
    function l(a) {
      if ("linear" == a) return x;
      var b = E.exec(a);
      if (b) return i.apply(this, b.slice(1).map(Number));
      var c = F.exec(a);
      if (c) return j(Number(c[1]), {
        start: y,
        middle: z,
        end: A
      }[c[2]]);
      var d = B[a];
      return d ? d : x;
    }
    function m(a) {
      return Math.abs(n(a) / a.playbackRate);
    }
    function n(a) {
      return 0 === a.duration || 0 === a.iterations ? 0 : a.duration * a.iterations;
    }
    function o(a, b, c) {
      if (null == b) return G;
      var d = c.delay + a + c.endDelay;
      return b < Math.min(c.delay, d) ? H : b >= Math.min(c.delay + a, d) ? I : J;
    }
    function p(a, b, c, d, e) {
      switch (d) {
        case H:
          return "backwards" == b || "both" == b ? 0 : null;
        case J:
          return c - e;
        case I:
          return "forwards" == b || "both" == b ? a : null;
        case G:
          return null;
      }
    }
    function q(a, b, c, d, e) {
      var f = e;
      return 0 === a ? b !== H && (f += c) : f += d / a, f;
    }
    function r(a, b, c, d, e, f) {
      var g = a === 1 / 0 ? b % 1 : a % 1;
      return 0 !== g || c !== I || 0 === d || 0 === e && 0 !== f || (g = 1), g;
    }
    function s(a, b, c, d) {
      return a === I && b === 1 / 0 ? 1 / 0 : 1 === c ? Math.floor(d) - 1 : Math.floor(d);
    }
    function t(a, b, c) {
      var d = a;
      if ("normal" !== a && "reverse" !== a) {
        var e = b;
        "alternate-reverse" === a && (e += 1), d = "normal", e !== 1 / 0 && e % 2 !== 0 && (d = "reverse");
      }
      return "normal" === d ? c : 1 - c;
    }
    function u(a, b, c) {
      var d = o(a, b, c),
        e = p(a, c.fill, b, d, c.delay);
      if (null === e) return null;
      var f = q(c.duration, d, c.iterations, e, c.iterationStart),
        g = r(f, c.iterationStart, d, c.iterations, e, c.duration),
        h = s(d, c.iterations, g, f),
        i = t(c.direction, h, g);
      return c._easingFunction(i);
    }
    var v = "backwards|forwards|both|none".split("|"),
      w = "reverse|alternate|alternate-reverse".split("|"),
      x = function x(a) {
        return a;
      };
    d.prototype = {
      _setMember: function _setMember(b, c) {
        this["_" + b] = c, this._effect && (this._effect._timingInput[b] = c, this._effect._timing = a.normalizeTimingInput(this._effect._timingInput), this._effect.activeDuration = a.calculateActiveDuration(this._effect._timing), this._effect._animation && this._effect._animation._rebuildUnderlyingAnimation());
      },
      get playbackRate() {
        return this._playbackRate;
      },
      set delay(a) {
        this._setMember("delay", a);
      },
      get delay() {
        return this._delay;
      },
      set endDelay(a) {
        this._setMember("endDelay", a);
      },
      get endDelay() {
        return this._endDelay;
      },
      set fill(a) {
        this._setMember("fill", a);
      },
      get fill() {
        return this._fill;
      },
      set iterationStart(a) {
        if ((isNaN(a) || a < 0) && e()) throw new TypeError("iterationStart must be a non-negative number, received: " + timing.iterationStart);
        this._setMember("iterationStart", a);
      },
      get iterationStart() {
        return this._iterationStart;
      },
      set duration(a) {
        if ("auto" != a && (isNaN(a) || a < 0) && e()) throw new TypeError("duration must be non-negative or auto, received: " + a);
        this._setMember("duration", a);
      },
      get duration() {
        return this._duration;
      },
      set direction(a) {
        this._setMember("direction", a);
      },
      get direction() {
        return this._direction;
      },
      set easing(a) {
        this._easingFunction = l(k(a)), this._setMember("easing", a);
      },
      get easing() {
        return this._easing;
      },
      set iterations(a) {
        if ((isNaN(a) || a < 0) && e()) throw new TypeError("iterations must be non-negative, received: " + a);
        this._setMember("iterations", a);
      },
      get iterations() {
        return this._iterations;
      }
    };
    var y = 1,
      z = .5,
      A = 0,
      B = {
        ease: i(.25, .1, .25, 1),
        "ease-in": i(.42, 0, 1, 1),
        "ease-out": i(0, 0, .58, 1),
        "ease-in-out": i(.42, 0, .58, 1),
        "step-start": j(1, y),
        "step-middle": j(1, z),
        "step-end": j(1, A)
      },
      C = null,
      D = "\\s*(-?\\d+\\.?\\d*|-?\\.\\d+)\\s*",
      E = new RegExp("cubic-bezier\\(" + D + "," + D + "," + D + "," + D + "\\)"),
      F = /steps\(\s*(\d+)\s*,\s*(start|middle|end)\s*\)/,
      G = 0,
      H = 1,
      I = 2,
      J = 3;
    a.cloneTimingInput = c, a.makeTiming = f, a.numericTimingToObject = g, a.normalizeTimingInput = h, a.calculateActiveDuration = m, a.calculateIterationProgress = u, a.calculatePhase = o, a.normalizeEasing = k, a.parseEasingFunction = l;
  }(c, f), function (a, b) {
    function c(a, b) {
      return a in k ? k[a][b] || b : b;
    }
    function d(a) {
      return "display" === a || 0 === a.lastIndexOf("animation", 0) || 0 === a.lastIndexOf("transition", 0);
    }
    function e(a, b, e) {
      if (!d(a)) {
        var f = h[a];
        if (f) {
          i.style[a] = b;
          for (var g in f) {
            var j = f[g],
              k = i.style[j];
            e[j] = c(j, k);
          }
        } else e[a] = c(a, b);
      }
    }
    function f(a) {
      var b = [];
      for (var c in a) if (!(c in ["easing", "offset", "composite"])) {
        var d = a[c];
        Array.isArray(d) || (d = [d]);
        for (var e, f = d.length, g = 0; g < f; g++) e = {}, "offset" in a ? e.offset = a.offset : 1 == f ? e.offset = 1 : e.offset = g / (f - 1), "easing" in a && (e.easing = a.easing), "composite" in a && (e.composite = a.composite), e[c] = d[g], b.push(e);
      }
      return b.sort(function (a, b) {
        return a.offset - b.offset;
      }), b;
    }
    function g(b) {
      function c() {
        var a = d.length;
        null == d[a - 1].offset && (d[a - 1].offset = 1), a > 1 && null == d[0].offset && (d[0].offset = 0);
        for (var b = 0, c = d[0].offset, e = 1; e < a; e++) {
          var f = d[e].offset;
          if (null != f) {
            for (var g = 1; g < e - b; g++) d[b + g].offset = c + (f - c) * g / (e - b);
            b = e, c = f;
          }
        }
      }
      if (null == b) return [];
      window.Symbol && Symbol.iterator && Array.prototype.from && b[Symbol.iterator] && (b = Array.from(b)), Array.isArray(b) || (b = f(b));
      for (var d = b.map(function (b) {
          var c = {};
          for (var d in b) {
            var f = b[d];
            if ("offset" == d) {
              if (null != f) {
                if (f = Number(f), !isFinite(f)) throw new TypeError("Keyframe offsets must be numbers.");
                if (f < 0 || f > 1) throw new TypeError("Keyframe offsets must be between 0 and 1.");
              }
            } else if ("composite" == d) {
              if ("add" == f || "accumulate" == f) throw {
                type: DOMException.NOT_SUPPORTED_ERR,
                name: "NotSupportedError",
                message: "add compositing is not supported"
              };
              if ("replace" != f) throw new TypeError("Invalid composite mode " + f + ".");
            } else f = "easing" == d ? a.normalizeEasing(f) : "" + f;
            e(d, f, c);
          }
          return void 0 == c.offset && (c.offset = null), void 0 == c.easing && (c.easing = "linear"), c;
        }), g = !0, h = -(1 / 0), i = 0; i < d.length; i++) {
        var j = d[i].offset;
        if (null != j) {
          if (j < h) throw new TypeError("Keyframes are not loosely sorted by offset. Sort or specify offsets.");
          h = j;
        } else g = !1;
      }
      return d = d.filter(function (a) {
        return a.offset >= 0 && a.offset <= 1;
      }), g || c(), d;
    }
    var h = {
        background: ["backgroundImage", "backgroundPosition", "backgroundSize", "backgroundRepeat", "backgroundAttachment", "backgroundOrigin", "backgroundClip", "backgroundColor"],
        border: ["borderTopColor", "borderTopStyle", "borderTopWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderBottom: ["borderBottomWidth", "borderBottomStyle", "borderBottomColor"],
        borderColor: ["borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor"],
        borderLeft: ["borderLeftWidth", "borderLeftStyle", "borderLeftColor"],
        borderRadius: ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"],
        borderRight: ["borderRightWidth", "borderRightStyle", "borderRightColor"],
        borderTop: ["borderTopWidth", "borderTopStyle", "borderTopColor"],
        borderWidth: ["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"],
        flex: ["flexGrow", "flexShrink", "flexBasis"],
        font: ["fontFamily", "fontSize", "fontStyle", "fontVariant", "fontWeight", "lineHeight"],
        margin: ["marginTop", "marginRight", "marginBottom", "marginLeft"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        padding: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"]
      },
      i = document.createElementNS("http://www.w3.org/1999/xhtml", "div"),
      j = {
        thin: "1px",
        medium: "3px",
        thick: "5px"
      },
      k = {
        borderBottomWidth: j,
        borderLeftWidth: j,
        borderRightWidth: j,
        borderTopWidth: j,
        fontSize: {
          "xx-small": "60%",
          "x-small": "75%",
          small: "89%",
          medium: "100%",
          large: "120%",
          "x-large": "150%",
          "xx-large": "200%"
        },
        fontWeight: {
          normal: "400",
          bold: "700"
        },
        outlineWidth: j,
        textShadow: {
          none: "0px 0px 0px transparent"
        },
        boxShadow: {
          none: "0px 0px 0px 0px transparent"
        }
      };
    a.convertToArrayForm = f, a.normalizeKeyframes = g;
  }(c, f), function (a) {
    var b = {};
    a.isDeprecated = function (a, c, d, e) {
      var f = e ? "are" : "is",
        g = new Date(),
        h = new Date(c);
      return h.setMonth(h.getMonth() + 3), !(g < h && (a in b || console.warn("Web Animations: " + a + " " + f + " deprecated and will stop working on " + h.toDateString() + ". " + d), b[a] = !0, 1));
    }, a.deprecated = function (b, c, d, e) {
      var f = e ? "are" : "is";
      if (a.isDeprecated(b, c, d, e)) throw new Error(b + " " + f + " no longer supported. " + d);
    };
  }(c), function () {
    if (document.documentElement.animate) {
      var a = document.documentElement.animate([], 0),
        b = !0;
      if (a && (b = !1, "play|currentTime|pause|reverse|playbackRate|cancel|finish|startTime|playState".split("|").forEach(function (c) {
        void 0 === a[c] && (b = !0);
      })), !b) return;
    }
    !function (a, b, c) {
      function d(a) {
        for (var b = {}, c = 0; c < a.length; c++) for (var d in a[c]) if ("offset" != d && "easing" != d && "composite" != d) {
          var e = {
            offset: a[c].offset,
            easing: a[c].easing,
            value: a[c][d]
          };
          b[d] = b[d] || [], b[d].push(e);
        }
        for (var f in b) {
          var g = b[f];
          if (0 != g[0].offset || 1 != g[g.length - 1].offset) throw {
            type: DOMException.NOT_SUPPORTED_ERR,
            name: "NotSupportedError",
            message: "Partial keyframes are not supported"
          };
        }
        return b;
      }
      function e(c) {
        var d = [];
        for (var e in c) for (var f = c[e], g = 0; g < f.length - 1; g++) {
          var h = g,
            i = g + 1,
            j = f[h].offset,
            k = f[i].offset,
            l = j,
            m = k;
          0 == g && (l = -(1 / 0), 0 == k && (i = h)), g == f.length - 2 && (m = 1 / 0, 1 == j && (h = i)), d.push({
            applyFrom: l,
            applyTo: m,
            startOffset: f[h].offset,
            endOffset: f[i].offset,
            easingFunction: a.parseEasingFunction(f[h].easing),
            property: e,
            interpolation: b.propertyInterpolation(e, f[h].value, f[i].value)
          });
        }
        return d.sort(function (a, b) {
          return a.startOffset - b.startOffset;
        }), d;
      }
      b.convertEffectInput = function (c) {
        var f = a.normalizeKeyframes(c),
          g = d(f),
          h = e(g);
        return function (a, c) {
          if (null != c) h.filter(function (a) {
            return c >= a.applyFrom && c < a.applyTo;
          }).forEach(function (d) {
            var e = c - d.startOffset,
              f = d.endOffset - d.startOffset,
              g = 0 == f ? 0 : d.easingFunction(e / f);
            b.apply(a, d.property, d.interpolation(g));
          });else for (var d in g) "offset" != d && "easing" != d && "composite" != d && b.clear(a, d);
        };
      };
    }(c, d, f), function (a, b, c) {
      function d(a) {
        return a.replace(/-(.)/g, function (a, b) {
          return b.toUpperCase();
        });
      }
      function e(a, b, c) {
        h[c] = h[c] || [], h[c].push([a, b]);
      }
      function f(a, b, c) {
        for (var f = 0; f < c.length; f++) {
          var g = c[f];
          e(a, b, d(g));
        }
      }
      function g(c, e, f) {
        var g = c;
        /-/.test(c) && !a.isDeprecated("Hyphenated property names", "2016-03-22", "Use camelCase instead.", !0) && (g = d(c)), "initial" != e && "initial" != f || ("initial" == e && (e = i[g]), "initial" == f && (f = i[g]));
        for (var j = e == f ? [] : h[g], k = 0; j && k < j.length; k++) {
          var l = j[k][0](e),
            m = j[k][0](f);
          if (void 0 !== l && void 0 !== m) {
            var n = j[k][1](l, m);
            if (n) {
              var o = b.Interpolation.apply(null, n);
              return function (a) {
                return 0 == a ? e : 1 == a ? f : o(a);
              };
            }
          }
        }
        return b.Interpolation(!1, !0, function (a) {
          return a ? f : e;
        });
      }
      var h = {};
      b.addPropertiesHandler = f;
      var i = {
        backgroundColor: "transparent",
        backgroundPosition: "0% 0%",
        borderBottomColor: "currentColor",
        borderBottomLeftRadius: "0px",
        borderBottomRightRadius: "0px",
        borderBottomWidth: "3px",
        borderLeftColor: "currentColor",
        borderLeftWidth: "3px",
        borderRightColor: "currentColor",
        borderRightWidth: "3px",
        borderSpacing: "2px",
        borderTopColor: "currentColor",
        borderTopLeftRadius: "0px",
        borderTopRightRadius: "0px",
        borderTopWidth: "3px",
        bottom: "auto",
        clip: "rect(0px, 0px, 0px, 0px)",
        color: "black",
        fontSize: "100%",
        fontWeight: "400",
        height: "auto",
        left: "auto",
        letterSpacing: "normal",
        lineHeight: "120%",
        marginBottom: "0px",
        marginLeft: "0px",
        marginRight: "0px",
        marginTop: "0px",
        maxHeight: "none",
        maxWidth: "none",
        minHeight: "0px",
        minWidth: "0px",
        opacity: "1.0",
        outlineColor: "invert",
        outlineOffset: "0px",
        outlineWidth: "3px",
        paddingBottom: "0px",
        paddingLeft: "0px",
        paddingRight: "0px",
        paddingTop: "0px",
        right: "auto",
        textIndent: "0px",
        textShadow: "0px 0px 0px transparent",
        top: "auto",
        transform: "",
        verticalAlign: "0px",
        visibility: "visible",
        width: "auto",
        wordSpacing: "normal",
        zIndex: "auto"
      };
      b.propertyInterpolation = g;
    }(c, d, f), function (a, b, c) {
      function d(b) {
        var c = a.calculateActiveDuration(b),
          d = function d(_d) {
            return a.calculateIterationProgress(c, _d, b);
          };
        return d._totalDuration = b.delay + c + b.endDelay, d;
      }
      b.KeyframeEffect = function (c, e, f, g) {
        var h,
          i = d(a.normalizeTimingInput(f)),
          j = b.convertEffectInput(e),
          k = function k() {
            j(c, h);
          };
        return k._update = function (a) {
          return h = i(a), null !== h;
        }, k._clear = function () {
          j(c, null);
        }, k._hasSameTarget = function (a) {
          return c === a;
        }, k._target = c, k._totalDuration = i._totalDuration, k._id = g, k;
      }, b.NullEffect = function (a) {
        var b = function b() {
          a && (a(), a = null);
        };
        return b._update = function () {
          return null;
        }, b._totalDuration = 0, b._hasSameTarget = function () {
          return !1;
        }, b;
      };
    }(c, d, f), function (a, b) {
      function c(a, b, c) {
        c.enumerable = !0, c.configurable = !0, Object.defineProperty(a, b, c);
      }
      function d(a) {
        this._surrogateStyle = document.createElementNS("http://www.w3.org/1999/xhtml", "div").style, this._style = a.style, this._length = 0, this._isAnimatedProperty = {};
        for (var b = 0; b < this._style.length; b++) {
          var c = this._style[b];
          this._surrogateStyle[c] = this._style[c];
        }
        this._updateIndices();
      }
      function e(a) {
        if (!a._webAnimationsPatchedStyle) {
          var b = new d(a);
          try {
            c(a, "style", {
              get: function get() {
                return b;
              }
            });
          } catch (b) {
            a.style._set = function (b, c) {
              a.style[b] = c;
            }, a.style._clear = function (b) {
              a.style[b] = "";
            };
          }
          a._webAnimationsPatchedStyle = a.style;
        }
      }
      var f = {
          cssText: 1,
          length: 1,
          parentRule: 1
        },
        g = {
          getPropertyCSSValue: 1,
          getPropertyPriority: 1,
          getPropertyValue: 1,
          item: 1,
          removeProperty: 1,
          setProperty: 1
        },
        h = {
          removeProperty: 1,
          setProperty: 1
        };
      d.prototype = {
        get cssText() {
          return this._surrogateStyle.cssText;
        },
        set cssText(a) {
          for (var b = {}, c = 0; c < this._surrogateStyle.length; c++) b[this._surrogateStyle[c]] = !0;
          this._surrogateStyle.cssText = a, this._updateIndices();
          for (var c = 0; c < this._surrogateStyle.length; c++) b[this._surrogateStyle[c]] = !0;
          for (var d in b) this._isAnimatedProperty[d] || this._style.setProperty(d, this._surrogateStyle.getPropertyValue(d));
        },
        get length() {
          return this._surrogateStyle.length;
        },
        get parentRule() {
          return this._style.parentRule;
        },
        _updateIndices: function _updateIndices() {
          for (; this._length < this._surrogateStyle.length;) Object.defineProperty(this, this._length, {
            configurable: !0,
            enumerable: !1,
            get: function (a) {
              return function () {
                return this._surrogateStyle[a];
              };
            }(this._length)
          }), this._length++;
          for (; this._length > this._surrogateStyle.length;) this._length--, Object.defineProperty(this, this._length, {
            configurable: !0,
            enumerable: !1,
            value: void 0
          });
        },
        _set: function _set(a, b) {
          this._style[a] = b, this._isAnimatedProperty[a] = !0;
        },
        _clear: function _clear(a) {
          this._style[a] = this._surrogateStyle[a], delete this._isAnimatedProperty[a];
        }
      };
      for (var i in g) d.prototype[i] = function (a, b) {
        return function () {
          var c = this._surrogateStyle[a].apply(this._surrogateStyle, arguments);
          return b && (this._isAnimatedProperty[arguments[0]] || this._style[a].apply(this._style, arguments), this._updateIndices()), c;
        };
      }(i, i in h);
      for (var j in document.documentElement.style) j in f || j in g || !function (a) {
        c(d.prototype, a, {
          get: function get() {
            return this._surrogateStyle[a];
          },
          set: function set(b) {
            this._surrogateStyle[a] = b, this._updateIndices(), this._isAnimatedProperty[a] || (this._style[a] = b);
          }
        });
      }(j);
      a.apply = function (b, c, d) {
        e(b), b.style._set(a.propertyName(c), d);
      }, a.clear = function (b, c) {
        b._webAnimationsPatchedStyle && b.style._clear(a.propertyName(c));
      };
    }(d, f), function (a) {
      window.Element.prototype.animate = function (b, c) {
        var d = "";
        return c && c.id && (d = c.id), a.timeline._play(a.KeyframeEffect(this, b, c, d));
      };
    }(d), function (a, b) {
      function c(a, b, d) {
        if ("number" == typeof a && "number" == typeof b) return a * (1 - d) + b * d;
        if ("boolean" == typeof a && "boolean" == typeof b) return d < .5 ? a : b;
        if (a.length == b.length) {
          for (var e = [], f = 0; f < a.length; f++) e.push(c(a[f], b[f], d));
          return e;
        }
        throw "Mismatched interpolation arguments " + a + ":" + b;
      }
      a.Interpolation = function (a, b, d) {
        return function (e) {
          return d(c(a, b, e));
        };
      };
    }(d, f), function (a, b) {
      function c(a, b, c) {
        return Math.max(Math.min(a, c), b);
      }
      function d(b, d, e) {
        var f = a.dot(b, d);
        f = c(f, -1, 1);
        var g = [];
        if (1 === f) g = b;else for (var h = Math.acos(f), i = 1 * Math.sin(e * h) / Math.sqrt(1 - f * f), j = 0; j < 4; j++) g.push(b[j] * (Math.cos(e * h) - f * i) + d[j] * i);
        return g;
      }
      var e = function () {
        function a(a, b) {
          for (var c = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], d = 0; d < 4; d++) for (var e = 0; e < 4; e++) for (var f = 0; f < 4; f++) c[d][e] += b[d][f] * a[f][e];
          return c;
        }
        function b(a) {
          return 0 == a[0][2] && 0 == a[0][3] && 0 == a[1][2] && 0 == a[1][3] && 0 == a[2][0] && 0 == a[2][1] && 1 == a[2][2] && 0 == a[2][3] && 0 == a[3][2] && 1 == a[3][3];
        }
        function c(c, d, e, f, g) {
          for (var h = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], i = 0; i < 4; i++) h[i][3] = g[i];
          for (var i = 0; i < 3; i++) for (var j = 0; j < 3; j++) h[3][i] += c[j] * h[j][i];
          var k = f[0],
            l = f[1],
            m = f[2],
            n = f[3],
            o = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
          o[0][0] = 1 - 2 * (l * l + m * m), o[0][1] = 2 * (k * l - m * n), o[0][2] = 2 * (k * m + l * n), o[1][0] = 2 * (k * l + m * n), o[1][1] = 1 - 2 * (k * k + m * m), o[1][2] = 2 * (l * m - k * n), o[2][0] = 2 * (k * m - l * n), o[2][1] = 2 * (l * m + k * n), o[2][2] = 1 - 2 * (k * k + l * l), h = a(h, o);
          var p = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
          e[2] && (p[2][1] = e[2], h = a(h, p)), e[1] && (p[2][1] = 0, p[2][0] = e[0], h = a(h, p)), e[0] && (p[2][0] = 0, p[1][0] = e[0], h = a(h, p));
          for (var i = 0; i < 3; i++) for (var j = 0; j < 3; j++) h[i][j] *= d[i];
          return b(h) ? [h[0][0], h[0][1], h[1][0], h[1][1], h[3][0], h[3][1]] : h[0].concat(h[1], h[2], h[3]);
        }
        return c;
      }();
      a.composeMatrix = e, a.quat = d;
    }(d, f), function (a, b, c) {
      a.sequenceNumber = 0;
      var d = function d(a, b, c) {
        this.target = a, this.currentTime = b, this.timelineTime = c, this.type = "finish", this.bubbles = !1, this.cancelable = !1, this.currentTarget = a, this.defaultPrevented = !1, this.eventPhase = Event.AT_TARGET, this.timeStamp = Date.now();
      };
      b.Animation = function (b) {
        this.id = "", b && b._id && (this.id = b._id), this._sequenceNumber = a.sequenceNumber++, this._currentTime = 0, this._startTime = null, this._paused = !1, this._playbackRate = 1, this._inTimeline = !0, this._finishedFlag = !0, this.onfinish = null, this._finishHandlers = [], this._effect = b, this._inEffect = this._effect._update(0), this._idle = !0, this._currentTimePending = !1;
      }, b.Animation.prototype = {
        _ensureAlive: function _ensureAlive() {
          this.playbackRate < 0 && 0 === this.currentTime ? this._inEffect = this._effect._update(-1) : this._inEffect = this._effect._update(this.currentTime), this._inTimeline || !this._inEffect && this._finishedFlag || (this._inTimeline = !0, b.timeline._animations.push(this));
        },
        _tickCurrentTime: function _tickCurrentTime(a, b) {
          a != this._currentTime && (this._currentTime = a, this._isFinished && !b && (this._currentTime = this._playbackRate > 0 ? this._totalDuration : 0), this._ensureAlive());
        },
        get currentTime() {
          return this._idle || this._currentTimePending ? null : this._currentTime;
        },
        set currentTime(a) {
          a = +a, isNaN(a) || (b.restart(), this._paused || null == this._startTime || (this._startTime = this._timeline.currentTime - a / this._playbackRate), this._currentTimePending = !1, this._currentTime != a && (this._idle && (this._idle = !1, this._paused = !0), this._tickCurrentTime(a, !0), b.applyDirtiedAnimation(this)));
        },
        get startTime() {
          return this._startTime;
        },
        set startTime(a) {
          a = +a, isNaN(a) || this._paused || this._idle || (this._startTime = a, this._tickCurrentTime((this._timeline.currentTime - this._startTime) * this.playbackRate), b.applyDirtiedAnimation(this));
        },
        get playbackRate() {
          return this._playbackRate;
        },
        set playbackRate(a) {
          if (a != this._playbackRate) {
            var c = this.currentTime;
            this._playbackRate = a, this._startTime = null, "paused" != this.playState && "idle" != this.playState && (this._finishedFlag = !1, this._idle = !1, this._ensureAlive(), b.applyDirtiedAnimation(this)), null != c && (this.currentTime = c);
          }
        },
        get _isFinished() {
          return !this._idle && (this._playbackRate > 0 && this._currentTime >= this._totalDuration || this._playbackRate < 0 && this._currentTime <= 0);
        },
        get _totalDuration() {
          return this._effect._totalDuration;
        },
        get playState() {
          return this._idle ? "idle" : null == this._startTime && !this._paused && 0 != this.playbackRate || this._currentTimePending ? "pending" : this._paused ? "paused" : this._isFinished ? "finished" : "running";
        },
        _rewind: function _rewind() {
          if (this._playbackRate >= 0) this._currentTime = 0;else {
            if (!(this._totalDuration < 1 / 0)) throw new DOMException("Unable to rewind negative playback rate animation with infinite duration", "InvalidStateError");
            this._currentTime = this._totalDuration;
          }
        },
        play: function play() {
          this._paused = !1, (this._isFinished || this._idle) && (this._rewind(), this._startTime = null), this._finishedFlag = !1, this._idle = !1, this._ensureAlive(), b.applyDirtiedAnimation(this);
        },
        pause: function pause() {
          this._isFinished || this._paused || this._idle ? this._idle && (this._rewind(), this._idle = !1) : this._currentTimePending = !0, this._startTime = null, this._paused = !0;
        },
        finish: function finish() {
          this._idle || (this.currentTime = this._playbackRate > 0 ? this._totalDuration : 0, this._startTime = this._totalDuration - this.currentTime, this._currentTimePending = !1, b.applyDirtiedAnimation(this));
        },
        cancel: function cancel() {
          this._inEffect && (this._inEffect = !1, this._idle = !0, this._paused = !1, this._isFinished = !0, this._finishedFlag = !0, this._currentTime = 0, this._startTime = null, this._effect._update(null), b.applyDirtiedAnimation(this));
        },
        reverse: function reverse() {
          this.playbackRate *= -1, this.play();
        },
        addEventListener: function addEventListener(a, b) {
          "function" == typeof b && "finish" == a && this._finishHandlers.push(b);
        },
        removeEventListener: function removeEventListener(a, b) {
          if ("finish" == a) {
            var c = this._finishHandlers.indexOf(b);
            c >= 0 && this._finishHandlers.splice(c, 1);
          }
        },
        _fireEvents: function _fireEvents(a) {
          if (this._isFinished) {
            if (!this._finishedFlag) {
              var b = new d(this, this._currentTime, a),
                c = this._finishHandlers.concat(this.onfinish ? [this.onfinish] : []);
              setTimeout(function () {
                c.forEach(function (a) {
                  a.call(b.target, b);
                });
              }, 0), this._finishedFlag = !0;
            }
          } else this._finishedFlag = !1;
        },
        _tick: function _tick(a, b) {
          this._idle || this._paused || (null == this._startTime ? b && (this.startTime = a - this._currentTime / this.playbackRate) : this._isFinished || this._tickCurrentTime((a - this._startTime) * this.playbackRate)), b && (this._currentTimePending = !1, this._fireEvents(a));
        },
        get _needsTick() {
          return this.playState in {
            pending: 1,
            running: 1
          } || !this._finishedFlag;
        },
        _targetAnimations: function _targetAnimations() {
          var a = this._effect._target;
          return a._activeAnimations || (a._activeAnimations = []), a._activeAnimations;
        },
        _markTarget: function _markTarget() {
          var a = this._targetAnimations();
          a.indexOf(this) === -1 && a.push(this);
        },
        _unmarkTarget: function _unmarkTarget() {
          var a = this._targetAnimations(),
            b = a.indexOf(this);
          b !== -1 && a.splice(b, 1);
        }
      };
    }(c, d, f), function (a, b, c) {
      function d(a) {
        var b = j;
        j = [], a < q.currentTime && (a = q.currentTime), q._animations.sort(e), q._animations = h(a, !0, q._animations)[0], b.forEach(function (b) {
          b[1](a);
        }), g(), l = void 0;
      }
      function e(a, b) {
        return a._sequenceNumber - b._sequenceNumber;
      }
      function f() {
        this._animations = [], this.currentTime = window.performance && performance.now ? performance.now() : 0;
      }
      function g() {
        o.forEach(function (a) {
          a();
        }), o.length = 0;
      }
      function h(a, c, d) {
        p = !0, n = !1;
        var e = b.timeline;
        e.currentTime = a, m = !1;
        var f = [],
          g = [],
          h = [],
          i = [];
        return d.forEach(function (b) {
          b._tick(a, c), b._inEffect ? (g.push(b._effect), b._markTarget()) : (f.push(b._effect), b._unmarkTarget()), b._needsTick && (m = !0);
          var d = b._inEffect || b._needsTick;
          b._inTimeline = d, d ? h.push(b) : i.push(b);
        }), o.push.apply(o, f), o.push.apply(o, g), m && requestAnimationFrame(function () {}), p = !1, [h, i];
      }
      var i = window.requestAnimationFrame,
        j = [],
        k = 0;
      window.requestAnimationFrame = function (a) {
        var b = k++;
        return 0 == j.length && i(d), j.push([b, a]), b;
      }, window.cancelAnimationFrame = function (a) {
        j.forEach(function (b) {
          b[0] == a && (b[1] = function () {});
        });
      }, f.prototype = {
        _play: function _play(c) {
          c._timing = a.normalizeTimingInput(c.timing);
          var d = new b.Animation(c);
          return d._idle = !1, d._timeline = this, this._animations.push(d), b.restart(), b.applyDirtiedAnimation(d), d;
        }
      };
      var l = void 0,
        m = !1,
        n = !1;
      b.restart = function () {
        return m || (m = !0, requestAnimationFrame(function () {}), n = !0), n;
      }, b.applyDirtiedAnimation = function (a) {
        if (!p) {
          a._markTarget();
          var c = a._targetAnimations();
          c.sort(e);
          var d = h(b.timeline.currentTime, !1, c.slice())[1];
          d.forEach(function (a) {
            var b = q._animations.indexOf(a);
            b !== -1 && q._animations.splice(b, 1);
          }), g();
        }
      };
      var o = [],
        p = !1,
        q = new f();
      b.timeline = q;
    }(c, d, f), function (a, b) {
      function c(a, b) {
        for (var c = 0, d = 0; d < a.length; d++) c += a[d] * b[d];
        return c;
      }
      function d(a, b) {
        return [a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3], a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3], a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3], a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3], a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7], a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7], a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7], a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7], a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11], a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11], a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11], a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11], a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15], a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15], a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15], a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]];
      }
      function e(a) {
        var b = a.rad || 0,
          c = a.deg || 0,
          d = a.grad || 0,
          e = a.turn || 0,
          f = (c / 360 + d / 400 + e) * (2 * Math.PI) + b;
        return f;
      }
      function f(a) {
        switch (a.t) {
          case "rotatex":
            var b = e(a.d[0]);
            return [1, 0, 0, 0, 0, Math.cos(b), Math.sin(b), 0, 0, -Math.sin(b), Math.cos(b), 0, 0, 0, 0, 1];
          case "rotatey":
            var b = e(a.d[0]);
            return [Math.cos(b), 0, -Math.sin(b), 0, 0, 1, 0, 0, Math.sin(b), 0, Math.cos(b), 0, 0, 0, 0, 1];
          case "rotate":
          case "rotatez":
            var b = e(a.d[0]);
            return [Math.cos(b), Math.sin(b), 0, 0, -Math.sin(b), Math.cos(b), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          case "rotate3d":
            var c = a.d[0],
              d = a.d[1],
              f = a.d[2],
              b = e(a.d[3]),
              g = c * c + d * d + f * f;
            if (0 === g) c = 1, d = 0, f = 0;else if (1 !== g) {
              var h = Math.sqrt(g);
              c /= h, d /= h, f /= h;
            }
            var i = Math.sin(b / 2),
              j = i * Math.cos(b / 2),
              k = i * i;
            return [1 - 2 * (d * d + f * f) * k, 2 * (c * d * k + f * j), 2 * (c * f * k - d * j), 0, 2 * (c * d * k - f * j), 1 - 2 * (c * c + f * f) * k, 2 * (d * f * k + c * j), 0, 2 * (c * f * k + d * j), 2 * (d * f * k - c * j), 1 - 2 * (c * c + d * d) * k, 0, 0, 0, 0, 1];
          case "scale":
            return [a.d[0], 0, 0, 0, 0, a.d[1], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          case "scalex":
            return [a.d[0], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          case "scaley":
            return [1, 0, 0, 0, 0, a.d[0], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          case "scalez":
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, a.d[0], 0, 0, 0, 0, 1];
          case "scale3d":
            return [a.d[0], 0, 0, 0, 0, a.d[1], 0, 0, 0, 0, a.d[2], 0, 0, 0, 0, 1];
          case "skew":
            var l = e(a.d[0]),
              m = e(a.d[1]);
            return [1, Math.tan(m), 0, 0, Math.tan(l), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          case "skewx":
            var b = e(a.d[0]);
            return [1, 0, 0, 0, Math.tan(b), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          case "skewy":
            var b = e(a.d[0]);
            return [1, Math.tan(b), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          case "translate":
            var c = a.d[0].px || 0,
              d = a.d[1].px || 0;
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, c, d, 0, 1];
          case "translatex":
            var c = a.d[0].px || 0;
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, c, 0, 0, 1];
          case "translatey":
            var d = a.d[0].px || 0;
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, d, 0, 1];
          case "translatez":
            var f = a.d[0].px || 0;
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, f, 1];
          case "translate3d":
            var c = a.d[0].px || 0,
              d = a.d[1].px || 0,
              f = a.d[2].px || 0;
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, c, d, f, 1];
          case "perspective":
            var n = a.d[0].px ? -1 / a.d[0].px : 0;
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, n, 0, 0, 0, 1];
          case "matrix":
            return [a.d[0], a.d[1], 0, 0, a.d[2], a.d[3], 0, 0, 0, 0, 1, 0, a.d[4], a.d[5], 0, 1];
          case "matrix3d":
            return a.d;
        }
      }
      function g(a) {
        return 0 === a.length ? [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] : a.map(f).reduce(d);
      }
      function h(a) {
        return [i(g(a))];
      }
      var i = function () {
        function a(a) {
          return a[0][0] * a[1][1] * a[2][2] + a[1][0] * a[2][1] * a[0][2] + a[2][0] * a[0][1] * a[1][2] - a[0][2] * a[1][1] * a[2][0] - a[1][2] * a[2][1] * a[0][0] - a[2][2] * a[0][1] * a[1][0];
        }
        function b(b) {
          for (var c = 1 / a(b), d = b[0][0], e = b[0][1], f = b[0][2], g = b[1][0], h = b[1][1], i = b[1][2], j = b[2][0], k = b[2][1], l = b[2][2], m = [[(h * l - i * k) * c, (f * k - e * l) * c, (e * i - f * h) * c, 0], [(i * j - g * l) * c, (d * l - f * j) * c, (f * g - d * i) * c, 0], [(g * k - h * j) * c, (j * e - d * k) * c, (d * h - e * g) * c, 0]], n = [], o = 0; o < 3; o++) {
            for (var p = 0, q = 0; q < 3; q++) p += b[3][q] * m[q][o];
            n.push(p);
          }
          return n.push(1), m.push(n), m;
        }
        function d(a) {
          return [[a[0][0], a[1][0], a[2][0], a[3][0]], [a[0][1], a[1][1], a[2][1], a[3][1]], [a[0][2], a[1][2], a[2][2], a[3][2]], [a[0][3], a[1][3], a[2][3], a[3][3]]];
        }
        function e(a, b) {
          for (var c = [], d = 0; d < 4; d++) {
            for (var e = 0, f = 0; f < 4; f++) e += a[f] * b[f][d];
            c.push(e);
          }
          return c;
        }
        function f(a) {
          var b = g(a);
          return [a[0] / b, a[1] / b, a[2] / b];
        }
        function g(a) {
          return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
        }
        function h(a, b, c, d) {
          return [c * a[0] + d * b[0], c * a[1] + d * b[1], c * a[2] + d * b[2]];
        }
        function i(a, b) {
          return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
        }
        function j(j) {
          var k = [j.slice(0, 4), j.slice(4, 8), j.slice(8, 12), j.slice(12, 16)];
          if (1 !== k[3][3]) return null;
          for (var l = [], m = 0; m < 4; m++) l.push(k[m].slice());
          for (var m = 0; m < 3; m++) l[m][3] = 0;
          if (0 === a(l)) return !1;
          var n,
            o = [];
          if (k[0][3] || k[1][3] || k[2][3]) {
            o.push(k[0][3]), o.push(k[1][3]), o.push(k[2][3]), o.push(k[3][3]);
            var p = b(l),
              q = d(p);
            n = e(o, q);
          } else n = [0, 0, 0, 1];
          var r = k[3].slice(0, 3),
            s = [];
          s.push(k[0].slice(0, 3));
          var t = [];
          t.push(g(s[0])), s[0] = f(s[0]);
          var u = [];
          s.push(k[1].slice(0, 3)), u.push(c(s[0], s[1])), s[1] = h(s[1], s[0], 1, -u[0]), t.push(g(s[1])), s[1] = f(s[1]), u[0] /= t[1], s.push(k[2].slice(0, 3)), u.push(c(s[0], s[2])), s[2] = h(s[2], s[0], 1, -u[1]), u.push(c(s[1], s[2])), s[2] = h(s[2], s[1], 1, -u[2]), t.push(g(s[2])), s[2] = f(s[2]), u[1] /= t[2], u[2] /= t[2];
          var v = i(s[1], s[2]);
          if (c(s[0], v) < 0) for (var m = 0; m < 3; m++) t[m] *= -1, s[m][0] *= -1, s[m][1] *= -1, s[m][2] *= -1;
          var w,
            x,
            y = s[0][0] + s[1][1] + s[2][2] + 1;
          return y > 1e-4 ? (w = .5 / Math.sqrt(y), x = [(s[2][1] - s[1][2]) * w, (s[0][2] - s[2][0]) * w, (s[1][0] - s[0][1]) * w, .25 / w]) : s[0][0] > s[1][1] && s[0][0] > s[2][2] ? (w = 2 * Math.sqrt(1 + s[0][0] - s[1][1] - s[2][2]), x = [.25 * w, (s[0][1] + s[1][0]) / w, (s[0][2] + s[2][0]) / w, (s[2][1] - s[1][2]) / w]) : s[1][1] > s[2][2] ? (w = 2 * Math.sqrt(1 + s[1][1] - s[0][0] - s[2][2]), x = [(s[0][1] + s[1][0]) / w, .25 * w, (s[1][2] + s[2][1]) / w, (s[0][2] - s[2][0]) / w]) : (w = 2 * Math.sqrt(1 + s[2][2] - s[0][0] - s[1][1]), x = [(s[0][2] + s[2][0]) / w, (s[1][2] + s[2][1]) / w, .25 * w, (s[1][0] - s[0][1]) / w]), [r, t, u, x, n];
        }
        return j;
      }();
      a.dot = c, a.makeMatrixDecomposition = h;
    }(d, f), function (a) {
      function b(a, b) {
        var c = a.exec(b);
        if (c) return c = a.ignoreCase ? c[0].toLowerCase() : c[0], [c, b.substr(c.length)];
      }
      function c(a, b) {
        b = b.replace(/^\s*/, "");
        var c = a(b);
        if (c) return [c[0], c[1].replace(/^\s*/, "")];
      }
      function d(a, d, e) {
        a = c.bind(null, a);
        for (var f = [];;) {
          var g = a(e);
          if (!g) return [f, e];
          if (f.push(g[0]), e = g[1], g = b(d, e), !g || "" == g[1]) return [f, e];
          e = g[1];
        }
      }
      function e(a, b) {
        for (var c = 0, d = 0; d < b.length && (!/\s|,/.test(b[d]) || 0 != c); d++) if ("(" == b[d]) c++;else if (")" == b[d] && (c--, 0 == c && d++, c <= 0)) break;
        var e = a(b.substr(0, d));
        return void 0 == e ? void 0 : [e, b.substr(d)];
      }
      function f(a, b) {
        for (var c = a, d = b; c && d;) c > d ? c %= d : d %= c;
        return c = a * b / (c + d);
      }
      function g(a) {
        return function (b) {
          var c = a(b);
          return c && (c[0] = void 0), c;
        };
      }
      function h(a, b) {
        return function (c) {
          var d = a(c);
          return d ? d : [b, c];
        };
      }
      function i(b, c) {
        for (var d = [], e = 0; e < b.length; e++) {
          var f = a.consumeTrimmed(b[e], c);
          if (!f || "" == f[0]) return;
          void 0 !== f[0] && d.push(f[0]), c = f[1];
        }
        if ("" == c) return d;
      }
      function j(a, b, c, d, e) {
        for (var g = [], h = [], i = [], j = f(d.length, e.length), k = 0; k < j; k++) {
          var l = b(d[k % d.length], e[k % e.length]);
          if (!l) return;
          g.push(l[0]), h.push(l[1]), i.push(l[2]);
        }
        return [g, h, function (b) {
          var d = b.map(function (a, b) {
            return i[b](a);
          }).join(c);
          return a ? a(d) : d;
        }];
      }
      function k(a, b, c) {
        for (var d = [], e = [], f = [], g = 0, h = 0; h < c.length; h++) if ("function" == typeof c[h]) {
          var i = c[h](a[g], b[g++]);
          d.push(i[0]), e.push(i[1]), f.push(i[2]);
        } else !function (a) {
          d.push(!1), e.push(!1), f.push(function () {
            return c[a];
          });
        }(h);
        return [d, e, function (a) {
          for (var b = "", c = 0; c < a.length; c++) b += f[c](a[c]);
          return b;
        }];
      }
      a.consumeToken = b, a.consumeTrimmed = c, a.consumeRepeated = d, a.consumeParenthesised = e, a.ignore = g, a.optional = h, a.consumeList = i, a.mergeNestedRepeated = j.bind(null, null), a.mergeWrappedNestedRepeated = j, a.mergeList = k;
    }(d), function (a) {
      function b(b) {
        function c(b) {
          var c = a.consumeToken(/^inset/i, b);
          if (c) return d.inset = !0, c;
          var c = a.consumeLengthOrPercent(b);
          if (c) return d.lengths.push(c[0]), c;
          var c = a.consumeColor(b);
          return c ? (d.color = c[0], c) : void 0;
        }
        var d = {
            inset: !1,
            lengths: [],
            color: null
          },
          e = a.consumeRepeated(c, /^/, b);
        if (e && e[0].length) return [d, e[1]];
      }
      function c(c) {
        var d = a.consumeRepeated(b, /^,/, c);
        if (d && "" == d[1]) return d[0];
      }
      function d(b, c) {
        for (; b.lengths.length < Math.max(b.lengths.length, c.lengths.length);) b.lengths.push({
          px: 0
        });
        for (; c.lengths.length < Math.max(b.lengths.length, c.lengths.length);) c.lengths.push({
          px: 0
        });
        if (b.inset == c.inset && !!b.color == !!c.color) {
          for (var d, e = [], f = [[], 0], g = [[], 0], h = 0; h < b.lengths.length; h++) {
            var i = a.mergeDimensions(b.lengths[h], c.lengths[h], 2 == h);
            f[0].push(i[0]), g[0].push(i[1]), e.push(i[2]);
          }
          if (b.color && c.color) {
            var j = a.mergeColors(b.color, c.color);
            f[1] = j[0], g[1] = j[1], d = j[2];
          }
          return [f, g, function (a) {
            for (var c = b.inset ? "inset " : " ", f = 0; f < e.length; f++) c += e[f](a[0][f]) + " ";
            return d && (c += d(a[1])), c;
          }];
        }
      }
      function e(b, c, d, e) {
        function f(a) {
          return {
            inset: a,
            color: [0, 0, 0, 0],
            lengths: [{
              px: 0
            }, {
              px: 0
            }, {
              px: 0
            }, {
              px: 0
            }]
          };
        }
        for (var g = [], h = [], i = 0; i < d.length || i < e.length; i++) {
          var j = d[i] || f(e[i].inset),
            k = e[i] || f(d[i].inset);
          g.push(j), h.push(k);
        }
        return a.mergeNestedRepeated(b, c, g, h);
      }
      var f = e.bind(null, d, ", ");
      a.addPropertiesHandler(c, f, ["box-shadow", "text-shadow"]);
    }(d), function (a, b) {
      function c(a) {
        return a.toFixed(3).replace(".000", "");
      }
      function d(a, b, c) {
        return Math.min(b, Math.max(a, c));
      }
      function e(a) {
        if (/^\s*[-+]?(\d*\.)?\d+\s*$/.test(a)) return Number(a);
      }
      function f(a, b) {
        return [a, b, c];
      }
      function g(a, b) {
        if (0 != a) return i(0, 1 / 0)(a, b);
      }
      function h(a, b) {
        return [a, b, function (a) {
          return Math.round(d(1, 1 / 0, a));
        }];
      }
      function i(a, b) {
        return function (e, f) {
          return [e, f, function (e) {
            return c(d(a, b, e));
          }];
        };
      }
      function j(a, b) {
        return [a, b, Math.round];
      }
      a.clamp = d, a.addPropertiesHandler(e, i(0, 1 / 0), ["border-image-width", "line-height"]), a.addPropertiesHandler(e, i(0, 1), ["opacity", "shape-image-threshold"]), a.addPropertiesHandler(e, g, ["flex-grow", "flex-shrink"]), a.addPropertiesHandler(e, h, ["orphans", "widows"]), a.addPropertiesHandler(e, j, ["z-index"]), a.parseNumber = e, a.mergeNumbers = f, a.numberToString = c;
    }(d, f), function (a, b) {
      function c(a, b) {
        if ("visible" == a || "visible" == b) return [0, 1, function (c) {
          return c <= 0 ? a : c >= 1 ? b : "visible";
        }];
      }
      a.addPropertiesHandler(String, c, ["visibility"]);
    }(d), function (a, b) {
      function c(a) {
        a = a.trim(), f.fillStyle = "#000", f.fillStyle = a;
        var b = f.fillStyle;
        if (f.fillStyle = "#fff", f.fillStyle = a, b == f.fillStyle) {
          f.fillRect(0, 0, 1, 1);
          var c = f.getImageData(0, 0, 1, 1).data;
          f.clearRect(0, 0, 1, 1);
          var d = c[3] / 255;
          return [c[0] * d, c[1] * d, c[2] * d, d];
        }
      }
      function d(b, c) {
        return [b, c, function (b) {
          function c(a) {
            return Math.max(0, Math.min(255, a));
          }
          if (b[3]) for (var d = 0; d < 3; d++) b[d] = Math.round(c(b[d] / b[3]));
          return b[3] = a.numberToString(a.clamp(0, 1, b[3])), "rgba(" + b.join(",") + ")";
        }];
      }
      var e = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      e.width = e.height = 1;
      var f = e.getContext("2d");
      a.addPropertiesHandler(c, d, ["background-color", "border-bottom-color", "border-left-color", "border-right-color", "border-top-color", "color", "outline-color", "text-decoration-color"]), a.consumeColor = a.consumeParenthesised.bind(null, c), a.mergeColors = d;
    }(d, f), function (a, b) {
      function c(a, b) {
        if (b = b.trim().toLowerCase(), "0" == b && "px".search(a) >= 0) return {
          px: 0
        };
        if (/^[^(]*$|^calc/.test(b)) {
          b = b.replace(/calc\(/g, "(");
          var c = {};
          b = b.replace(a, function (a) {
            return c[a] = null, "U" + a;
          });
          for (var d = "U(" + a.source + ")", e = b.replace(/[-+]?(\d*\.)?\d+/g, "N").replace(new RegExp("N" + d, "g"), "D").replace(/\s[+-]\s/g, "O").replace(/\s/g, ""), f = [/N\*(D)/g, /(N|D)[*\/]N/g, /(N|D)O\1/g, /\((N|D)\)/g], g = 0; g < f.length;) f[g].test(e) ? (e = e.replace(f[g], "$1"), g = 0) : g++;
          if ("D" == e) {
            for (var h in c) {
              var i = eval(b.replace(new RegExp("U" + h, "g"), "").replace(new RegExp(d, "g"), "*0"));
              if (!isFinite(i)) return;
              c[h] = i;
            }
            return c;
          }
        }
      }
      function d(a, b) {
        return e(a, b, !0);
      }
      function e(b, c, d) {
        var e,
          f = [];
        for (e in b) f.push(e);
        for (e in c) f.indexOf(e) < 0 && f.push(e);
        return b = f.map(function (a) {
          return b[a] || 0;
        }), c = f.map(function (a) {
          return c[a] || 0;
        }), [b, c, function (b) {
          var c = b.map(function (c, e) {
            return 1 == b.length && d && (c = Math.max(c, 0)), a.numberToString(c) + f[e];
          }).join(" + ");
          return b.length > 1 ? "calc(" + c + ")" : c;
        }];
      }
      var f = "px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc",
        g = c.bind(null, new RegExp(f, "g")),
        h = c.bind(null, new RegExp(f + "|%", "g")),
        i = c.bind(null, /deg|rad|grad|turn/g);
      a.parseLength = g, a.parseLengthOrPercent = h, a.consumeLengthOrPercent = a.consumeParenthesised.bind(null, h), a.parseAngle = i, a.mergeDimensions = e;
      var j = a.consumeParenthesised.bind(null, g),
        k = a.consumeRepeated.bind(void 0, j, /^/),
        l = a.consumeRepeated.bind(void 0, k, /^,/);
      a.consumeSizePairList = l;
      var m = function m(a) {
          var b = l(a);
          if (b && "" == b[1]) return b[0];
        },
        n = a.mergeNestedRepeated.bind(void 0, d, " "),
        o = a.mergeNestedRepeated.bind(void 0, n, ",");
      a.mergeNonNegativeSizePair = n, a.addPropertiesHandler(m, o, ["background-size"]), a.addPropertiesHandler(h, d, ["border-bottom-width", "border-image-width", "border-left-width", "border-right-width", "border-top-width", "flex-basis", "font-size", "height", "line-height", "max-height", "max-width", "outline-width", "width"]), a.addPropertiesHandler(h, e, ["border-bottom-left-radius", "border-bottom-right-radius", "border-top-left-radius", "border-top-right-radius", "bottom", "left", "letter-spacing", "margin-bottom", "margin-left", "margin-right", "margin-top", "min-height", "min-width", "outline-offset", "padding-bottom", "padding-left", "padding-right", "padding-top", "perspective", "right", "shape-margin", "text-indent", "top", "vertical-align", "word-spacing"]);
    }(d, f), function (a, b) {
      function c(b) {
        return a.consumeLengthOrPercent(b) || a.consumeToken(/^auto/, b);
      }
      function d(b) {
        var d = a.consumeList([a.ignore(a.consumeToken.bind(null, /^rect/)), a.ignore(a.consumeToken.bind(null, /^\(/)), a.consumeRepeated.bind(null, c, /^,/), a.ignore(a.consumeToken.bind(null, /^\)/))], b);
        if (d && 4 == d[0].length) return d[0];
      }
      function e(b, c) {
        return "auto" == b || "auto" == c ? [!0, !1, function (d) {
          var e = d ? b : c;
          if ("auto" == e) return "auto";
          var f = a.mergeDimensions(e, e);
          return f[2](f[0]);
        }] : a.mergeDimensions(b, c);
      }
      function f(a) {
        return "rect(" + a + ")";
      }
      var g = a.mergeWrappedNestedRepeated.bind(null, f, e, ", ");
      a.parseBox = d, a.mergeBoxes = g, a.addPropertiesHandler(d, g, ["clip"]);
    }(d, f), function (a, b) {
      function c(a) {
        return function (b) {
          var c = 0;
          return a.map(function (a) {
            return a === k ? b[c++] : a;
          });
        };
      }
      function d(a) {
        return a;
      }
      function e(b) {
        if (b = b.toLowerCase().trim(), "none" == b) return [];
        for (var c, d = /\s*(\w+)\(([^)]*)\)/g, e = [], f = 0; c = d.exec(b);) {
          if (c.index != f) return;
          f = c.index + c[0].length;
          var g = c[1],
            h = n[g];
          if (!h) return;
          var i = c[2].split(","),
            j = h[0];
          if (j.length < i.length) return;
          for (var k = [], o = 0; o < j.length; o++) {
            var p,
              q = i[o],
              r = j[o];
            if (p = q ? {
              A: function A(b) {
                return "0" == b.trim() ? m : a.parseAngle(b);
              },
              N: a.parseNumber,
              T: a.parseLengthOrPercent,
              L: a.parseLength
            }[r.toUpperCase()](q) : {
              a: m,
              n: k[0],
              t: l
            }[r], void 0 === p) return;
            k.push(p);
          }
          if (e.push({
            t: g,
            d: k
          }), d.lastIndex == b.length) return e;
        }
      }
      function f(a) {
        return a.toFixed(6).replace(".000000", "");
      }
      function g(b, c) {
        if (b.decompositionPair !== c) {
          b.decompositionPair = c;
          var d = a.makeMatrixDecomposition(b);
        }
        if (c.decompositionPair !== b) {
          c.decompositionPair = b;
          var e = a.makeMatrixDecomposition(c);
        }
        return null == d[0] || null == e[0] ? [[!1], [!0], function (a) {
          return a ? c[0].d : b[0].d;
        }] : (d[0].push(0), e[0].push(1), [d, e, function (b) {
          var c = a.quat(d[0][3], e[0][3], b[5]),
            g = a.composeMatrix(b[0], b[1], b[2], c, b[4]),
            h = g.map(f).join(",");
          return h;
        }]);
      }
      function h(a) {
        return a.replace(/[xy]/, "");
      }
      function i(a) {
        return a.replace(/(x|y|z|3d)?$/, "3d");
      }
      function j(b, c) {
        var d = a.makeMatrixDecomposition && !0,
          e = !1;
        if (!b.length || !c.length) {
          b.length || (e = !0, b = c, c = []);
          for (var f = 0; f < b.length; f++) {
            var j = b[f].t,
              k = b[f].d,
              l = "scale" == j.substr(0, 5) ? 1 : 0;
            c.push({
              t: j,
              d: k.map(function (a) {
                if ("number" == typeof a) return l;
                var b = {};
                for (var c in a) b[c] = l;
                return b;
              })
            });
          }
        }
        var m = function m(a, b) {
            return "perspective" == a && "perspective" == b || ("matrix" == a || "matrix3d" == a) && ("matrix" == b || "matrix3d" == b);
          },
          o = [],
          p = [],
          q = [];
        if (b.length != c.length) {
          if (!d) return;
          var r = g(b, c);
          o = [r[0]], p = [r[1]], q = [["matrix", [r[2]]]];
        } else for (var f = 0; f < b.length; f++) {
          var j,
            s = b[f].t,
            t = c[f].t,
            u = b[f].d,
            v = c[f].d,
            w = n[s],
            x = n[t];
          if (m(s, t)) {
            if (!d) return;
            var r = g([b[f]], [c[f]]);
            o.push(r[0]), p.push(r[1]), q.push(["matrix", [r[2]]]);
          } else {
            if (s == t) j = s;else if (w[2] && x[2] && h(s) == h(t)) j = h(s), u = w[2](u), v = x[2](v);else {
              if (!w[1] || !x[1] || i(s) != i(t)) {
                if (!d) return;
                var r = g(b, c);
                o = [r[0]], p = [r[1]], q = [["matrix", [r[2]]]];
                break;
              }
              j = i(s), u = w[1](u), v = x[1](v);
            }
            for (var y = [], z = [], A = [], B = 0; B < u.length; B++) {
              var C = "number" == typeof u[B] ? a.mergeNumbers : a.mergeDimensions,
                r = C(u[B], v[B]);
              y[B] = r[0], z[B] = r[1], A.push(r[2]);
            }
            o.push(y), p.push(z), q.push([j, A]);
          }
        }
        if (e) {
          var D = o;
          o = p, p = D;
        }
        return [o, p, function (a) {
          return a.map(function (a, b) {
            var c = a.map(function (a, c) {
              return q[b][1][c](a);
            }).join(",");
            return "matrix" == q[b][0] && 16 == c.split(",").length && (q[b][0] = "matrix3d"), q[b][0] + "(" + c + ")";
          }).join(" ");
        }];
      }
      var k = null,
        l = {
          px: 0
        },
        m = {
          deg: 0
        },
        n = {
          matrix: ["NNNNNN", [k, k, 0, 0, k, k, 0, 0, 0, 0, 1, 0, k, k, 0, 1], d],
          matrix3d: ["NNNNNNNNNNNNNNNN", d],
          rotate: ["A"],
          rotatex: ["A"],
          rotatey: ["A"],
          rotatez: ["A"],
          rotate3d: ["NNNA"],
          perspective: ["L"],
          scale: ["Nn", c([k, k, 1]), d],
          scalex: ["N", c([k, 1, 1]), c([k, 1])],
          scaley: ["N", c([1, k, 1]), c([1, k])],
          scalez: ["N", c([1, 1, k])],
          scale3d: ["NNN", d],
          skew: ["Aa", null, d],
          skewx: ["A", null, c([k, m])],
          skewy: ["A", null, c([m, k])],
          translate: ["Tt", c([k, k, l]), d],
          translatex: ["T", c([k, l, l]), c([k, l])],
          translatey: ["T", c([l, k, l]), c([l, k])],
          translatez: ["L", c([l, l, k])],
          translate3d: ["TTL", d]
        };
      a.addPropertiesHandler(e, j, ["transform"]);
    }(d, f), function (a) {
      function b(a) {
        var b = Number(a);
        if (!(isNaN(b) || b < 100 || b > 900 || b % 100 !== 0)) return b;
      }
      function c(b) {
        return b = 100 * Math.round(b / 100), b = a.clamp(100, 900, b), 400 === b ? "normal" : 700 === b ? "bold" : String(b);
      }
      function d(a, b) {
        return [a, b, c];
      }
      a.addPropertiesHandler(b, d, ["font-weight"]);
    }(d), function (a) {
      function b(a) {
        var b = {};
        for (var c in a) b[c] = -a[c];
        return b;
      }
      function c(b) {
        return a.consumeToken(/^(left|center|right|top|bottom)\b/i, b) || a.consumeLengthOrPercent(b);
      }
      function d(b, d) {
        var e = a.consumeRepeated(c, /^/, d);
        if (e && "" == e[1]) {
          var f = e[0];
          if (f[0] = f[0] || "center", f[1] = f[1] || "center", 3 == b && (f[2] = f[2] || {
            px: 0
          }), f.length == b) {
            if (/top|bottom/.test(f[0]) || /left|right/.test(f[1])) {
              var h = f[0];
              f[0] = f[1], f[1] = h;
            }
            if (/left|right|center|Object/.test(f[0]) && /top|bottom|center|Object/.test(f[1])) return f.map(function (a) {
              return "object" == _typeof(a) ? a : g[a];
            });
          }
        }
      }
      function e(d) {
        var e = a.consumeRepeated(c, /^/, d);
        if (e) {
          for (var f = e[0], h = [{
              "%": 50
            }, {
              "%": 50
            }], i = 0, j = !1, k = 0; k < f.length; k++) {
            var l = f[k];
            "string" == typeof l ? (j = /bottom|right/.test(l), i = {
              left: 0,
              right: 0,
              center: i,
              top: 1,
              bottom: 1
            }[l], h[i] = g[l], "center" == l && i++) : (j && (l = b(l), l["%"] = (l["%"] || 0) + 100), h[i] = l, i++, j = !1);
          }
          return [h, e[1]];
        }
      }
      function f(b) {
        var c = a.consumeRepeated(e, /^,/, b);
        if (c && "" == c[1]) return c[0];
      }
      var g = {
          left: {
            "%": 0
          },
          center: {
            "%": 50
          },
          right: {
            "%": 100
          },
          top: {
            "%": 0
          },
          bottom: {
            "%": 100
          }
        },
        h = a.mergeNestedRepeated.bind(null, a.mergeDimensions, " ");
      a.addPropertiesHandler(d.bind(null, 3), h, ["transform-origin"]), a.addPropertiesHandler(d.bind(null, 2), h, ["perspective-origin"]), a.consumePosition = e, a.mergeOffsetList = h;
      var i = a.mergeNestedRepeated.bind(null, h, ", ");
      a.addPropertiesHandler(f, i, ["background-position", "object-position"]);
    }(d), function (a) {
      function b(b) {
        var c = a.consumeToken(/^circle/, b);
        if (c && c[0]) return ["circle"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0, /^\(/)), d, a.ignore(a.consumeToken.bind(void 0, /^at/)), a.consumePosition, a.ignore(a.consumeToken.bind(void 0, /^\)/))], c[1]));
        var f = a.consumeToken(/^ellipse/, b);
        if (f && f[0]) return ["ellipse"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0, /^\(/)), e, a.ignore(a.consumeToken.bind(void 0, /^at/)), a.consumePosition, a.ignore(a.consumeToken.bind(void 0, /^\)/))], f[1]));
        var g = a.consumeToken(/^polygon/, b);
        return g && g[0] ? ["polygon"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0, /^\(/)), a.optional(a.consumeToken.bind(void 0, /^nonzero\s*,|^evenodd\s*,/), "nonzero,"), a.consumeSizePairList, a.ignore(a.consumeToken.bind(void 0, /^\)/))], g[1])) : void 0;
      }
      function c(b, c) {
        if (b[0] === c[0]) return "circle" == b[0] ? a.mergeList(b.slice(1), c.slice(1), ["circle(", a.mergeDimensions, " at ", a.mergeOffsetList, ")"]) : "ellipse" == b[0] ? a.mergeList(b.slice(1), c.slice(1), ["ellipse(", a.mergeNonNegativeSizePair, " at ", a.mergeOffsetList, ")"]) : "polygon" == b[0] && b[1] == c[1] ? a.mergeList(b.slice(2), c.slice(2), ["polygon(", b[1], g, ")"]) : void 0;
      }
      var d = a.consumeParenthesised.bind(null, a.parseLengthOrPercent),
        e = a.consumeRepeated.bind(void 0, d, /^/),
        f = a.mergeNestedRepeated.bind(void 0, a.mergeDimensions, " "),
        g = a.mergeNestedRepeated.bind(void 0, f, ",");
      a.addPropertiesHandler(b, c, ["shape-outside"]);
    }(d), function (a, b) {
      function c(a, b) {
        b.concat([a]).forEach(function (b) {
          b in document.documentElement.style && (d[a] = b);
        });
      }
      var d = {};
      c("transform", ["webkitTransform", "msTransform"]), c("transformOrigin", ["webkitTransformOrigin"]), c("perspective", ["webkitPerspective"]), c("perspectiveOrigin", ["webkitPerspectiveOrigin"]), a.propertyName = function (a) {
        return d[a] || a;
      };
    }(d, f);
  }(), !function () {
    if (void 0 === document.createElement("div").animate([]).oncancel) {
      var a;
      if (window.performance && performance.now) var a = function a() {
        return performance.now();
      };else var a = function a() {
        return Date.now();
      };
      var b = function b(a, _b, c) {
          this.target = a, this.currentTime = _b, this.timelineTime = c, this.type = "cancel", this.bubbles = !1, this.cancelable = !1, this.currentTarget = a, this.defaultPrevented = !1, this.eventPhase = Event.AT_TARGET, this.timeStamp = Date.now();
        },
        c = window.Element.prototype.animate;
      window.Element.prototype.animate = function (d, e) {
        var f = c.call(this, d, e);
        f._cancelHandlers = [], f.oncancel = null;
        var g = f.cancel;
        f.cancel = function () {
          g.call(this);
          var c = new b(this, null, a()),
            d = this._cancelHandlers.concat(this.oncancel ? [this.oncancel] : []);
          setTimeout(function () {
            d.forEach(function (a) {
              a.call(c.target, c);
            });
          }, 0);
        };
        var h = f.addEventListener;
        f.addEventListener = function (a, b) {
          "function" == typeof b && "cancel" == a ? this._cancelHandlers.push(b) : h.call(this, a, b);
        };
        var i = f.removeEventListener;
        return f.removeEventListener = function (a, b) {
          if ("cancel" == a) {
            var c = this._cancelHandlers.indexOf(b);
            c >= 0 && this._cancelHandlers.splice(c, 1);
          } else i.call(this, a, b);
        }, f;
      };
    }
  }(), function (a) {
    var b = document.documentElement,
      c = null,
      d = !1;
    try {
      var e = getComputedStyle(b).getPropertyValue("opacity"),
        f = "0" == e ? "1" : "0";
      c = b.animate({
        opacity: [f, f]
      }, {
        duration: 1
      }), c.currentTime = 0, d = getComputedStyle(b).getPropertyValue("opacity") == f;
    } catch (a) {} finally {
      c && c.cancel();
    }
    if (!d) {
      var g = window.Element.prototype.animate;
      window.Element.prototype.animate = function (b, c) {
        return window.Symbol && Symbol.iterator && Array.prototype.from && b[Symbol.iterator] && (b = Array.from(b)), Array.isArray(b) || null === b || (b = a.convertToArrayForm(b)), g.call(this, b, c);
      };
    }
  }(c), b["true"] = a;
}({}, function () {
  return this;
}());

/***/ }),

/***/ "./assets/js/wow.min.js":
/*!******************************!*\
  !*** ./assets/js/wow.min.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");
/*! WOW wow.js - v1.3.0 - 2016-10-04
* https://wowjs.uk
* Copyright (c) 2016 Thomas Grainger; Licensed MIT */
!function (a, b) {
  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var c; }
}(this, function (a, b) {
  "use strict";

  function c(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
  }
  function d(a, b) {
    return b.indexOf(a) >= 0;
  }
  function e(a, b) {
    for (var c in b) if (null == a[c]) {
      var d = b[c];
      a[c] = d;
    }
    return a;
  }
  function f(a) {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(a);
  }
  function g(a) {
    var b = arguments.length <= 1 || void 0 === arguments[1] ? !1 : arguments[1],
      c = arguments.length <= 2 || void 0 === arguments[2] ? !1 : arguments[2],
      d = arguments.length <= 3 || void 0 === arguments[3] ? null : arguments[3],
      e = void 0;
    return null != document.createEvent ? (e = document.createEvent("CustomEvent"), e.initCustomEvent(a, b, c, d)) : null != document.createEventObject ? (e = document.createEventObject(), e.eventType = a) : e.eventName = a, e;
  }
  function h(a, b) {
    null != a.dispatchEvent ? a.dispatchEvent(b) : b in (null != a) ? a[b]() : "on" + b in (null != a) && a["on" + b]();
  }
  function i(a, b, c) {
    null != a.addEventListener ? a.addEventListener(b, c, !1) : null != a.attachEvent ? a.attachEvent("on" + b, c) : a[b] = c;
  }
  function j(a, b, c) {
    null != a.removeEventListener ? a.removeEventListener(b, c, !1) : null != a.detachEvent ? a.detachEvent("on" + b, c) : delete a[b];
  }
  function k() {
    return "innerHeight" in window ? window.innerHeight : document.documentElement.clientHeight;
  }
  Object.defineProperty(b, "__esModule", {
    value: !0
  });
  var l,
    m,
    n = function () {
      function a(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), Object.defineProperty(a, d.key, d);
        }
      }
      return function (b, c, d) {
        return c && a(b.prototype, c), d && a(b, d), b;
      };
    }(),
    o = window.WeakMap || window.MozWeakMap || function () {
      function a() {
        c(this, a), this.keys = [], this.values = [];
      }
      return n(a, [{
        key: "get",
        value: function value(a) {
          for (var b = 0; b < this.keys.length; b++) {
            var c = this.keys[b];
            if (c === a) return this.values[b];
          }
        }
      }, {
        key: "set",
        value: function value(a, b) {
          for (var c = 0; c < this.keys.length; c++) {
            var d = this.keys[c];
            if (d === a) return this.values[c] = b, this;
          }
          return this.keys.push(a), this.values.push(b), this;
        }
      }]), a;
    }(),
    p = window.MutationObserver || window.WebkitMutationObserver || window.MozMutationObserver || (m = l = function () {
      function a() {
        c(this, a), "undefined" != typeof console && null !== console && (console.warn("MutationObserver is not supported by your browser."), console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content."));
      }
      return n(a, [{
        key: "observe",
        value: function value() {}
      }]), a;
    }(), l.notSupported = !0, m),
    q = window.getComputedStyle || function (a) {
      var b = /(\-([a-z]){1})/g;
      return {
        getPropertyValue: function getPropertyValue(c) {
          "float" === c && (c = "styleFloat"), b.test(c) && c.replace(b, function (a, b) {
            return b.toUpperCase();
          });
          var d = a.currentStyle;
          return (null != d ? d[c] : void 0) || null;
        }
      };
    },
    r = function () {
      function a() {
        var b = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];
        c(this, a), this.defaults = {
          boxClass: "wow",
          animateClass: "animated",
          offset: 0,
          mobile: !0,
          live: !0,
          callback: null,
          scrollContainer: null,
          resetAnimation: !0
        }, this.animate = function () {
          return "requestAnimationFrame" in window ? function (a) {
            return window.requestAnimationFrame(a);
          } : function (a) {
            return a();
          };
        }(), this.vendors = ["moz", "webkit"], this.start = this.start.bind(this), this.resetAnimation = this.resetAnimation.bind(this), this.scrollHandler = this.scrollHandler.bind(this), this.scrollCallback = this.scrollCallback.bind(this), this.scrolled = !0, this.config = e(b, this.defaults), null != b.scrollContainer && (this.config.scrollContainer = document.querySelector(b.scrollContainer)), this.animationNameCache = new o(), this.wowEvent = g(this.config.boxClass);
      }
      return n(a, [{
        key: "init",
        value: function value() {
          this.element = window.document.documentElement, d(document.readyState, ["interactive", "complete"]) ? this.start() : i(document, "DOMContentLoaded", this.start), this.finished = [];
        }
      }, {
        key: "start",
        value: function value() {
          var a = this;
          if (this.stopped = !1, this.boxes = [].slice.call(this.element.querySelectorAll("." + this.config.boxClass)), this.all = this.boxes.slice(0), this.boxes.length) if (this.disabled()) this.resetStyle();else for (var b = 0; b < this.boxes.length; b++) {
            var c = this.boxes[b];
            this.applyStyle(c, !0);
          }
          if (this.disabled() || (i(this.config.scrollContainer || window, "scroll", this.scrollHandler), i(window, "resize", this.scrollHandler), this.interval = setInterval(this.scrollCallback, 50)), this.config.live) {
            var d = new p(function (b) {
              for (var c = 0; c < b.length; c++) for (var d = b[c], e = 0; e < d.addedNodes.length; e++) {
                var f = d.addedNodes[e];
                a.doSync(f);
              }
            });
            d.observe(document.body, {
              childList: !0,
              subtree: !0
            });
          }
        }
      }, {
        key: "stop",
        value: function value() {
          this.stopped = !0, j(this.config.scrollContainer || window, "scroll", this.scrollHandler), j(window, "resize", this.scrollHandler), null != this.interval && clearInterval(this.interval);
        }
      }, {
        key: "sync",
        value: function value() {
          p.notSupported && this.doSync(this.element);
        }
      }, {
        key: "doSync",
        value: function value(a) {
          if ("undefined" != typeof a && null !== a || (a = this.element), 1 === a.nodeType) {
            a = a.parentNode || a;
            for (var b = a.querySelectorAll("." + this.config.boxClass), c = 0; c < b.length; c++) {
              var e = b[c];
              d(e, this.all) || (this.boxes.push(e), this.all.push(e), this.stopped || this.disabled() ? this.resetStyle() : this.applyStyle(e, !0), this.scrolled = !0);
            }
          }
        }
      }, {
        key: "show",
        value: function value(a) {
          return this.applyStyle(a), a.className = a.className + " " + this.config.animateClass, null != this.config.callback && this.config.callback(a), h(a, this.wowEvent), this.config.resetAnimation && (i(a, "animationend", this.resetAnimation), i(a, "oanimationend", this.resetAnimation), i(a, "webkitAnimationEnd", this.resetAnimation), i(a, "MSAnimationEnd", this.resetAnimation)), a;
        }
      }, {
        key: "applyStyle",
        value: function value(a, b) {
          var c = this,
            d = a.getAttribute("data-wow-duration"),
            e = a.getAttribute("data-wow-delay"),
            f = a.getAttribute("data-wow-iteration");
          return this.animate(function () {
            return c.customStyle(a, b, d, e, f);
          });
        }
      }, {
        key: "resetStyle",
        value: function value() {
          for (var a = 0; a < this.boxes.length; a++) {
            var b = this.boxes[a];
            b.style.visibility = "visible";
          }
        }
      }, {
        key: "resetAnimation",
        value: function value(a) {
          if (a.type.toLowerCase().indexOf("animationend") >= 0) {
            var b = a.target || a.srcElement;
            b.className = b.className.replace(this.config.animateClass, "").trim();
          }
        }
      }, {
        key: "customStyle",
        value: function value(a, b, c, d, e) {
          return b && this.cacheAnimationName(a), a.style.visibility = b ? "hidden" : "visible", c && this.vendorSet(a.style, {
            animationDuration: c
          }), d && this.vendorSet(a.style, {
            animationDelay: d
          }), e && this.vendorSet(a.style, {
            animationIterationCount: e
          }), this.vendorSet(a.style, {
            animationName: b ? "none" : this.cachedAnimationName(a)
          }), a;
        }
      }, {
        key: "vendorSet",
        value: function value(a, b) {
          for (var c in b) if (b.hasOwnProperty(c)) {
            var d = b[c];
            a["" + c] = d;
            for (var e = 0; e < this.vendors.length; e++) {
              var f = this.vendors[e];
              a["" + f + c.charAt(0).toUpperCase() + c.substr(1)] = d;
            }
          }
        }
      }, {
        key: "vendorCSS",
        value: function value(a, b) {
          for (var c = q(a), d = c.getPropertyCSSValue(b), e = 0; e < this.vendors.length; e++) {
            var f = this.vendors[e];
            d = d || c.getPropertyCSSValue("-" + f + "-" + b);
          }
          return d;
        }
      }, {
        key: "animationName",
        value: function value(a) {
          var b = void 0;
          try {
            b = this.vendorCSS(a, "animation-name").cssText;
          } catch (c) {
            b = q(a).getPropertyValue("animation-name");
          }
          return "none" === b ? "" : b;
        }
      }, {
        key: "cacheAnimationName",
        value: function value(a) {
          return this.animationNameCache.set(a, this.animationName(a));
        }
      }, {
        key: "cachedAnimationName",
        value: function value(a) {
          return this.animationNameCache.get(a);
        }
      }, {
        key: "scrollHandler",
        value: function value() {
          this.scrolled = !0;
        }
      }, {
        key: "scrollCallback",
        value: function value() {
          if (this.scrolled) {
            this.scrolled = !1;
            for (var a = [], b = 0; b < this.boxes.length; b++) {
              var c = this.boxes[b];
              if (c) {
                if (this.isVisible(c)) {
                  this.show(c);
                  continue;
                }
                a.push(c);
              }
            }
            this.boxes = a, this.boxes.length || this.config.live || this.stop();
          }
        }
      }, {
        key: "offsetTop",
        value: function value(a) {
          for (; void 0 === a.offsetTop;) a = a.parentNode;
          for (var b = a.offsetTop; a.offsetParent;) a = a.offsetParent, b += a.offsetTop;
          return b;
        }
      }, {
        key: "isVisible",
        value: function value(a) {
          var b = a.getAttribute("data-wow-offset") || this.config.offset,
            c = this.config.scrollContainer && this.config.scrollContainer.scrollTop || window.pageYOffset,
            d = c + Math.min(this.element.clientHeight, k()) - b,
            e = this.offsetTop(a),
            f = e + a.clientHeight;
          return d >= e && f >= c;
        }
      }, {
        key: "disabled",
        value: function value() {
          return !this.config.mobile && f(navigator.userAgent);
        }
      }]), a;
    }();
  b["default"] = r, a.exports = b["default"];
});

/***/ }),

/***/ "./assets/styles/app.scss":
/*!********************************!*\
  !*** ./assets/styles/app.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_core-js_internals_array-iteration_js-node_modules_core-js_internals_expo-9e55a2","vendors-node_modules_jquery_dist_jquery_js","vendors-node_modules_core-js_modules_es_array_for-each_js-node_modules_core-js_modules_es_str-cc3808","vendors-node_modules_flatpickr_dist_esm_index_js-node_modules_flatpickr_dist_l10n_fr_js","vendors-node_modules_bootstrap_dist_js_bootstrap_esm_js-node_modules_core-js_modules_es_array-fe8aad"], () => (__webpack_exec__("./assets/app.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDWSxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLEVBQUUsRUFBQyxLQUFJLElBQUl6QyxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLEVBQUUsRUFBQyxLQUFJLElBQUl1QyxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLEVBQUUsRUFBQ1YsQ0FBQyxDQUFDWSxDQUFDLENBQUMsQ0FBQ3pDLENBQUMsQ0FBQyxJQUFFbUUsQ0FBQyxDQUFDMUIsQ0FBQyxDQUFDLENBQUNGLENBQUMsQ0FBQyxHQUFDWixDQUFDLENBQUNZLENBQUMsQ0FBQyxDQUFDdkMsQ0FBQyxDQUFDO1VBQUMsT0FBTzZCLENBQUM7UUFBQTtRQUFDLFNBQVNzQyxDQUFDQSxDQUFDeEMsQ0FBQyxFQUFDO1VBQUMsT0FBTyxDQUFDLElBQUVBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUVBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUVBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUVBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUVBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUVBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUVBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUVBLENBQUMsQ0FBQyxD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Q0FBQyxDQUFDLENBQUMsR0FBQ2hELENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ29DLENBQUMsR0FBQ1QsQ0FBQyxDQUFDUyxDQUFDLEVBQUNZLENBQUMsQ0FBQyxDQUFDLEVBQUNoRCxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUdnRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNoRCxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNvQyxDQUFDLEdBQUNULENBQUMsQ0FBQ1MsQ0FBQyxFQUFDWSxDQUFDLENBQUMsQ0FBQztVQUFDLEtBQUksSUFBSXRDLENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsRUFBRSxFQUFDLEtBQUksSUFBSTZGLENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsRUFBRSxFQUFDbkUsQ0FBQyxDQUFDMUIsQ0FBQyxDQUFDLENBQUM2RixDQUFDLENBQUMsSUFBRTlELENBQUMsQ0FBQy9CLENBQUMsQ0FBQztVQUFDLE9BQU95RCxDQUFDLENBQUMvQixDQUFDLENBQUMsR0FBQyxDQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzBKLE1BQU0sQ0FBQzFKLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxD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QUFDLFNBQVN0QyxDQUFDQSxDQUFDRixDQUFDLEVBQUN3QyxDQUFDLEVBQUM7UUFBQyxLQUFJLElBQUl0QyxDQUFDLEdBQUMsQ0FBQyxFQUFDWSxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLEdBQUNkLENBQUMsQ0FBQ2hCLE1BQU0sRUFBQzhCLENBQUMsRUFBRSxFQUFDWixDQUFDLElBQUVGLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLEdBQUMwQixDQUFDLENBQUMxQixDQUFDLENBQUM7UUFBQyxPQUFPWixDQUFDO01BQUE7TUFBQyxTQUFTWSxDQUFDQSxDQUFDZCxDQUFDLEVBQUN3QyxDQUFDLEVBQUM7UUFBQyxPQUFNLENBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUN3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUN4QyxDQUFDLENB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RSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUxRSxDQUFDLEdBQUNVLENBQUMsR0FBQzZDLENBQUMsR0FBQzNDLENBQUMsR0FBQzhELENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUxRSxDQUFDLEdBQUNZLENBQUMsR0FBQzJDLENBQUMsR0FBQzdDLENBQUMsR0FBQ2dFLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLElBQUUxRSxDQUFDLEdBQUNBLENBQUMsR0FBQ1UsQ0FBQyxHQUFDQSxDQUFDLENBQUMsR0FBQzZDLENBQUMsRUFBQyxDQUFDLElBQUUzQyxDQUFDLEdBQUNGLENBQUMsR0FBQzZDLENBQUMsR0FBQ3ZELENBQUMsR0FBQzBFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUxRSxDQUFDLEdBQUNVLENBQUMsR0FBQzZDLENBQUMsR0FBQzNDLENBQUMsR0FBQzhELENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRTlELENBQUMsR0FBQ0YsQ0FBQyxHQUFDNkMsQ0FBQyxHQUFDdkQsQ0FBQyxHQUFDMEUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRTFFLENBQUMsR0FBQ0EsQ0FBQyxHQUFDWSxDQUFDLEdBQUNBLENBQUMsQ0FBQyxHQUFDMkMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7VUFBQyxLQUFJLE9BQU87WUFBQyxPQUFNLENBQUN6RCxDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUNkLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztVQUFDLEtBQUksUUFBUTtZQUFDLE9BQU0sQ0FBQ2QsQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7VUFBQyxLQUFJLFFBQVE7WUFBQyxPQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQ2QsQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1VBQUMsS0FBSSxRQUFRO1lBQUMsT0FBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQ2QsQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztVQUFDLEtBQUksU0FBUztZQUFDLE9BQU0sQ0FBQ2QsQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDZCxDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUNkLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7VUFBQyxLQUFJLE1BQU07WUFBQyxJQUFJYixDQUFDLEdBQUM1QixDQUFDLENBQUMyQixDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztjQUFDVSxDQUFDLEdBQUNuRCxDQUFDLENBQUMyQixDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE9BQU0sQ0FBQyxDQUFDLEVBQUNWLElBQUksQ0FBQ2cxRCxHQUFHLENBQUM1ekQsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQ3BCLElBQUksQ0FBQ2cxRCxHQUFHLENBQUNuMUQsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztVQUFDLEtBQUksT0FBTztZQUFDLElBQUl1QyxDQUFDLEdBQUNuRSxDQUFDLENBQUMyQixDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE9BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUNWLElBQUksQ0FBQ2cxRCxHQUFHLENBQUM1eUQsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztVQUFDLEtBQUksT0FBTztZQUFDLElBQUlBLENBQUMsR0FBQ25FLENBQUMsQ0FBQzJCLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsT0FBTSxDQUFDLENBQUMsRUFBQ1YsSUFBSSxDQUFDZzFELEdBQUcsQ0FBQzV5RCxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1VBQUMsS0FBSSxXQUFXO1lBQUMsSUFBSXRDLENBQUMsR0FBQ0YsQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUN1MEQsRUFBRSxJQUFFLENBQUM7Y0FBQ3YwRCxDQUFDLEdBQUNkLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDdTBELEVBQUUsSUFBRSxDQUFDO1lBQUMsT0FBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDbjFELENBQUMsRUFBQ1ksQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7VUFBQyxLQUFJLFlBQVk7WUFBQyxJQUFJWixDQUFDLEdBQUNGLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDdTBELEVBQUUsSUFBRSxDQUFDO1lBQUMsT0FBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDbjFELENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztVQUFDLEtBQUksWUFBWTtZQUFDLElBQUlZLENBQUMsR0FBQ2QsQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUN1MEQsRUFBRSxJQUFFLENBQUM7WUFBQyxPQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDdjBELENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1VBQUMsS0FBSSxZQUFZO1lBQUMsSUFBSUYsQ0FBQyxHQUFDWixDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ3UwRCxFQUFFLElBQUUsQ0FBQztZQUFDLE9BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDejBELENBQUMsRUFBQyxDQUFDLENBQUM7VUFBQyxLQUFJLGFBQWE7WUFBQyxJQUFJVixDQUFDLEdBQUNGLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDdTBELEVBQUUsSUFBRSxDQUFDO2NBQUN2MEQsQ0FBQyxHQUFDZCxDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ3UwRCxFQUFFLElBQUUsQ0FBQztjQUFDejBELENBQUMsR0FBQ1osQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUN1MEQsRUFBRSxJQUFFLENBQUM7WUFBQyxPQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUNuMUQsQ0FBQyxFQUFDWSxDQUFDLEVBQUNGLENBQUMsRUFBQyxDQUFDLENBQUM7VUFBQyxLQUFJLGFBQWE7WUFBQyxJQUFJOUIsQ0FBQyxHQUFDa0IsQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUN1MEQsRUFBRSxHQUFDLENBQUMsQ0FBQyxHQUFDcjFELENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDdTBELEVBQUUsR0FBQyxDQUFDO1lBQUMsT0FBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUN2MkQsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztVQUFDLEtBQUksUUFBUTtZQUFDLE9BQU0sQ0FBQ2tCLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDZCxDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDZCxDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ2QsQ0FBQyxDQUFDYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUNkLENBQUMsQ0FBQ2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDZCxDQUFDLENBQUNjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1VBQUMsS0FBSSxVQUFVO1lBQUMsT0FBT2QsQ0FBQyxDQUFDYyxDQUFDO1FBQUE7TUFBQztNQUFDLFNBQVNDLENBQUNBLENBQUNmLENBQUMsRUFBQztRQUFDLE9BQU8sQ0FBQyxLQUFHQSxDQUFDLENBQUNoQixNQUFNLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQ2dCLENBQUMsQ0FBQ29jLEdBQUcsQ0FBQ3hiLENBQUMsQ0FBQyxDQUFDZ2xDLE1BQU0sQ0FBQzlrQyxDQUFDLENBQUM7TUFBQTtNQUFDLFNBQVNMLENBQUNBLENBQUNULENBQUMsRUFBQztRQUFDLE9BQU0sQ0FBQ2pCLENBQUMsQ0FBQ2dDLENBQUMsQ0FBQ2YsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUFBO01BQUMsSUFBSWpCLENBQUMsR0FBQyxZQUFVO1FBQUMsU0FBU2lCLENBQUNBLENBQUNBLENBQUMsRUFBQztVQUFDLE9BQU9BLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FB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QyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQTtRQUFDLFNBQVMzQixDQUFDQSxDQUFDMkIsQ0FBQyxFQUFDd0MsQ0FBQyxFQUFDO1VBQUMsS0FBSSxJQUFJdEMsQ0FBQyxHQUFDLEVBQUUsRUFBQ1ksQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxFQUFFLEVBQUM7WUFBQyxLQUFJLElBQUl6QyxDQUFDLEdBQUMsQ0FBQyxFQUFDdUMsQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxFQUFFLEVBQUN2QyxDQUFDLElBQUUyQixDQUFDLENBQUNZLENBQUMsQ0FBQyxHQUFDNEIsQ0FBQyxDQUFDNUIsQ0FB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QUFDcEcsQ0FBQyxDQUFDdUssSUFBSSxDQUFDeEssQ0FBQyxDQUFDVCxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ2dCLENBQUMsQ0FBQ2hCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDdUssSUFBSSxDQUFDeEssQ0FBQyxDQUFDVCxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ2dCLENBQUMsQ0FBQ2hCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQy9CLENBQUMsQ0FBQ3NNLElBQUksQ0FBQzNKLENBQUMsQ0FBQ3RCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ21CLENBQUMsQ0FBQ25CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUvQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMrQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQUMsSUFBSTBELENBQUMsR0FBQy9DLENBQUMsQ0FBQ1UsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7VUFBQyxJQUFHUyxDQUFDLENBQUNULENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ3FDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxLQUFJLElBQUlOLENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsRUFBRSxFQUFDcEQsQ0FBQyxDQUFDb0QsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUMvQixDQUFDLENBQUMrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBQy9CLENBQUMsQ0FBQytCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFDL0IsQ0FBQyxDQUFDK0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDO1VBQUMsSUFBSXNCLENBQUM7WUFBQytCLENBQUM7WUFBQ2hDLENBQUMsR0FBQ3BELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQztVQUFDLE9BQU9vRCxDQUFDLEdBQUMsSUFBSSxJQUFFQyxDQUFDLEdBQUMsRUFBRSxHQUFDMUMsSUFBSSxDQUFDNmhCLElBQUksQ0FBQ3BmLENBQUMsQ0FBQyxFQUFDZ0MsQ0FBQyxHQUFDLENBQUMsQ0FBQ3BGLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFcUQsQ0FBQyxFQUFDLENBQUNyRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRXFELENBQUMsRUFBQyxDQUFDckQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUVxRCxDQUFDLEVBQUMsR0FBRyxHQUFDQSxDQUFDLENBQUMsSUFBRXJELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRXFELENBQUMsR0FBQyxDQUFDLEdBQUMxQyxJQUFJLENBQUM2aEIsSUFBSSxDQUFDLENBQUMsR0FBQ3hpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNvRixDQUFDLEdBQUMsQ0FBQyxHQUFHLEdBQUMvQixDQUFDLEVBQUMsQ0FBQ3JELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFcUQsQ0FBQyxFQUFDLENBQUNyRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRXFELENBQUMsRUFBQyxDQUFDckQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUVxRCxDQUFDLENBQUMsSUFBRXJELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFcUQsQ0FBQyxHQUFDLENBQUMsR0FBQzFDLElBQUksQ0FBQzZoQixJQUFJLENBQUMsQ0FBQyxHQUFDeGlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ29GLENBQUMsR0FBQyxDQUFDLENBQUNwRixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRXFELENBQUMsRUFBQyxHQUFHLEdBQUNBLENBQUMsRUFBQyxDQUFDckQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUVxRCxDQUFDLEVBQUMsQ0FBQ3JELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFcUQsQ0FBQyxDQUFDLEtBQUdBLENBQUMsR0FBQyxDQUFDLEdBQUMxQyxJQUFJLENBQUM2aEIsSUFBSSxDQUFDLENBQUMsR0FBQ3hpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNvRixDQUFDLEdBQUMsQ0FBQyxDQUFDcEYsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUVxRCxDQUFDLEVBQUMsQ0FBQ3JELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFcUQsQ0FBQyxFQUFDLEdBQUcsR0FBQ0EsQ0FBQyxFQUFDLENBQUNyRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRXFELENB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LENBQUMsSUFBSSxDQUFDN2tCLE9BQU8sQ0FBQ3RGLFlBQVksRUFBQzdRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQ2pCLENBQUM7WUFBQ25FLENBQUMsR0FBQyxJQUFJLENBQUNzTCxTQUFTLENBQUMzSixDQUFDLENBQUM7WUFBQ1ksQ0FBQyxHQUFDdkMsQ0FBQyxHQUFDMkIsQ0FBQyxDQUFDc1UsWUFBWTtVQUFDLE9BQU94VCxDQUFDLElBQUV6QyxDQUFDLElBQUV1QyxDQUFDLElBQUVWLENBQUM7UUFBQTtNQUFDLENBQUMsRUFBQztRQUFDWixHQUFHLEVBQUMsVUFBVTtRQUFDZ2pCLEtBQUssRUFBQyxTQUFBQSxNQUFBLEVBQVU7VUFBQyxPQUFNLENBQUMsSUFBSSxDQUFDekksTUFBTSxDQUFDc2dELE1BQU0sSUFBRXY1RCxDQUFDLENBQUM2TCxTQUFTLENBQUMwYSxTQUFTLENBQUM7UUFBQTtNQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNubkIsQ0FBQztJQUFBLENBQUMsQ0FBQyxDQUFDO0VBQUN3QyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUN6QyxDQUFDLEVBQUNDLENBQUMsQ0FBQzFCLE9BQU8sR0FBQ2tFLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFBQSxDQUFDLENBQUM7Ozs7Ozs7Ozs7OztBQ0ZsNlAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9ib290c3RyYXAubWluLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9jb3VudC11cC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2ZsYXRwaWNrci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvZ2xpZ2h0Ym94Lm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvaW1hZ2VzbG9hZGVkLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvaXNvdG9wZS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdGlueS1zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3dlYi1hbmltYXRpb25zLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvd293Lm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc3R5bGVzL2FwcC5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBXZWxjb21lIHRvIHlvdXIgYXBwJ3MgbWFpbiBKYXZhU2NyaXB0IGZpbGUhXG4gKlxuICogV2UgcmVjb21tZW5kIGluY2x1ZGluZyB0aGUgYnVpbHQgdmVyc2lvbiBvZiB0aGlzIEphdmFTY3JpcHQgZmlsZVxuICogKGFuZCBpdHMgQ1NTIGZpbGUpIGluIHlvdXIgYmFzZSBsYXlvdXQgKGJhc2UuaHRtbC50d2lnKS5cbiAqL1xuXG4vLyBhbnkgQ1NTIHlvdSBpbXBvcnQgd2lsbCBvdXRwdXQgaW50byBhIHNpbmdsZSBjc3MgZmlsZSAoYXBwLmNzcyBpbiB0aGlzIGNhc2UpXG5cbmltcG9ydCAnLi9zdHlsZXMvYXBwLnNjc3MnO1xuXG4vLyBzdGFydCB0aGUgU3RpbXVsdXMgYXBwbGljYXRpb25cbi8vIGltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgJ2pxdWVyeSc7IC8vIEltcG9ydCBqUXVlcnkgZmlyc3RcbmNvbnN0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbmdsb2JhbC4kID0gZ2xvYmFsLmpRdWVyeSA9ICQ7XG5cbmltcG9ydCAnLi9qcy9ib290c3RyYXAubWluLmpzJztcbmltcG9ydCAnLi9qcy9jb3VudC11cC5taW4uanMnO1xuaW1wb3J0ICcuL2pzL3Rpbnktc2xpZGVyLmpzJztcbmltcG9ydCAnLi9qcy9nbGlnaHRib3gubWluLmpzJztcbmltcG9ydCAnLi9qcy9pbWFnZXNsb2FkZWQubWluLmpzJztcbmltcG9ydCAnLi9qcy9pc290b3BlLm1pbi5qcyc7XG5pbXBvcnQgJy4vanMvd293Lm1pbi5qcyc7XG5pbXBvcnQgJy4vanMvd2ViLWFuaW1hdGlvbnMubWluLmpzJztcbmltcG9ydCAnLi9qcy9tYWluLmpzJztcbmltcG9ydCAnLi9qcy9mbGF0cGlja3InO1xuXG5cbndpbmRvdy5Qb3BwZXIgPSByZXF1aXJlKCcuL2pzL3BvcHBlci5qcycpO1xuXG4vLyBpbXBvcnQgJy4vYm9vdHN0cmFwJzsgLy9jc3MgcmVwbGFjZWQgYnkgYm9vdHN0cmFwLm1pblxuLy8gaW1wb3J0ICdib290c3RyYXAnOyAvL2RhbnMgbm9kZV9tb2R1bGVzXG5cblxuLy8gdGhpcyB0byBhY3RpdmUgdGhlIGJvb3RzdHJhcCBwb3BvdmVyIGZ1bmN0aW9uc1xuaW1wb3J0IHsgVG9vbHRpcCwgVG9hc3QsIFBvcG92ZXIgfSBmcm9tICdib290c3RyYXAnO1xuJChmdW5jdGlvbiAoKSB7XG4gICQoJ1tkYXRhLXRvZ2dsZT1cInBvcG92ZXJcIl0nKS5wb3BvdmVyKCk7XG59KTtcblxuLy8gZmFpcmUgYXBwYXJhw650cmUgbGUgbm9tIGRlIGzigJlpbWFnZSBhcHBhcmHDrnQgZGFucyBsZSBjaGFtcHMgZHUgZm9ybXVsYWlyZVxuLy8gJCgnLmN1c3RvbS1maWxlLWlucHV0Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4vLyAgIHZhciBpbnB1dEZpbGUgPSBlLmN1cnJlbnRUYXJnZXQ7XG4vLyAgJChpbnB1dEZpbGUpLnBhcmVudCgpLmZpbmQoJy5jdXN0b20tZmlsZS1sYWJlbCcpLmh0bWwoaW5wdXRGaWxlLmZpbGVzWzBdLm5hbWUpO1xuLy8gfSk7XG4iLCIvKiFcbiAgKiBCb290c3RyYXAgdjUuMC4wLWJldGExIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxuICAqIENvcHlyaWdodCAyMDExLTIwMjAgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgKi9cbiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcIi4vcG9wcGVyLmpzXCIpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcIi4vcG9wcGVyLmpzXCJdLGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuYm9vdHN0cmFwPWUodC5Qb3BwZXIpfSh0aGlzLChmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHQpe3JldHVybiB0JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJkZWZhdWx0XCJpbiB0P3Q6e2RlZmF1bHQ6dH19dmFyIG49ZSh0KTtmdW5jdGlvbiBpKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWVbbl07aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX1mdW5jdGlvbiBvKHQsZSxuKXtyZXR1cm4gZSYmaSh0LnByb3RvdHlwZSxlKSxuJiZpKHQsbiksdH1mdW5jdGlvbiBzKCl7cmV0dXJuKHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7dmFyIG49YXJndW1lbnRzW2VdO2Zvcih2YXIgaSBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLGkpJiYodFtpXT1uW2ldKX1yZXR1cm4gdH0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgcixhLGwsYyx1PWZ1bmN0aW9uKHQpe2Rve3QrPU1hdGguZmxvb3IoMWU2Kk1hdGgucmFuZG9tKCkpfXdoaWxlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpKTtyZXR1cm4gdH0saD1mdW5jdGlvbih0KXt2YXIgZT10LmdldEF0dHJpYnV0ZShcImRhdGEtdGFyZ2V0XCIpO2lmKCFlfHxcIiNcIj09PWUpe3ZhciBuPXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtlPW4mJlwiI1wiIT09bj9uLnRyaW0oKTpudWxsfXJldHVybiBlfSxmPWZ1bmN0aW9uKHQpe3ZhciBlPWgodCk7cmV0dXJuIGUmJmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk/ZTpudWxsfSxkPWZ1bmN0aW9uKHQpe3ZhciBlPWgodCk7cmV0dXJuIGU/ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTpudWxsfSxnPWZ1bmN0aW9uKHQpe2lmKCF0KXJldHVybiAwO3ZhciBlPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpLG49ZS50cmFuc2l0aW9uRHVyYXRpb24saT1lLnRyYW5zaXRpb25EZWxheSxvPXBhcnNlRmxvYXQobikscz1wYXJzZUZsb2F0KGkpO3JldHVybiBvfHxzPyhuPW4uc3BsaXQoXCIsXCIpWzBdLGk9aS5zcGxpdChcIixcIilbMF0sMWUzKihwYXJzZUZsb2F0KG4pK3BhcnNlRmxvYXQoaSkpKTowfSxwPWZ1bmN0aW9uKHQpe3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJ0cmFuc2l0aW9uZW5kXCIpKX0sbT1mdW5jdGlvbih0KXtyZXR1cm4odFswXXx8dCkubm9kZVR5cGV9LF89ZnVuY3Rpb24odCxlKXt2YXIgbj0hMSxpPWUrNTt0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsKGZ1bmN0aW9uIGUoKXtuPSEwLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIixlKX0pKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe258fHAodCl9KSxpKX0sdj1mdW5jdGlvbih0LGUsbil7T2JqZWN0LmtleXMobikuZm9yRWFjaCgoZnVuY3Rpb24oaSl7dmFyIG8scz1uW2ldLHI9ZVtpXSxhPXImJm0ocik/XCJlbGVtZW50XCI6bnVsbD09KG89cik/XCJcIitvOnt9LnRvU3RyaW5nLmNhbGwobykubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7aWYoIW5ldyBSZWdFeHAocykudGVzdChhKSl0aHJvdyBuZXcgRXJyb3IodC50b1VwcGVyQ2FzZSgpKyc6IE9wdGlvbiBcIicraSsnXCIgcHJvdmlkZWQgdHlwZSBcIicrYSsnXCIgYnV0IGV4cGVjdGVkIHR5cGUgXCInK3MrJ1wiLicpfSkpfSxiPWZ1bmN0aW9uKHQpe2lmKCF0KXJldHVybiExO2lmKHQuc3R5bGUmJnQucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnN0eWxlKXt2YXIgZT1nZXRDb21wdXRlZFN0eWxlKHQpLG49Z2V0Q29tcHV0ZWRTdHlsZSh0LnBhcmVudE5vZGUpO3JldHVyblwibm9uZVwiIT09ZS5kaXNwbGF5JiZcIm5vbmVcIiE9PW4uZGlzcGxheSYmXCJoaWRkZW5cIiE9PWUudmlzaWJpbGl0eX1yZXR1cm4hMX0seT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe319LHc9ZnVuY3Rpb24odCl7cmV0dXJuIHQub2Zmc2V0SGVpZ2h0fSxFPWZ1bmN0aW9uKCl7dmFyIHQ9d2luZG93LmpRdWVyeTtyZXR1cm4gdCYmIWRvY3VtZW50LmJvZHkuaGFzQXR0cmlidXRlKFwiZGF0YS1uby1qcXVlcnlcIik/dDpudWxsfSxUPShyPXt9LGE9MSx7c2V0OmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT10LmJzS2V5JiYodC5ic0tleT17a2V5OmUsaWQ6YX0sYSsrKSxyW3QuYnNLZXkuaWRdPW59LGdldDpmdW5jdGlvbih0LGUpe2lmKCF0fHx2b2lkIDA9PT10LmJzS2V5KXJldHVybiBudWxsO3ZhciBuPXQuYnNLZXk7cmV0dXJuIG4ua2V5PT09ZT9yW24uaWRdOm51bGx9LGRlbGV0ZTpmdW5jdGlvbih0LGUpe2lmKHZvaWQgMCE9PXQuYnNLZXkpe3ZhciBuPXQuYnNLZXk7bi5rZXk9PT1lJiYoZGVsZXRlIHJbbi5pZF0sZGVsZXRlIHQuYnNLZXkpfX19KSxrPWZ1bmN0aW9uKHQsZSxuKXtULnNldCh0LGUsbil9LEw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gVC5nZXQodCxlKX0sQz1mdW5jdGlvbih0LGUpe1QuZGVsZXRlKHQsZSl9LEE9RWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCxTPUVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IsRD0obD1uZXcgQ3VzdG9tRXZlbnQoXCJCb290c3RyYXBcIix7Y2FuY2VsYWJsZTohMH0pLChjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLmFkZEV2ZW50TGlzdGVuZXIoXCJCb290c3RyYXBcIiwoZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0pKSxsLnByZXZlbnREZWZhdWx0KCksYy5kaXNwYXRjaEV2ZW50KGwpLGwuZGVmYXVsdFByZXZlbnRlZCksST0vOnNjb3BlXFxiLzsoZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3RyeXt0LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgKlwiKX1jYXRjaCh0KXtyZXR1cm4hMX1yZXR1cm4hMH0pKCl8fChBPWZ1bmN0aW9uKHQpe2lmKCFJLnRlc3QodCkpcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbCh0KTt2YXIgZT1Cb29sZWFuKHRoaXMuaWQpO2V8fCh0aGlzLmlkPXUoXCJzY29wZVwiKSk7dmFyIG49bnVsbDt0cnl7dD10LnJlcGxhY2UoSSxcIiNcIit0aGlzLmlkKSxuPXRoaXMucXVlcnlTZWxlY3RvckFsbCh0KX1maW5hbGx5e2V8fHRoaXMucmVtb3ZlQXR0cmlidXRlKFwiaWRcIil9cmV0dXJuIG59LFM9ZnVuY3Rpb24odCl7aWYoIUkudGVzdCh0KSlyZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHQpO3ZhciBlPUEuY2FsbCh0aGlzLHQpO3JldHVybiB2b2lkIDAhPT1lWzBdP2VbMF06bnVsbH0pO3ZhciBPPUUoKSxOPS9bXi5dKig/PVxcLi4qKVxcLnwuKi8saj0vXFwuLiovLHg9Lzo6XFxkKyQvLFA9e30sUj0xLEg9e21vdXNlZW50ZXI6XCJtb3VzZW92ZXJcIixtb3VzZWxlYXZlOlwibW91c2VvdXRcIn0sQj1bXCJjbGlja1wiLFwiZGJsY2xpY2tcIixcIm1vdXNldXBcIixcIm1vdXNlZG93blwiLFwiY29udGV4dG1lbnVcIixcIm1vdXNld2hlZWxcIixcIkRPTU1vdXNlU2Nyb2xsXCIsXCJtb3VzZW92ZXJcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW1vdmVcIixcInNlbGVjdHN0YXJ0XCIsXCJzZWxlY3RlbmRcIixcImtleWRvd25cIixcImtleXByZXNzXCIsXCJrZXl1cFwiLFwib3JpZW50YXRpb25jaGFuZ2VcIixcInRvdWNoc3RhcnRcIixcInRvdWNobW92ZVwiLFwidG91Y2hlbmRcIixcInRvdWNoY2FuY2VsXCIsXCJwb2ludGVyZG93blwiLFwicG9pbnRlcm1vdmVcIixcInBvaW50ZXJ1cFwiLFwicG9pbnRlcmxlYXZlXCIsXCJwb2ludGVyY2FuY2VsXCIsXCJnZXN0dXJlc3RhcnRcIixcImdlc3R1cmVjaGFuZ2VcIixcImdlc3R1cmVlbmRcIixcImZvY3VzXCIsXCJibHVyXCIsXCJjaGFuZ2VcIixcInJlc2V0XCIsXCJzZWxlY3RcIixcInN1Ym1pdFwiLFwiZm9jdXNpblwiLFwiZm9jdXNvdXRcIixcImxvYWRcIixcInVubG9hZFwiLFwiYmVmb3JldW5sb2FkXCIsXCJyZXNpemVcIixcIm1vdmVcIixcIkRPTUNvbnRlbnRMb2FkZWRcIixcInJlYWR5c3RhdGVjaGFuZ2VcIixcImVycm9yXCIsXCJhYm9ydFwiLFwic2Nyb2xsXCJdO2Z1bmN0aW9uIE0odCxlKXtyZXR1cm4gZSYmZStcIjo6XCIrUisrfHx0LnVpZEV2ZW50fHxSKyt9ZnVuY3Rpb24gUSh0KXt2YXIgZT1NKHQpO3JldHVybiB0LnVpZEV2ZW50PWUsUFtlXT1QW2VdfHx7fSxQW2VdfWZ1bmN0aW9uIFUodCxlLG4pe3ZvaWQgMD09PW4mJihuPW51bGwpO2Zvcih2YXIgaT1PYmplY3Qua2V5cyh0KSxvPTAscz1pLmxlbmd0aDtvPHM7bysrKXt2YXIgcj10W2lbb11dO2lmKHIub3JpZ2luYWxIYW5kbGVyPT09ZSYmci5kZWxlZ2F0aW9uU2VsZWN0b3I9PT1uKXJldHVybiByfXJldHVybiBudWxsfWZ1bmN0aW9uIEYodCxlLG4pe3ZhciBpPVwic3RyaW5nXCI9PXR5cGVvZiBlLG89aT9uOmUscz10LnJlcGxhY2UoaixcIlwiKSxyPUhbc107cmV0dXJuIHImJihzPXIpLEIuaW5kZXhPZihzKT4tMXx8KHM9dCksW2ksbyxzXX1mdW5jdGlvbiBXKHQsZSxuLGksbyl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJnQpe258fChuPWksaT1udWxsKTt2YXIgcz1GKGUsbixpKSxyPXNbMF0sYT1zWzFdLGw9c1syXSxjPVEodCksdT1jW2xdfHwoY1tsXT17fSksaD1VKHUsYSxyP246bnVsbCk7aWYoaCloLm9uZU9mZj1oLm9uZU9mZiYmbztlbHNle3ZhciBmPU0oYSxlLnJlcGxhY2UoTixcIlwiKSksZD1yP2Z1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZnVuY3Rpb24gaShvKXtmb3IodmFyIHM9dC5xdWVyeVNlbGVjdG9yQWxsKGUpLHI9by50YXJnZXQ7ciYmciE9PXRoaXM7cj1yLnBhcmVudE5vZGUpZm9yKHZhciBhPXMubGVuZ3RoO2EtLTspaWYoc1thXT09PXIpcmV0dXJuIG8uZGVsZWdhdGVUYXJnZXQ9cixpLm9uZU9mZiYmVi5vZmYodCxvLnR5cGUsbiksbi5hcHBseShyLFtvXSk7cmV0dXJuIG51bGx9fSh0LG4saSk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24gbihpKXtyZXR1cm4gaS5kZWxlZ2F0ZVRhcmdldD10LG4ub25lT2ZmJiZWLm9mZih0LGkudHlwZSxlKSxlLmFwcGx5KHQsW2ldKX19KHQsbik7ZC5kZWxlZ2F0aW9uU2VsZWN0b3I9cj9uOm51bGwsZC5vcmlnaW5hbEhhbmRsZXI9YSxkLm9uZU9mZj1vLGQudWlkRXZlbnQ9Zix1W2ZdPWQsdC5hZGRFdmVudExpc3RlbmVyKGwsZCxyKX19fWZ1bmN0aW9uIEsodCxlLG4saSxvKXt2YXIgcz1VKGVbbl0saSxvKTtzJiYodC5yZW1vdmVFdmVudExpc3RlbmVyKG4scyxCb29sZWFuKG8pKSxkZWxldGUgZVtuXVtzLnVpZEV2ZW50XSl9dmFyIFY9e29uOmZ1bmN0aW9uKHQsZSxuLGkpe1codCxlLG4saSwhMSl9LG9uZTpmdW5jdGlvbih0LGUsbixpKXtXKHQsZSxuLGksITApfSxvZmY6ZnVuY3Rpb24odCxlLG4saSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJnQpe3ZhciBvPUYoZSxuLGkpLHM9b1swXSxyPW9bMV0sYT1vWzJdLGw9YSE9PWUsYz1RKHQpLHU9XCIuXCI9PT1lLmNoYXJBdCgwKTtpZih2b2lkIDA9PT1yKXt1JiZPYmplY3Qua2V5cyhjKS5mb3JFYWNoKChmdW5jdGlvbihuKXshZnVuY3Rpb24odCxlLG4saSl7dmFyIG89ZVtuXXx8e307T2JqZWN0LmtleXMobykuZm9yRWFjaCgoZnVuY3Rpb24ocyl7aWYocy5pbmRleE9mKGkpPi0xKXt2YXIgcj1vW3NdO0sodCxlLG4sci5vcmlnaW5hbEhhbmRsZXIsci5kZWxlZ2F0aW9uU2VsZWN0b3IpfX0pKX0odCxjLG4sZS5zbGljZSgxKSl9KSk7dmFyIGg9Y1thXXx8e307T2JqZWN0LmtleXMoaCkuZm9yRWFjaCgoZnVuY3Rpb24obil7dmFyIGk9bi5yZXBsYWNlKHgsXCJcIik7aWYoIWx8fGUuaW5kZXhPZihpKT4tMSl7dmFyIG89aFtuXTtLKHQsYyxhLG8ub3JpZ2luYWxIYW5kbGVyLG8uZGVsZWdhdGlvblNlbGVjdG9yKX19KSl9ZWxzZXtpZighY3x8IWNbYV0pcmV0dXJuO0sodCxjLGEscixzP246bnVsbCl9fX0sdHJpZ2dlcjpmdW5jdGlvbih0LGUsbil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCF0KXJldHVybiBudWxsO3ZhciBpLG89ZS5yZXBsYWNlKGosXCJcIikscz1lIT09byxyPUIuaW5kZXhPZihvKT4tMSxhPSEwLGw9ITAsYz0hMSx1PW51bGw7cmV0dXJuIHMmJk8mJihpPU8uRXZlbnQoZSxuKSxPKHQpLnRyaWdnZXIoaSksYT0haS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpLGw9IWkuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSxjPWkuaXNEZWZhdWx0UHJldmVudGVkKCkpLHI/KHU9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJIVE1MRXZlbnRzXCIpKS5pbml0RXZlbnQobyxhLCEwKTp1PW5ldyBDdXN0b21FdmVudChlLHtidWJibGVzOmEsY2FuY2VsYWJsZTohMH0pLHZvaWQgMCE9PW4mJk9iamVjdC5rZXlzKG4pLmZvckVhY2goKGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LHQse2dldDpmdW5jdGlvbigpe3JldHVybiBuW3RdfX0pfSkpLGMmJih1LnByZXZlbnREZWZhdWx0KCksRHx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHUsXCJkZWZhdWx0UHJldmVudGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiEwfX0pKSxsJiZ0LmRpc3BhdGNoRXZlbnQodSksdS5kZWZhdWx0UHJldmVudGVkJiZ2b2lkIDAhPT1pJiZpLnByZXZlbnREZWZhdWx0KCksdX19LHE9XCJhbGVydFwiLHo9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMuX2VsZW1lbnQ9dCx0aGlzLl9lbGVtZW50JiZrKHQsXCJicy5hbGVydFwiLHRoaXMpfXZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLmNsb3NlPWZ1bmN0aW9uKHQpe3ZhciBlPXQ/dGhpcy5fZ2V0Um9vdEVsZW1lbnQodCk6dGhpcy5fZWxlbWVudCxuPXRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KGUpO251bGw9PT1ufHxuLmRlZmF1bHRQcmV2ZW50ZWR8fHRoaXMuX3JlbW92ZUVsZW1lbnQoZSl9LGUuZGlzcG9zZT1mdW5jdGlvbigpe0ModGhpcy5fZWxlbWVudCxcImJzLmFsZXJ0XCIpLHRoaXMuX2VsZW1lbnQ9bnVsbH0sZS5fZ2V0Um9vdEVsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGQodCl8fHQuY2xvc2VzdChcIi5hbGVydFwiKX0sZS5fdHJpZ2dlckNsb3NlRXZlbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIFYudHJpZ2dlcih0LFwiY2xvc2UuYnMuYWxlcnRcIil9LGUuX3JlbW92ZUVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZih0LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpLHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmFkZVwiKSl7dmFyIG49Zyh0KTtWLm9uZSh0LFwidHJhbnNpdGlvbmVuZFwiLChmdW5jdGlvbigpe3JldHVybiBlLl9kZXN0cm95RWxlbWVudCh0KX0pKSxfKHQsbil9ZWxzZSB0aGlzLl9kZXN0cm95RWxlbWVudCh0KX0sZS5fZGVzdHJveUVsZW1lbnQ9ZnVuY3Rpb24odCl7dC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksVi50cmlnZ2VyKHQsXCJjbG9zZWQuYnMuYWxlcnRcIil9LHQualF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7dmFyIG49TCh0aGlzLFwiYnMuYWxlcnRcIik7bnx8KG49bmV3IHQodGhpcykpLFwiY2xvc2VcIj09PWUmJm5bZV0odGhpcyl9KSl9LHQuaGFuZGxlRGlzbWlzcz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7ZSYmZS5wcmV2ZW50RGVmYXVsdCgpLHQuY2xvc2UodGhpcyl9fSx0LmdldEluc3RhbmNlPWZ1bmN0aW9uKHQpe3JldHVybiBMKHQsXCJicy5hbGVydFwiKX0sbyh0LG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI1LjAuMC1hbHBoYTJcIn19XSksdH0oKTtWLm9uKGRvY3VtZW50LFwiY2xpY2suYnMuYWxlcnQuZGF0YS1hcGlcIiwnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJyx6LmhhbmRsZURpc21pc3MobmV3IHopKTt2YXIgWD1FKCk7aWYoWCl7dmFyIFk9WC5mbltxXTtYLmZuW3FdPXoualF1ZXJ5SW50ZXJmYWNlLFguZm5bcV0uQ29uc3RydWN0b3I9eixYLmZuW3FdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gWC5mbltxXT1ZLHoualF1ZXJ5SW50ZXJmYWNlfX12YXIgJD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5fZWxlbWVudD10LGsodCxcImJzLmJ1dHRvblwiLHRoaXMpfXZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLnRvZ2dsZT1mdW5jdGlvbigpe3RoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1wcmVzc2VkXCIsdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZlXCIpKX0sZS5kaXNwb3NlPWZ1bmN0aW9uKCl7Qyh0aGlzLl9lbGVtZW50LFwiYnMuYnV0dG9uXCIpLHRoaXMuX2VsZW1lbnQ9bnVsbH0sdC5qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXt2YXIgbj1MKHRoaXMsXCJicy5idXR0b25cIik7bnx8KG49bmV3IHQodGhpcykpLFwidG9nZ2xlXCI9PT1lJiZuW2VdKCl9KSl9LHQuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24odCl7cmV0dXJuIEwodCxcImJzLmJ1dHRvblwiKX0sbyh0LG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI1LjAuMC1hbHBoYTJcIn19XSksdH0oKTtWLm9uKGRvY3VtZW50LFwiY2xpY2suYnMuYnV0dG9uLmRhdGEtYXBpXCIsJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvblwiXScsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKTt2YXIgZT10LnRhcmdldC5jbG9zZXN0KCdbZGF0YS10b2dnbGU9XCJidXR0b25cIl0nKSxuPUwoZSxcImJzLmJ1dHRvblwiKTtufHwobj1uZXcgJChlKSksbi50b2dnbGUoKX0pKTt2YXIgRz1FKCk7aWYoRyl7dmFyIFo9Ry5mbi5idXR0b247Ry5mbi5idXR0b249JC5qUXVlcnlJbnRlcmZhY2UsRy5mbi5idXR0b24uQ29uc3RydWN0b3I9JCxHLmZuLmJ1dHRvbi5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIEcuZm4uYnV0dG9uPVosJC5qUXVlcnlJbnRlcmZhY2V9fWZ1bmN0aW9uIEoodCl7cmV0dXJuXCJ0cnVlXCI9PT10fHxcImZhbHNlXCIhPT10JiYodD09PU51bWJlcih0KS50b1N0cmluZygpP051bWJlcih0KTpcIlwiPT09dHx8XCJudWxsXCI9PT10P251bGw6dCl9ZnVuY3Rpb24gdHQodCl7cmV0dXJuIHQucmVwbGFjZSgvW0EtWl0vZywoZnVuY3Rpb24odCl7cmV0dXJuXCItXCIrdC50b0xvd2VyQ2FzZSgpfSkpfXZhciBldD17c2V0RGF0YUF0dHJpYnV0ZTpmdW5jdGlvbih0LGUsbil7dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLVwiK3R0KGUpLG4pfSxyZW1vdmVEYXRhQXR0cmlidXRlOmZ1bmN0aW9uKHQsZSl7dC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLVwiK3R0KGUpKX0sZ2V0RGF0YUF0dHJpYnV0ZXM6ZnVuY3Rpb24odCl7aWYoIXQpcmV0dXJue307dmFyIGU9cyh7fSx0LmRhdGFzZXQpO3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbih0KXtlW3RdPUooZVt0XSl9KSksZX0sZ2V0RGF0YUF0dHJpYnV0ZTpmdW5jdGlvbih0LGUpe3JldHVybiBKKHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1cIit0dChlKSkpfSxvZmZzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtyZXR1cm57dG9wOmUudG9wK2RvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLGxlZnQ6ZS5sZWZ0K2RvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdH19LHBvc2l0aW9uOmZ1bmN0aW9uKHQpe3JldHVybnt0b3A6dC5vZmZzZXRUb3AsbGVmdDp0Lm9mZnNldExlZnR9fSx0b2dnbGVDbGFzczpmdW5jdGlvbih0LGUpe3QmJih0LmNsYXNzTGlzdC5jb250YWlucyhlKT90LmNsYXNzTGlzdC5yZW1vdmUoZSk6dC5jbGFzc0xpc3QuYWRkKGUpKX19LG50PXttYXRjaGVzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQubWF0Y2hlcyhlKX0sZmluZDpmdW5jdGlvbih0LGUpe3ZhciBuO3JldHVybiB2b2lkIDA9PT1lJiYoZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLChuPVtdKS5jb25jYXQuYXBwbHkobixBLmNhbGwoZSx0KSl9LGZpbmRPbmU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSxTLmNhbGwoZSx0KX0sY2hpbGRyZW46ZnVuY3Rpb24odCxlKXt2YXIgbixpPShuPVtdKS5jb25jYXQuYXBwbHkobix0LmNoaWxkcmVuKTtyZXR1cm4gaS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm1hdGNoZXMoZSl9KSl9LHBhcmVudHM6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10saT10LnBhcmVudE5vZGU7aSYmaS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiYzIT09aS5ub2RlVHlwZTspdGhpcy5tYXRjaGVzKGksZSkmJm4ucHVzaChpKSxpPWkucGFyZW50Tm9kZTtyZXR1cm4gbn0scHJldjpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7bjspe2lmKG4ubWF0Y2hlcyhlKSlyZXR1cm5bbl07bj1uLnByZXZpb3VzRWxlbWVudFNpYmxpbmd9cmV0dXJuW119LG5leHQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5uZXh0RWxlbWVudFNpYmxpbmc7bjspe2lmKHRoaXMubWF0Y2hlcyhuLGUpKXJldHVybltuXTtuPW4ubmV4dEVsZW1lbnRTaWJsaW5nfXJldHVybltdfX0saXQ9XCJjYXJvdXNlbFwiLG90PVwiLmJzLmNhcm91c2VsXCIsc3Q9e2ludGVydmFsOjVlMyxrZXlib2FyZDohMCxzbGlkZTohMSxwYXVzZTpcImhvdmVyXCIsd3JhcDohMCx0b3VjaDohMH0scnQ9e2ludGVydmFsOlwiKG51bWJlcnxib29sZWFuKVwiLGtleWJvYXJkOlwiYm9vbGVhblwiLHNsaWRlOlwiKGJvb2xlYW58c3RyaW5nKVwiLHBhdXNlOlwiKHN0cmluZ3xib29sZWFuKVwiLHdyYXA6XCJib29sZWFuXCIsdG91Y2g6XCJib29sZWFuXCJ9LGF0PXtUT1VDSDpcInRvdWNoXCIsUEVOOlwicGVuXCJ9LGx0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3RoaXMuX2l0ZW1zPW51bGwsdGhpcy5faW50ZXJ2YWw9bnVsbCx0aGlzLl9hY3RpdmVFbGVtZW50PW51bGwsdGhpcy5faXNQYXVzZWQ9ITEsdGhpcy5faXNTbGlkaW5nPSExLHRoaXMudG91Y2hUaW1lb3V0PW51bGwsdGhpcy50b3VjaFN0YXJ0WD0wLHRoaXMudG91Y2hEZWx0YVg9MCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX2VsZW1lbnQ9dCx0aGlzLl9pbmRpY2F0b3JzRWxlbWVudD1udC5maW5kT25lKFwiLmNhcm91c2VsLWluZGljYXRvcnNcIix0aGlzLl9lbGVtZW50KSx0aGlzLl90b3VjaFN1cHBvcnRlZD1cIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHxuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHM+MCx0aGlzLl9wb2ludGVyRXZlbnQ9Qm9vbGVhbih3aW5kb3cuUG9pbnRlckV2ZW50KSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpLGsodCxcImJzLmNhcm91c2VsXCIsdGhpcyl9dmFyIGU9dC5wcm90b3R5cGU7cmV0dXJuIGUubmV4dD1mdW5jdGlvbigpe3RoaXMuX2lzU2xpZGluZ3x8dGhpcy5fc2xpZGUoXCJuZXh0XCIpfSxlLm5leHRXaGVuVmlzaWJsZT1mdW5jdGlvbigpeyFkb2N1bWVudC5oaWRkZW4mJmIodGhpcy5fZWxlbWVudCkmJnRoaXMubmV4dCgpfSxlLnByZXY9ZnVuY3Rpb24oKXt0aGlzLl9pc1NsaWRpbmd8fHRoaXMuX3NsaWRlKFwicHJldlwiKX0sZS5wYXVzZT1mdW5jdGlvbih0KXt0fHwodGhpcy5faXNQYXVzZWQ9ITApLG50LmZpbmRPbmUoXCIuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2XCIsdGhpcy5fZWxlbWVudCkmJihwKHRoaXMuX2VsZW1lbnQpLHRoaXMuY3ljbGUoITApKSxjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKSx0aGlzLl9pbnRlcnZhbD1udWxsfSxlLmN5Y2xlPWZ1bmN0aW9uKHQpe3R8fCh0aGlzLl9pc1BhdXNlZD0hMSksdGhpcy5faW50ZXJ2YWwmJihjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKSx0aGlzLl9pbnRlcnZhbD1udWxsKSx0aGlzLl9jb25maWcmJnRoaXMuX2NvbmZpZy5pbnRlcnZhbCYmIXRoaXMuX2lzUGF1c2VkJiYodGhpcy5faW50ZXJ2YWw9c2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZT90aGlzLm5leHRXaGVuVmlzaWJsZTp0aGlzLm5leHQpLmJpbmQodGhpcyksdGhpcy5fY29uZmlnLmludGVydmFsKSl9LGUudG89ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLl9hY3RpdmVFbGVtZW50PW50LmZpbmRPbmUoXCIuYWN0aXZlLmNhcm91c2VsLWl0ZW1cIix0aGlzLl9lbGVtZW50KTt2YXIgbj10aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7aWYoISh0PnRoaXMuX2l0ZW1zLmxlbmd0aC0xfHx0PDApKWlmKHRoaXMuX2lzU2xpZGluZylWLm9uZSh0aGlzLl9lbGVtZW50LFwic2xpZC5icy5jYXJvdXNlbFwiLChmdW5jdGlvbigpe3JldHVybiBlLnRvKHQpfSkpO2Vsc2V7aWYobj09PXQpcmV0dXJuIHRoaXMucGF1c2UoKSx2b2lkIHRoaXMuY3ljbGUoKTt2YXIgaT10Pm4/XCJuZXh0XCI6XCJwcmV2XCI7dGhpcy5fc2xpZGUoaSx0aGlzLl9pdGVtc1t0XSl9fSxlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtWLm9mZih0aGlzLl9lbGVtZW50LG90KSxDKHRoaXMuX2VsZW1lbnQsXCJicy5jYXJvdXNlbFwiKSx0aGlzLl9pdGVtcz1udWxsLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX2VsZW1lbnQ9bnVsbCx0aGlzLl9pbnRlcnZhbD1udWxsLHRoaXMuX2lzUGF1c2VkPW51bGwsdGhpcy5faXNTbGlkaW5nPW51bGwsdGhpcy5fYWN0aXZlRWxlbWVudD1udWxsLHRoaXMuX2luZGljYXRvcnNFbGVtZW50PW51bGx9LGUuX2dldENvbmZpZz1mdW5jdGlvbih0KXtyZXR1cm4gdD1zKHt9LHN0LHQpLHYoaXQsdCxydCksdH0sZS5faGFuZGxlU3dpcGU9ZnVuY3Rpb24oKXt2YXIgdD1NYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKTtpZighKHQ8PTQwKSl7dmFyIGU9dC90aGlzLnRvdWNoRGVsdGFYO3RoaXMudG91Y2hEZWx0YVg9MCxlPjAmJnRoaXMucHJldigpLGU8MCYmdGhpcy5uZXh0KCl9fSxlLl9hZGRFdmVudExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5fY29uZmlnLmtleWJvYXJkJiZWLm9uKHRoaXMuX2VsZW1lbnQsXCJrZXlkb3duLmJzLmNhcm91c2VsXCIsKGZ1bmN0aW9uKGUpe3JldHVybiB0Ll9rZXlkb3duKGUpfSkpLFwiaG92ZXJcIj09PXRoaXMuX2NvbmZpZy5wYXVzZSYmKFYub24odGhpcy5fZWxlbWVudCxcIm1vdXNlZW50ZXIuYnMuY2Fyb3VzZWxcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIHQucGF1c2UoZSl9KSksVi5vbih0aGlzLl9lbGVtZW50LFwibW91c2VsZWF2ZS5icy5jYXJvdXNlbFwiLChmdW5jdGlvbihlKXtyZXR1cm4gdC5jeWNsZShlKX0pKSksdGhpcy5fY29uZmlnLnRvdWNoJiZ0aGlzLl90b3VjaFN1cHBvcnRlZCYmdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpfSxlLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWZ1bmN0aW9uKGUpe3QuX3BvaW50ZXJFdmVudCYmYXRbZS5wb2ludGVyVHlwZS50b1VwcGVyQ2FzZSgpXT90LnRvdWNoU3RhcnRYPWUuY2xpZW50WDp0Ll9wb2ludGVyRXZlbnR8fCh0LnRvdWNoU3RhcnRYPWUudG91Y2hlc1swXS5jbGllbnRYKX0sbj1mdW5jdGlvbihlKXt0Ll9wb2ludGVyRXZlbnQmJmF0W2UucG9pbnRlclR5cGUudG9VcHBlckNhc2UoKV0mJih0LnRvdWNoRGVsdGFYPWUuY2xpZW50WC10LnRvdWNoU3RhcnRYKSx0Ll9oYW5kbGVTd2lwZSgpLFwiaG92ZXJcIj09PXQuX2NvbmZpZy5wYXVzZSYmKHQucGF1c2UoKSx0LnRvdWNoVGltZW91dCYmY2xlYXJUaW1lb3V0KHQudG91Y2hUaW1lb3V0KSx0LnRvdWNoVGltZW91dD1zZXRUaW1lb3V0KChmdW5jdGlvbihlKXtyZXR1cm4gdC5jeWNsZShlKX0pLDUwMCt0Ll9jb25maWcuaW50ZXJ2YWwpKX07bnQuZmluZChcIi5jYXJvdXNlbC1pdGVtIGltZ1wiLHRoaXMuX2VsZW1lbnQpLmZvckVhY2goKGZ1bmN0aW9uKHQpe1Yub24odCxcImRyYWdzdGFydC5icy5jYXJvdXNlbFwiLChmdW5jdGlvbih0KXtyZXR1cm4gdC5wcmV2ZW50RGVmYXVsdCgpfSkpfSkpLHRoaXMuX3BvaW50ZXJFdmVudD8oVi5vbih0aGlzLl9lbGVtZW50LFwicG9pbnRlcmRvd24uYnMuY2Fyb3VzZWxcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGUodCl9KSksVi5vbih0aGlzLl9lbGVtZW50LFwicG9pbnRlcnVwLmJzLmNhcm91c2VsXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQpfSkpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBvaW50ZXItZXZlbnRcIikpOihWLm9uKHRoaXMuX2VsZW1lbnQsXCJ0b3VjaHN0YXJ0LmJzLmNhcm91c2VsXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfSkpLFYub24odGhpcy5fZWxlbWVudCxcInRvdWNobW92ZS5icy5jYXJvdXNlbFwiLChmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZS50b3VjaGVzJiZlLnRvdWNoZXMubGVuZ3RoPjE/dC50b3VjaERlbHRhWD0wOnQudG91Y2hEZWx0YVg9ZS50b3VjaGVzWzBdLmNsaWVudFgtdC50b3VjaFN0YXJ0WH0oZSl9KSksVi5vbih0aGlzLl9lbGVtZW50LFwidG91Y2hlbmQuYnMuY2Fyb3VzZWxcIiwoZnVuY3Rpb24odCl7cmV0dXJuIG4odCl9KSkpfSxlLl9rZXlkb3duPWZ1bmN0aW9uKHQpe2lmKCEvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpKXN3aXRjaCh0LmtleSl7Y2FzZVwiQXJyb3dMZWZ0XCI6dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMucHJldigpO2JyZWFrO2Nhc2VcIkFycm93UmlnaHRcIjp0LnByZXZlbnREZWZhdWx0KCksdGhpcy5uZXh0KCl9fSxlLl9nZXRJdGVtSW5kZXg9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2l0ZW1zPXQmJnQucGFyZW50Tm9kZT9udC5maW5kKFwiLmNhcm91c2VsLWl0ZW1cIix0LnBhcmVudE5vZGUpOltdLHRoaXMuX2l0ZW1zLmluZGV4T2YodCl9LGUuX2dldEl0ZW1CeURpcmVjdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPVwibmV4dFwiPT09dCxpPVwicHJldlwiPT09dCxvPXRoaXMuX2dldEl0ZW1JbmRleChlKSxzPXRoaXMuX2l0ZW1zLmxlbmd0aC0xO2lmKChpJiYwPT09b3x8biYmbz09PXMpJiYhdGhpcy5fY29uZmlnLndyYXApcmV0dXJuIGU7dmFyIHI9KG8rKFwicHJldlwiPT09dD8tMToxKSkldGhpcy5faXRlbXMubGVuZ3RoO3JldHVybi0xPT09cj90aGlzLl9pdGVtc1t0aGlzLl9pdGVtcy5sZW5ndGgtMV06dGhpcy5faXRlbXNbcl19LGUuX3RyaWdnZXJTbGlkZUV2ZW50PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5fZ2V0SXRlbUluZGV4KHQpLGk9dGhpcy5fZ2V0SXRlbUluZGV4KG50LmZpbmRPbmUoXCIuYWN0aXZlLmNhcm91c2VsLWl0ZW1cIix0aGlzLl9lbGVtZW50KSk7cmV0dXJuIFYudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2xpZGUuYnMuY2Fyb3VzZWxcIix7cmVsYXRlZFRhcmdldDp0LGRpcmVjdGlvbjplLGZyb206aSx0bzpufSl9LGUuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQ9ZnVuY3Rpb24odCl7aWYodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpe2Zvcih2YXIgZT1udC5maW5kKFwiLmFjdGl2ZVwiLHRoaXMuX2luZGljYXRvcnNFbGVtZW50KSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO3ZhciBpPXRoaXMuX2luZGljYXRvcnNFbGVtZW50LmNoaWxkcmVuW3RoaXMuX2dldEl0ZW1JbmRleCh0KV07aSYmaS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpfX0sZS5fc2xpZGU9ZnVuY3Rpb24odCxlKXt2YXIgbixpLG8scz10aGlzLHI9bnQuZmluZE9uZShcIi5hY3RpdmUuY2Fyb3VzZWwtaXRlbVwiLHRoaXMuX2VsZW1lbnQpLGE9dGhpcy5fZ2V0SXRlbUluZGV4KHIpLGw9ZXx8ciYmdGhpcy5fZ2V0SXRlbUJ5RGlyZWN0aW9uKHQsciksYz10aGlzLl9nZXRJdGVtSW5kZXgobCksdT1Cb29sZWFuKHRoaXMuX2ludGVydmFsKTtpZihcIm5leHRcIj09PXQ/KG49XCJjYXJvdXNlbC1pdGVtLWxlZnRcIixpPVwiY2Fyb3VzZWwtaXRlbS1uZXh0XCIsbz1cImxlZnRcIik6KG49XCJjYXJvdXNlbC1pdGVtLXJpZ2h0XCIsaT1cImNhcm91c2VsLWl0ZW0tcHJldlwiLG89XCJyaWdodFwiKSxsJiZsLmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZVwiKSl0aGlzLl9pc1NsaWRpbmc9ITE7ZWxzZSBpZighdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobCxvKS5kZWZhdWx0UHJldmVudGVkJiZyJiZsKXtpZih0aGlzLl9pc1NsaWRpbmc9ITAsdSYmdGhpcy5wYXVzZSgpLHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobCksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJzbGlkZVwiKSl7bC5jbGFzc0xpc3QuYWRkKGkpLHcobCksci5jbGFzc0xpc3QuYWRkKG4pLGwuY2xhc3NMaXN0LmFkZChuKTt2YXIgaD1wYXJzZUludChsLmdldEF0dHJpYnV0ZShcImRhdGEtaW50ZXJ2YWxcIiksMTApO2g/KHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWw9dGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbHx8dGhpcy5fY29uZmlnLmludGVydmFsLHRoaXMuX2NvbmZpZy5pbnRlcnZhbD1oKTp0aGlzLl9jb25maWcuaW50ZXJ2YWw9dGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbHx8dGhpcy5fY29uZmlnLmludGVydmFsO3ZhciBmPWcocik7Vi5vbmUocixcInRyYW5zaXRpb25lbmRcIiwoZnVuY3Rpb24oKXtsLmNsYXNzTGlzdC5yZW1vdmUobixpKSxsLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIiksci5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIsaSxuKSxzLl9pc1NsaWRpbmc9ITEsc2V0VGltZW91dCgoZnVuY3Rpb24oKXtWLnRyaWdnZXIocy5fZWxlbWVudCxcInNsaWQuYnMuY2Fyb3VzZWxcIix7cmVsYXRlZFRhcmdldDpsLGRpcmVjdGlvbjpvLGZyb206YSx0bzpjfSl9KSwwKX0pKSxfKHIsZil9ZWxzZSByLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIiksbC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpLHRoaXMuX2lzU2xpZGluZz0hMSxWLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcInNsaWQuYnMuY2Fyb3VzZWxcIix7cmVsYXRlZFRhcmdldDpsLGRpcmVjdGlvbjpvLGZyb206YSx0bzpjfSk7dSYmdGhpcy5jeWNsZSgpfX0sdC5jYXJvdXNlbEludGVyZmFjZT1mdW5jdGlvbihlLG4pe3ZhciBpPUwoZSxcImJzLmNhcm91c2VsXCIpLG89cyh7fSxzdCxldC5nZXREYXRhQXR0cmlidXRlcyhlKSk7XCJvYmplY3RcIj09dHlwZW9mIG4mJihvPXMoe30sbyxuKSk7dmFyIHI9XCJzdHJpbmdcIj09dHlwZW9mIG4/bjpvLnNsaWRlO2lmKGl8fChpPW5ldyB0KGUsbykpLFwibnVtYmVyXCI9PXR5cGVvZiBuKWkudG8obik7ZWxzZSBpZihcInN0cmluZ1wiPT10eXBlb2Ygcil7aWYodm9pZCAwPT09aVtyXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK3IrJ1wiJyk7aVtyXSgpfWVsc2Ugby5pbnRlcnZhbCYmby5yaWRlJiYoaS5wYXVzZSgpLGkuY3ljbGUoKSl9LHQualF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7dC5jYXJvdXNlbEludGVyZmFjZSh0aGlzLGUpfSkpfSx0LmRhdGFBcGlDbGlja0hhbmRsZXI9ZnVuY3Rpb24oZSl7dmFyIG49ZCh0aGlzKTtpZihuJiZuLmNsYXNzTGlzdC5jb250YWlucyhcImNhcm91c2VsXCIpKXt2YXIgaT1zKHt9LGV0LmdldERhdGFBdHRyaWJ1dGVzKG4pLGV0LmdldERhdGFBdHRyaWJ1dGVzKHRoaXMpKSxvPXRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZS10b1wiKTtvJiYoaS5pbnRlcnZhbD0hMSksdC5jYXJvdXNlbEludGVyZmFjZShuLGkpLG8mJkwobixcImJzLmNhcm91c2VsXCIpLnRvKG8pLGUucHJldmVudERlZmF1bHQoKX19LHQuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24odCl7cmV0dXJuIEwodCxcImJzLmNhcm91c2VsXCIpfSxvKHQsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjUuMC4wLWFscGhhMlwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc3R9fV0pLHR9KCk7Vi5vbihkb2N1bWVudCxcImNsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpXCIsXCJbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXVwiLGx0LmRhdGFBcGlDbGlja0hhbmRsZXIpLFYub24od2luZG93LFwibG9hZC5icy5jYXJvdXNlbC5kYXRhLWFwaVwiLChmdW5jdGlvbigpe2Zvcih2YXIgdD1udC5maW5kKCdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nKSxlPTAsbj10Lmxlbmd0aDtlPG47ZSsrKWx0LmNhcm91c2VsSW50ZXJmYWNlKHRbZV0sTCh0W2VdLFwiYnMuY2Fyb3VzZWxcIikpfSkpO3ZhciBjdD1FKCk7aWYoY3Qpe3ZhciB1dD1jdC5mbltpdF07Y3QuZm5baXRdPWx0LmpRdWVyeUludGVyZmFjZSxjdC5mbltpdF0uQ29uc3RydWN0b3I9bHQsY3QuZm5baXRdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gY3QuZm5baXRdPXV0LGx0LmpRdWVyeUludGVyZmFjZX19dmFyIGh0PVwiY29sbGFwc2VcIixmdD17dG9nZ2xlOiEwLHBhcmVudDpcIlwifSxkdD17dG9nZ2xlOlwiYm9vbGVhblwiLHBhcmVudDpcIihzdHJpbmd8ZWxlbWVudClcIn0sZ3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX2VsZW1lbnQ9dCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX3RyaWdnZXJBcnJheT1udC5maW5kKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycrdC5pZCsnXCJdLFtkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycrdC5pZCsnXCJdJyk7Zm9yKHZhciBuPW50LmZpbmQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJyksaT0wLG89bi5sZW5ndGg7aTxvO2krKyl7dmFyIHM9bltpXSxyPWYocyksYT1udC5maW5kKHIpLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10fSkpO251bGwhPT1yJiZhLmxlbmd0aCYmKHRoaXMuX3NlbGVjdG9yPXIsdGhpcy5fdHJpZ2dlckFycmF5LnB1c2gocykpfXRoaXMuX3BhcmVudD10aGlzLl9jb25maWcucGFyZW50P3RoaXMuX2dldFBhcmVudCgpOm51bGwsdGhpcy5fY29uZmlnLnBhcmVudHx8dGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsdGhpcy5fdHJpZ2dlckFycmF5KSx0aGlzLl9jb25maWcudG9nZ2xlJiZ0aGlzLnRvZ2dsZSgpLGsodCxcImJzLmNvbGxhcHNlXCIsdGhpcyl9dmFyIGU9dC5wcm90b3R5cGU7cmV0dXJuIGUudG9nZ2xlPWZ1bmN0aW9uKCl7dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpP3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpfSxlLnNob3c9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKCF0aGlzLl9pc1RyYW5zaXRpb25pbmcmJiF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIikpe3ZhciBuLGk7dGhpcy5fcGFyZW50JiYwPT09KG49bnQuZmluZChcIi5zaG93LCAuY29sbGFwc2luZ1wiLHRoaXMuX3BhcmVudCkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZS5fY29uZmlnLnBhcmVudD90LmdldEF0dHJpYnV0ZShcImRhdGEtcGFyZW50XCIpPT09ZS5fY29uZmlnLnBhcmVudDp0LmNsYXNzTGlzdC5jb250YWlucyhcImNvbGxhcHNlXCIpfSkpKS5sZW5ndGgmJihuPW51bGwpO3ZhciBvPW50LmZpbmRPbmUodGhpcy5fc2VsZWN0b3IpO2lmKG4pe3ZhciBzPW4uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gbyE9PXR9KSk7aWYoKGk9c1swXT9MKHNbMF0sXCJicy5jb2xsYXBzZVwiKTpudWxsKSYmaS5faXNUcmFuc2l0aW9uaW5nKXJldHVybn1pZighVi50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93LmJzLmNvbGxhcHNlXCIpLmRlZmF1bHRQcmV2ZW50ZWQpe24mJm4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7byE9PWUmJnQuY29sbGFwc2VJbnRlcmZhY2UoZSxcImhpZGVcIiksaXx8ayhlLFwiYnMuY29sbGFwc2VcIixudWxsKX0pKTt2YXIgcj10aGlzLl9nZXREaW1lbnNpb24oKTt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsYXBzZVwiKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjb2xsYXBzaW5nXCIpLHRoaXMuX2VsZW1lbnQuc3R5bGVbcl09MCx0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoJiZ0aGlzLl90cmlnZ2VyQXJyYXkuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5jbGFzc0xpc3QucmVtb3ZlKFwiY29sbGFwc2VkXCIpLHQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCEwKX0pKSx0aGlzLnNldFRyYW5zaXRpb25pbmcoITApO3ZhciBhPVwic2Nyb2xsXCIrKHJbMF0udG9VcHBlckNhc2UoKStyLnNsaWNlKDEpKSxsPWcodGhpcy5fZWxlbWVudCk7Vi5vbmUodGhpcy5fZWxlbWVudCxcInRyYW5zaXRpb25lbmRcIiwoZnVuY3Rpb24oKXtlLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsYXBzaW5nXCIpLGUuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNvbGxhcHNlXCIsXCJzaG93XCIpLGUuX2VsZW1lbnQuc3R5bGVbcl09XCJcIixlLnNldFRyYW5zaXRpb25pbmcoITEpLFYudHJpZ2dlcihlLl9lbGVtZW50LFwic2hvd24uYnMuY29sbGFwc2VcIil9KSksXyh0aGlzLl9lbGVtZW50LGwpLHRoaXMuX2VsZW1lbnQuc3R5bGVbcl09dGhpcy5fZWxlbWVudFthXStcInB4XCJ9fX0sZS5oaWRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZighdGhpcy5faXNUcmFuc2l0aW9uaW5nJiZ0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIikmJiFWLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGUuYnMuY29sbGFwc2VcIikuZGVmYXVsdFByZXZlbnRlZCl7dmFyIGU9dGhpcy5fZ2V0RGltZW5zaW9uKCk7dGhpcy5fZWxlbWVudC5zdHlsZVtlXT10aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2VdK1wicHhcIix3KHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNvbGxhcHNpbmdcIiksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiY29sbGFwc2VcIixcInNob3dcIik7dmFyIG49dGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtpZihuPjApZm9yKHZhciBpPTA7aTxuO2krKyl7dmFyIG89dGhpcy5fdHJpZ2dlckFycmF5W2ldLHM9ZChvKTtzJiYhcy5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpJiYoby5jbGFzc0xpc3QuYWRkKFwiY29sbGFwc2VkXCIpLG8uc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCExKSl9dGhpcy5zZXRUcmFuc2l0aW9uaW5nKCEwKTt0aGlzLl9lbGVtZW50LnN0eWxlW2VdPVwiXCI7dmFyIHI9Zyh0aGlzLl9lbGVtZW50KTtWLm9uZSh0aGlzLl9lbGVtZW50LFwidHJhbnNpdGlvbmVuZFwiLChmdW5jdGlvbigpe3Quc2V0VHJhbnNpdGlvbmluZyghMSksdC5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiY29sbGFwc2luZ1wiKSx0Ll9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjb2xsYXBzZVwiKSxWLnRyaWdnZXIodC5fZWxlbWVudCxcImhpZGRlbi5icy5jb2xsYXBzZVwiKX0pKSxfKHRoaXMuX2VsZW1lbnQscil9fSxlLnNldFRyYW5zaXRpb25pbmc9ZnVuY3Rpb24odCl7dGhpcy5faXNUcmFuc2l0aW9uaW5nPXR9LGUuZGlzcG9zZT1mdW5jdGlvbigpe0ModGhpcy5fZWxlbWVudCxcImJzLmNvbGxhcHNlXCIpLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX3BhcmVudD1udWxsLHRoaXMuX2VsZW1lbnQ9bnVsbCx0aGlzLl90cmlnZ2VyQXJyYXk9bnVsbCx0aGlzLl9pc1RyYW5zaXRpb25pbmc9bnVsbH0sZS5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe3JldHVybih0PXMoe30sZnQsdCkpLnRvZ2dsZT1Cb29sZWFuKHQudG9nZ2xlKSx2KGh0LHQsZHQpLHR9LGUuX2dldERpbWVuc2lvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcIndpZHRoXCIpP1wid2lkdGhcIjpcImhlaWdodFwifSxlLl9nZXRQYXJlbnQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5fY29uZmlnLnBhcmVudDttKGUpP3ZvaWQgMD09PWUuanF1ZXJ5JiZ2b2lkIDA9PT1lWzBdfHwoZT1lWzBdKTplPW50LmZpbmRPbmUoZSk7dmFyIG49J1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJytlKydcIl0nO3JldHVybiBudC5maW5kKG4sZSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49ZChlKTt0Ll9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MobixbZV0pfSkpLGV9LGUuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcz1mdW5jdGlvbih0LGUpe2lmKHQmJmUubGVuZ3RoKXt2YXIgbj10LmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIik7ZS5mb3JFYWNoKChmdW5jdGlvbih0KXtuP3QuY2xhc3NMaXN0LnJlbW92ZShcImNvbGxhcHNlZFwiKTp0LmNsYXNzTGlzdC5hZGQoXCJjb2xsYXBzZWRcIiksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsbil9KSl9fSx0LmNvbGxhcHNlSW50ZXJmYWNlPWZ1bmN0aW9uKGUsbil7dmFyIGk9TChlLFwiYnMuY29sbGFwc2VcIiksbz1zKHt9LGZ0LGV0LmdldERhdGFBdHRyaWJ1dGVzKGUpLFwib2JqZWN0XCI9PXR5cGVvZiBuJiZuP246e30pO2lmKCFpJiZvLnRvZ2dsZSYmXCJzdHJpbmdcIj09dHlwZW9mIG4mJi9zaG93fGhpZGUvLnRlc3QobikmJihvLnRvZ2dsZT0hMSksaXx8KGk9bmV3IHQoZSxvKSksXCJzdHJpbmdcIj09dHlwZW9mIG4pe2lmKHZvaWQgMD09PWlbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO2lbbl0oKX19LHQualF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7dC5jb2xsYXBzZUludGVyZmFjZSh0aGlzLGUpfSkpfSx0LmdldEluc3RhbmNlPWZ1bmN0aW9uKHQpe3JldHVybiBMKHQsXCJicy5jb2xsYXBzZVwiKX0sbyh0LG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI1LjAuMC1hbHBoYTJcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ0fX1dKSx0fSgpO1Yub24oZG9jdW1lbnQsXCJjbGljay5icy5jb2xsYXBzZS5kYXRhLWFwaVwiLCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXScsKGZ1bmN0aW9uKHQpe1wiQVwiPT09dC50YXJnZXQudGFnTmFtZSYmdC5wcmV2ZW50RGVmYXVsdCgpO3ZhciBlPWV0LmdldERhdGFBdHRyaWJ1dGVzKHRoaXMpLG49Zih0aGlzKTtudC5maW5kKG4pLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuLGk9TCh0LFwiYnMuY29sbGFwc2VcIik7aT8obnVsbD09PWkuX3BhcmVudCYmXCJzdHJpbmdcIj09dHlwZW9mIGUucGFyZW50JiYoaS5fY29uZmlnLnBhcmVudD1lLnBhcmVudCxpLl9wYXJlbnQ9aS5fZ2V0UGFyZW50KCkpLG49XCJ0b2dnbGVcIik6bj1lLGd0LmNvbGxhcHNlSW50ZXJmYWNlKHQsbil9KSl9KSk7dmFyIHB0PUUoKTtpZihwdCl7dmFyIG10PXB0LmZuW2h0XTtwdC5mbltodF09Z3QualF1ZXJ5SW50ZXJmYWNlLHB0LmZuW2h0XS5Db25zdHJ1Y3Rvcj1ndCxwdC5mbltodF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBwdC5mbltodF09bXQsZ3QualF1ZXJ5SW50ZXJmYWNlfX12YXIgX3Q9XCJkcm9wZG93blwiLHZ0PW5ldyBSZWdFeHAoXCJBcnJvd1VwfEFycm93RG93bnxFc2NhcGVcIiksYnQ9e29mZnNldDowLGZsaXA6ITAsYm91bmRhcnk6XCJzY3JvbGxQYXJlbnRcIixyZWZlcmVuY2U6XCJ0b2dnbGVcIixkaXNwbGF5OlwiZHluYW1pY1wiLHBvcHBlckNvbmZpZzpudWxsfSx5dD17b2Zmc2V0OlwiKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pXCIsZmxpcDpcImJvb2xlYW5cIixib3VuZGFyeTpcIihzdHJpbmd8ZWxlbWVudClcIixyZWZlcmVuY2U6XCIoc3RyaW5nfGVsZW1lbnQpXCIsZGlzcGxheTpcInN0cmluZ1wiLHBvcHBlckNvbmZpZzpcIihudWxsfG9iamVjdClcIn0sd3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dGhpcy5fZWxlbWVudD10LHRoaXMuX3BvcHBlcj1udWxsLHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5fbWVudT10aGlzLl9nZXRNZW51RWxlbWVudCgpLHRoaXMuX2luTmF2YmFyPXRoaXMuX2RldGVjdE5hdmJhcigpLHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCksayh0LFwiYnMuZHJvcGRvd25cIix0aGlzKX12YXIgZT10LnByb3RvdHlwZTtyZXR1cm4gZS50b2dnbGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZWxlbWVudC5kaXNhYmxlZCYmIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIikpe3ZhciBlPXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKTt0LmNsZWFyTWVudXMoKSxlfHx0aGlzLnNob3coKX19LGUuc2hvdz1mdW5jdGlvbigpe2lmKCEodGhpcy5fZWxlbWVudC5kaXNhYmxlZHx8dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlZFwiKXx8dGhpcy5fbWVudS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKSl7dmFyIGU9dC5nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KSxpPXtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9O2lmKCFWLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcInNob3cuYnMuZHJvcGRvd25cIixpKS5kZWZhdWx0UHJldmVudGVkKXtpZighdGhpcy5faW5OYXZiYXIpe2lmKHZvaWQgMD09PW4uZGVmYXVsdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9vdHN0cmFwJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpXCIpO3ZhciBvPXRoaXMuX2VsZW1lbnQ7XCJwYXJlbnRcIj09PXRoaXMuX2NvbmZpZy5yZWZlcmVuY2U/bz1lOm0odGhpcy5fY29uZmlnLnJlZmVyZW5jZSkmJihvPXRoaXMuX2NvbmZpZy5yZWZlcmVuY2Usdm9pZCAwIT09dGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkmJihvPXRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF0pKSxcInNjcm9sbFBhcmVudFwiIT09dGhpcy5fY29uZmlnLmJvdW5kYXJ5JiZlLmNsYXNzTGlzdC5hZGQoXCJwb3NpdGlvbi1zdGF0aWNcIiksdGhpcy5fcG9wcGVyPW5ldyBuLmRlZmF1bHQobyx0aGlzLl9tZW51LHRoaXMuX2dldFBvcHBlckNvbmZpZygpKX12YXIgcztpZihcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiYhZS5jbG9zZXN0KFwiLm5hdmJhci1uYXZcIikpKHM9W10pLmNvbmNhdC5hcHBseShzLGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBWLm9uKHQsXCJtb3VzZW92ZXJcIixudWxsLChmdW5jdGlvbigpe30pKX0pKTt0aGlzLl9lbGVtZW50LmZvY3VzKCksdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsITApLGV0LnRvZ2dsZUNsYXNzKHRoaXMuX21lbnUsXCJzaG93XCIpLGV0LnRvZ2dsZUNsYXNzKHRoaXMuX2VsZW1lbnQsXCJzaG93XCIpLFYudHJpZ2dlcihlLFwic2hvd24uYnMuZHJvcGRvd25cIixpKX19fSxlLmhpZGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZWxlbWVudC5kaXNhYmxlZCYmIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIikmJnRoaXMuX21lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKSl7dmFyIGU9dC5nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KSxuPXtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9O1YudHJpZ2dlcihlLFwiaGlkZS5icy5kcm9wZG93blwiLG4pLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5kZXN0cm95KCksZXQudG9nZ2xlQ2xhc3ModGhpcy5fbWVudSxcInNob3dcIiksZXQudG9nZ2xlQ2xhc3ModGhpcy5fZWxlbWVudCxcInNob3dcIiksVi50cmlnZ2VyKGUsXCJoaWRkZW4uYnMuZHJvcGRvd25cIixuKSl9fSxlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtDKHRoaXMuX2VsZW1lbnQsXCJicy5kcm9wZG93blwiKSxWLm9mZih0aGlzLl9lbGVtZW50LFwiLmJzLmRyb3Bkb3duXCIpLHRoaXMuX2VsZW1lbnQ9bnVsbCx0aGlzLl9tZW51PW51bGwsdGhpcy5fcG9wcGVyJiYodGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9wb3BwZXI9bnVsbCl9LGUudXBkYXRlPWZ1bmN0aW9uKCl7dGhpcy5faW5OYXZiYXI9dGhpcy5fZGV0ZWN0TmF2YmFyKCksdGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKX0sZS5fYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO1Yub24odGhpcy5fZWxlbWVudCxcImNsaWNrLmJzLmRyb3Bkb3duXCIsKGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLHQudG9nZ2xlKCl9KSl9LGUuX2dldENvbmZpZz1mdW5jdGlvbih0KXtyZXR1cm4gdD1zKHt9LHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxldC5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSx0KSx2KF90LHQsdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksdH0sZS5fZ2V0TWVudUVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gbnQubmV4dCh0aGlzLl9lbGVtZW50LFwiLmRyb3Bkb3duLW1lbnVcIilbMF19LGUuX2dldFBsYWNlbWVudD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSxlPVwiYm90dG9tLXN0YXJ0XCI7cmV0dXJuIHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcHVwXCIpPyhlPVwidG9wLXN0YXJ0XCIsdGhpcy5fbWVudS5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wZG93bi1tZW51LXJpZ2h0XCIpJiYoZT1cInRvcC1lbmRcIikpOnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcHJpZ2h0XCIpP2U9XCJyaWdodC1zdGFydFwiOnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcGxlZnRcIik/ZT1cImxlZnQtc3RhcnRcIjp0aGlzLl9tZW51LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3Bkb3duLW1lbnUtcmlnaHRcIikmJihlPVwiYm90dG9tLWVuZFwiKSxlfSxlLl9kZXRlY3ROYXZiYXI9ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbih0aGlzLl9lbGVtZW50LmNsb3Nlc3QoXCIubmF2YmFyXCIpKX0sZS5fZ2V0T2Zmc2V0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXt9O3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuX2NvbmZpZy5vZmZzZXQ/ZS5mbj1mdW5jdGlvbihlKXtyZXR1cm4gZS5vZmZzZXRzPXMoe30sZS5vZmZzZXRzLHQuX2NvbmZpZy5vZmZzZXQoZS5vZmZzZXRzLHQuX2VsZW1lbnQpfHx7fSksZX06ZS5vZmZzZXQ9dGhpcy5fY29uZmlnLm9mZnNldCxlfSxlLl9nZXRQb3BwZXJDb25maWc9ZnVuY3Rpb24oKXt2YXIgdD17cGxhY2VtZW50OnRoaXMuX2dldFBsYWNlbWVudCgpLG1vZGlmaWVyczp7b2Zmc2V0OnRoaXMuX2dldE9mZnNldCgpLGZsaXA6e2VuYWJsZWQ6dGhpcy5fY29uZmlnLmZsaXB9LHByZXZlbnRPdmVyZmxvdzp7Ym91bmRhcmllc0VsZW1lbnQ6dGhpcy5fY29uZmlnLmJvdW5kYXJ5fX19O3JldHVyblwic3RhdGljXCI9PT10aGlzLl9jb25maWcuZGlzcGxheSYmKHQubW9kaWZpZXJzLmFwcGx5U3R5bGU9e2VuYWJsZWQ6ITF9KSxzKHt9LHQsdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyl9LHQuZHJvcGRvd25JbnRlcmZhY2U9ZnVuY3Rpb24oZSxuKXt2YXIgaT1MKGUsXCJicy5kcm9wZG93blwiKTtpZihpfHwoaT1uZXcgdChlLFwib2JqZWN0XCI9PXR5cGVvZiBuP246bnVsbCkpLFwic3RyaW5nXCI9PXR5cGVvZiBuKXtpZih2b2lkIDA9PT1pW25dKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrbisnXCInKTtpW25dKCl9fSx0LmpRdWVyeUludGVyZmFjZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe3QuZHJvcGRvd25JbnRlcmZhY2UodGhpcyxlKX0pKX0sdC5jbGVhck1lbnVzPWZ1bmN0aW9uKGUpe2lmKCFlfHwyIT09ZS5idXR0b24mJihcImtleXVwXCIhPT1lLnR5cGV8fFwiVGFiXCI9PT1lLmtleSkpZm9yKHZhciBuPW50LmZpbmQoJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyksaT0wLG89bi5sZW5ndGg7aTxvO2krKyl7dmFyIHM9dC5nZXRQYXJlbnRGcm9tRWxlbWVudChuW2ldKSxyPUwobltpXSxcImJzLmRyb3Bkb3duXCIpLGE9e3JlbGF0ZWRUYXJnZXQ6bltpXX07aWYoZSYmXCJjbGlja1wiPT09ZS50eXBlJiYoYS5jbGlja0V2ZW50PWUpLHIpe3ZhciBsPXIuX21lbnU7aWYobltpXS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKWlmKCEoZSYmKFwiY2xpY2tcIj09PWUudHlwZSYmL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKXx8XCJrZXl1cFwiPT09ZS50eXBlJiZcIlRhYlwiPT09ZS5rZXkpJiZsLmNvbnRhaW5zKGUudGFyZ2V0KSkpaWYoIVYudHJpZ2dlcihzLFwiaGlkZS5icy5kcm9wZG93blwiLGEpLmRlZmF1bHRQcmV2ZW50ZWQpe3ZhciBjO2lmKFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKGM9W10pLmNvbmNhdC5hcHBseShjLGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBWLm9mZih0LFwibW91c2VvdmVyXCIsbnVsbCwoZnVuY3Rpb24oKXt9KSl9KSk7bltpXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKSxyLl9wb3BwZXImJnIuX3BvcHBlci5kZXN0cm95KCksbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKSxuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpLFYudHJpZ2dlcihzLFwiaGlkZGVuLmJzLmRyb3Bkb3duXCIsYSl9fX19LHQuZ2V0UGFyZW50RnJvbUVsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGQodCl8fHQucGFyZW50Tm9kZX0sdC5kYXRhQXBpS2V5ZG93bkhhbmRsZXI9ZnVuY3Rpb24oZSl7aWYoISgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpP1wiU3BhY2VcIj09PWUua2V5fHxcIkVzY2FwZVwiIT09ZS5rZXkmJihcIkFycm93RG93blwiIT09ZS5rZXkmJlwiQXJyb3dVcFwiIT09ZS5rZXl8fGUudGFyZ2V0LmNsb3Nlc3QoXCIuZHJvcGRvd24tbWVudVwiKSk6IXZ0LnRlc3QoZS5rZXkpKSYmKGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLCF0aGlzLmRpc2FibGVkJiYhdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlZFwiKSkpe3ZhciBuPXQuZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyksaT10aGlzLmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIik7aWYoXCJFc2NhcGVcIj09PWUua2V5KXJldHVybih0aGlzLm1hdGNoZXMoJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyk/dGhpczpudC5wcmV2KHRoaXMsJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJylbMF0pLmZvY3VzKCksdm9pZCB0LmNsZWFyTWVudXMoKTtpZihpJiZcIlNwYWNlXCIhPT1lLmtleSl7dmFyIG89bnQuZmluZChcIi5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpXCIsbikuZmlsdGVyKGIpO2lmKG8ubGVuZ3RoKXt2YXIgcz1vLmluZGV4T2YoZS50YXJnZXQpO1wiQXJyb3dVcFwiPT09ZS5rZXkmJnM+MCYmcy0tLFwiQXJyb3dEb3duXCI9PT1lLmtleSYmczxvLmxlbmd0aC0xJiZzKyssb1tzPS0xPT09cz8wOnNdLmZvY3VzKCl9fWVsc2UgdC5jbGVhck1lbnVzKCl9fSx0LmdldEluc3RhbmNlPWZ1bmN0aW9uKHQpe3JldHVybiBMKHQsXCJicy5kcm9wZG93blwiKX0sbyh0LG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI1LjAuMC1hbHBoYTJcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGJ0fX0se2tleTpcIkRlZmF1bHRUeXBlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHl0fX1dKSx0fSgpO1Yub24oZG9jdW1lbnQsXCJrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyx3dC5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLFYub24oZG9jdW1lbnQsXCJrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsXCIuZHJvcGRvd24tbWVudVwiLHd0LmRhdGFBcGlLZXlkb3duSGFuZGxlciksVi5vbihkb2N1bWVudCxcImNsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsd3QuY2xlYXJNZW51cyksVi5vbihkb2N1bWVudCxcImtleXVwLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsd3QuY2xlYXJNZW51cyksVi5vbihkb2N1bWVudCxcImNsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJywoZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksd3QuZHJvcGRvd25JbnRlcmZhY2UodGhpcyxcInRvZ2dsZVwiKX0pKSxWLm9uKGRvY3VtZW50LFwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIixcIi5kcm9wZG93biBmb3JtXCIsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnN0b3BQcm9wYWdhdGlvbigpfSkpO3ZhciBFdD1FKCk7aWYoRXQpe3ZhciBUdD1FdC5mbltfdF07RXQuZm5bX3RdPXd0LmpRdWVyeUludGVyZmFjZSxFdC5mbltfdF0uQ29uc3RydWN0b3I9d3QsRXQuZm5bX3RdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gRXQuZm5bX3RdPVR0LHd0LmpRdWVyeUludGVyZmFjZX19dmFyIGt0PXtiYWNrZHJvcDohMCxrZXlib2FyZDohMCxmb2N1czohMCxzaG93OiEwfSxMdD17YmFja2Ryb3A6XCIoYm9vbGVhbnxzdHJpbmcpXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIsZm9jdXM6XCJib29sZWFuXCIsc2hvdzpcImJvb2xlYW5cIn0sQ3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9lbGVtZW50PXQsdGhpcy5fZGlhbG9nPW50LmZpbmRPbmUoXCIubW9kYWwtZGlhbG9nXCIsdCksdGhpcy5fYmFja2Ryb3A9bnVsbCx0aGlzLl9pc1Nob3duPSExLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nPSExLHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2s9ITEsdGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX3Njcm9sbGJhcldpZHRoPTAsayh0LFwiYnMubW9kYWxcIix0aGlzKX12YXIgZT10LnByb3RvdHlwZTtyZXR1cm4gZS50b2dnbGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2lzU2hvd24/dGhpcy5oaWRlKCk6dGhpcy5zaG93KHQpfSxlLnNob3c9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZighdGhpcy5faXNTaG93biYmIXRoaXMuX2lzVHJhbnNpdGlvbmluZyl7dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpJiYodGhpcy5faXNUcmFuc2l0aW9uaW5nPSEwKTt2YXIgbj1WLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcInNob3cuYnMubW9kYWxcIix7cmVsYXRlZFRhcmdldDp0fSk7dGhpcy5faXNTaG93bnx8bi5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5faXNTaG93bj0hMCx0aGlzLl9jaGVja1Njcm9sbGJhcigpLHRoaXMuX3NldFNjcm9sbGJhcigpLHRoaXMuX2FkanVzdERpYWxvZygpLHRoaXMuX3NldEVzY2FwZUV2ZW50KCksdGhpcy5fc2V0UmVzaXplRXZlbnQoKSxWLm9uKHRoaXMuX2VsZW1lbnQsXCJjbGljay5kaXNtaXNzLmJzLm1vZGFsXCIsJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsKGZ1bmN0aW9uKHQpe3JldHVybiBlLmhpZGUodCl9KSksVi5vbih0aGlzLl9kaWFsb2csXCJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLChmdW5jdGlvbigpe1Yub25lKGUuX2VsZW1lbnQsXCJtb3VzZXVwLmRpc21pc3MuYnMubW9kYWxcIiwoZnVuY3Rpb24odCl7dC50YXJnZXQ9PT1lLl9lbGVtZW50JiYoZS5faWdub3JlQmFja2Ryb3BDbGljaz0hMCl9KSl9KSksdGhpcy5fc2hvd0JhY2tkcm9wKChmdW5jdGlvbigpe3JldHVybiBlLl9zaG93RWxlbWVudCh0KX0pKSl9fSxlLmhpZGU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZigodCYmdC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuX2lzU2hvd24mJiF0aGlzLl9pc1RyYW5zaXRpb25pbmcpJiYhVi50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRlLmJzLm1vZGFsXCIpLmRlZmF1bHRQcmV2ZW50ZWQpe3RoaXMuX2lzU2hvd249ITE7dmFyIG49dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpO2lmKG4mJih0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITApLHRoaXMuX3NldEVzY2FwZUV2ZW50KCksdGhpcy5fc2V0UmVzaXplRXZlbnQoKSxWLm9mZihkb2N1bWVudCxcImZvY3VzaW4uYnMubW9kYWxcIiksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKSxWLm9mZih0aGlzLl9lbGVtZW50LFwiY2xpY2suZGlzbWlzcy5icy5tb2RhbFwiKSxWLm9mZih0aGlzLl9kaWFsb2csXCJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbFwiKSxuKXt2YXIgaT1nKHRoaXMuX2VsZW1lbnQpO1Yub25lKHRoaXMuX2VsZW1lbnQsXCJ0cmFuc2l0aW9uZW5kXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBlLl9oaWRlTW9kYWwodCl9KSksXyh0aGlzLl9lbGVtZW50LGkpfWVsc2UgdGhpcy5faGlkZU1vZGFsKCl9fSxlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtbd2luZG93LHRoaXMuX2VsZW1lbnQsdGhpcy5fZGlhbG9nXS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gVi5vZmYodCxcIi5icy5tb2RhbFwiKX0pKSxWLm9mZihkb2N1bWVudCxcImZvY3VzaW4uYnMubW9kYWxcIiksQyh0aGlzLl9lbGVtZW50LFwiYnMubW9kYWxcIiksdGhpcy5fY29uZmlnPW51bGwsdGhpcy5fZWxlbWVudD1udWxsLHRoaXMuX2RpYWxvZz1udWxsLHRoaXMuX2JhY2tkcm9wPW51bGwsdGhpcy5faXNTaG93bj1udWxsLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nPW51bGwsdGhpcy5faWdub3JlQmFja2Ryb3BDbGljaz1udWxsLHRoaXMuX2lzVHJhbnNpdGlvbmluZz1udWxsLHRoaXMuX3Njcm9sbGJhcldpZHRoPW51bGx9LGUuaGFuZGxlVXBkYXRlPWZ1bmN0aW9uKCl7dGhpcy5fYWRqdXN0RGlhbG9nKCl9LGUuX2dldENvbmZpZz1mdW5jdGlvbih0KXtyZXR1cm4gdD1zKHt9LGt0LHQpLHYoXCJtb2RhbFwiLHQsTHQpLHR9LGUuX3Nob3dFbGVtZW50PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImZhZGVcIiksaT1udC5maW5kT25lKFwiLm1vZGFsLWJvZHlcIix0aGlzLl9kaWFsb2cpO3RoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSYmdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREV8fGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCksdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiLCEwKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIixcImRpYWxvZ1wiKSx0aGlzLl9lbGVtZW50LnNjcm9sbFRvcD0wLGkmJihpLnNjcm9sbFRvcD0wKSxuJiZ3KHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInNob3dcIiksdGhpcy5fY29uZmlnLmZvY3VzJiZ0aGlzLl9lbmZvcmNlRm9jdXMoKTt2YXIgbz1mdW5jdGlvbigpe2UuX2NvbmZpZy5mb2N1cyYmZS5fZWxlbWVudC5mb2N1cygpLGUuX2lzVHJhbnNpdGlvbmluZz0hMSxWLnRyaWdnZXIoZS5fZWxlbWVudCxcInNob3duLmJzLm1vZGFsXCIse3JlbGF0ZWRUYXJnZXQ6dH0pfTtpZihuKXt2YXIgcz1nKHRoaXMuX2RpYWxvZyk7Vi5vbmUodGhpcy5fZGlhbG9nLFwidHJhbnNpdGlvbmVuZFwiLG8pLF8odGhpcy5fZGlhbG9nLHMpfWVsc2UgbygpfSxlLl9lbmZvcmNlRm9jdXM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO1Yub2ZmKGRvY3VtZW50LFwiZm9jdXNpbi5icy5tb2RhbFwiKSxWLm9uKGRvY3VtZW50LFwiZm9jdXNpbi5icy5tb2RhbFwiLChmdW5jdGlvbihlKXtkb2N1bWVudD09PWUudGFyZ2V0fHx0Ll9lbGVtZW50PT09ZS50YXJnZXR8fHQuX2VsZW1lbnQuY29udGFpbnMoZS50YXJnZXQpfHx0Ll9lbGVtZW50LmZvY3VzKCl9KSl9LGUuX3NldEVzY2FwZUV2ZW50PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLl9pc1Nob3duP1Yub24odGhpcy5fZWxlbWVudCxcImtleWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLChmdW5jdGlvbihlKXt0Ll9jb25maWcua2V5Ym9hcmQmJlwiRXNjYXBlXCI9PT1lLmtleT8oZS5wcmV2ZW50RGVmYXVsdCgpLHQuaGlkZSgpKTp0Ll9jb25maWcua2V5Ym9hcmR8fFwiRXNjYXBlXCIhPT1lLmtleXx8dC5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpfSkpOlYub2ZmKHRoaXMuX2VsZW1lbnQsXCJrZXlkb3duLmRpc21pc3MuYnMubW9kYWxcIil9LGUuX3NldFJlc2l6ZUV2ZW50PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLl9pc1Nob3duP1Yub24od2luZG93LFwicmVzaXplLmJzLm1vZGFsXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuX2FkanVzdERpYWxvZygpfSkpOlYub2ZmKHdpbmRvdyxcInJlc2l6ZS5icy5tb2RhbFwiKX0sZS5faGlkZU1vZGFsPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXk9XCJub25lXCIsdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCEwKSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIiksdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJyb2xlXCIpLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSx0aGlzLl9zaG93QmFja2Ryb3AoKGZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWwtb3BlblwiKSx0Ll9yZXNldEFkanVzdG1lbnRzKCksdC5fcmVzZXRTY3JvbGxiYXIoKSxWLnRyaWdnZXIodC5fZWxlbWVudCxcImhpZGRlbi5icy5tb2RhbFwiKX0pKX0sZS5fcmVtb3ZlQmFja2Ryb3A9ZnVuY3Rpb24oKXt0aGlzLl9iYWNrZHJvcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX2JhY2tkcm9wKSx0aGlzLl9iYWNrZHJvcD1udWxsfSxlLl9zaG93QmFja2Ryb3A9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmFkZVwiKT9cImZhZGVcIjpcIlwiO2lmKHRoaXMuX2lzU2hvd24mJnRoaXMuX2NvbmZpZy5iYWNrZHJvcCl7aWYodGhpcy5fYmFja2Ryb3A9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWU9XCJtb2RhbC1iYWNrZHJvcFwiLG4mJnRoaXMuX2JhY2tkcm9wLmNsYXNzTGlzdC5hZGQobiksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9iYWNrZHJvcCksVi5vbih0aGlzLl9lbGVtZW50LFwiY2xpY2suZGlzbWlzcy5icy5tb2RhbFwiLChmdW5jdGlvbih0KXtlLl9pZ25vcmVCYWNrZHJvcENsaWNrP2UuX2lnbm9yZUJhY2tkcm9wQ2xpY2s9ITE6dC50YXJnZXQ9PT10LmN1cnJlbnRUYXJnZXQmJmUuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKX0pKSxuJiZ3KHRoaXMuX2JhY2tkcm9wKSx0aGlzLl9iYWNrZHJvcC5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKSwhbilyZXR1cm4gdm9pZCB0KCk7dmFyIGk9Zyh0aGlzLl9iYWNrZHJvcCk7Vi5vbmUodGhpcy5fYmFja2Ryb3AsXCJ0cmFuc2l0aW9uZW5kXCIsdCksXyh0aGlzLl9iYWNrZHJvcCxpKX1lbHNlIGlmKCF0aGlzLl9pc1Nob3duJiZ0aGlzLl9iYWNrZHJvcCl7dGhpcy5fYmFja2Ryb3AuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7dmFyIG89ZnVuY3Rpb24oKXtlLl9yZW1vdmVCYWNrZHJvcCgpLHQoKX07aWYodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpKXt2YXIgcz1nKHRoaXMuX2JhY2tkcm9wKTtWLm9uZSh0aGlzLl9iYWNrZHJvcCxcInRyYW5zaXRpb25lbmRcIixvKSxfKHRoaXMuX2JhY2tkcm9wLHMpfWVsc2UgbygpfWVsc2UgdCgpfSxlLl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZihcInN0YXRpY1wiPT09dGhpcy5fY29uZmlnLmJhY2tkcm9wKXtpZihWLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGVQcmV2ZW50ZWQuYnMubW9kYWxcIikuZGVmYXVsdFByZXZlbnRlZClyZXR1cm47dmFyIGU9dGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQ+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtlfHwodGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvd1k9XCJoaWRkZW5cIiksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWwtc3RhdGljXCIpO3ZhciBuPWcodGhpcy5fZGlhbG9nKTtWLm9mZih0aGlzLl9lbGVtZW50LFwidHJhbnNpdGlvbmVuZFwiKSxWLm9uZSh0aGlzLl9lbGVtZW50LFwidHJhbnNpdGlvbmVuZFwiLChmdW5jdGlvbigpe3QuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsLXN0YXRpY1wiKSxlfHwoVi5vbmUodC5fZWxlbWVudCxcInRyYW5zaXRpb25lbmRcIiwoZnVuY3Rpb24oKXt0Ll9lbGVtZW50LnN0eWxlLm92ZXJmbG93WT1cIlwifSkpLF8odC5fZWxlbWVudCxuKSl9KSksXyh0aGlzLl9lbGVtZW50LG4pLHRoaXMuX2VsZW1lbnQuZm9jdXMoKX1lbHNlIHRoaXMuaGlkZSgpfSxlLl9hZGp1c3REaWFsb2c9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0OyF0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyYmdCYmKHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9dGhpcy5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKSx0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyYmIXQmJih0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodD10aGlzLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfSxlLl9yZXNldEFkanVzdG1lbnRzPWZ1bmN0aW9uKCl7dGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdD1cIlwiLHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0PVwiXCJ9LGUuX2NoZWNrU2Nyb2xsYmFyPWZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLl9pc0JvZHlPdmVyZmxvd2luZz1NYXRoLnJvdW5kKHQubGVmdCt0LnJpZ2h0KTx3aW5kb3cuaW5uZXJXaWR0aCx0aGlzLl9zY3JvbGxiYXJXaWR0aD10aGlzLl9nZXRTY3JvbGxiYXJXaWR0aCgpfSxlLl9zZXRTY3JvbGxiYXI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKXtudC5maW5kKFwiLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcFwiKS5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgbj1lLnN0eWxlLnBhZGRpbmdSaWdodCxpPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUpW1wicGFkZGluZy1yaWdodFwiXTtldC5zZXREYXRhQXR0cmlidXRlKGUsXCJwYWRkaW5nLXJpZ2h0XCIsbiksZS5zdHlsZS5wYWRkaW5nUmlnaHQ9cGFyc2VGbG9hdChpKSt0Ll9zY3JvbGxiYXJXaWR0aCtcInB4XCJ9KSksbnQuZmluZChcIi5zdGlja3ktdG9wXCIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPWUuc3R5bGUubWFyZ2luUmlnaHQsaT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlKVtcIm1hcmdpbi1yaWdodFwiXTtldC5zZXREYXRhQXR0cmlidXRlKGUsXCJtYXJnaW4tcmlnaHRcIixuKSxlLnN0eWxlLm1hcmdpblJpZ2h0PXBhcnNlRmxvYXQoaSktdC5fc2Nyb2xsYmFyV2lkdGgrXCJweFwifSkpO3ZhciBlPWRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0LG49d2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSlbXCJwYWRkaW5nLXJpZ2h0XCJdO2V0LnNldERhdGFBdHRyaWJ1dGUoZG9jdW1lbnQuYm9keSxcInBhZGRpbmctcmlnaHRcIixlKSxkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1wYXJzZUZsb2F0KG4pK3RoaXMuX3Njcm9sbGJhcldpZHRoK1wicHhcIn1kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJtb2RhbC1vcGVuXCIpfSxlLl9yZXNldFNjcm9sbGJhcj1mdW5jdGlvbigpe250LmZpbmQoXCIuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPWV0LmdldERhdGFBdHRyaWJ1dGUodCxcInBhZGRpbmctcmlnaHRcIik7dm9pZCAwIT09ZSYmKGV0LnJlbW92ZURhdGFBdHRyaWJ1dGUodCxcInBhZGRpbmctcmlnaHRcIiksdC5zdHlsZS5wYWRkaW5nUmlnaHQ9ZSl9KSksbnQuZmluZChcIi5zdGlja3ktdG9wXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPWV0LmdldERhdGFBdHRyaWJ1dGUodCxcIm1hcmdpbi1yaWdodFwiKTt2b2lkIDAhPT1lJiYoZXQucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0LFwibWFyZ2luLXJpZ2h0XCIpLHQuc3R5bGUubWFyZ2luUmlnaHQ9ZSl9KSk7dmFyIHQ9ZXQuZ2V0RGF0YUF0dHJpYnV0ZShkb2N1bWVudC5ib2R5LFwicGFkZGluZy1yaWdodFwiKTt2b2lkIDA9PT10P2RvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0PVwiXCI6KGV0LnJlbW92ZURhdGFBdHRyaWJ1dGUoZG9jdW1lbnQuYm9keSxcInBhZGRpbmctcmlnaHRcIiksZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ9dCl9LGUuX2dldFNjcm9sbGJhcldpZHRoPWZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LmNsYXNzTmFtZT1cIm1vZGFsLXNjcm9sbGJhci1tZWFzdXJlXCIsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0KTt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLXQuY2xpZW50V2lkdGg7cmV0dXJuIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodCksZX0sdC5qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe3ZhciBpPUwodGhpcyxcImJzLm1vZGFsXCIpLG89cyh7fSxrdCxldC5nZXREYXRhQXR0cmlidXRlcyh0aGlzKSxcIm9iamVjdFwiPT10eXBlb2YgZSYmZT9lOnt9KTtpZihpfHwoaT1uZXcgdCh0aGlzLG8pKSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYodm9pZCAwPT09aVtlXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK2UrJ1wiJyk7aVtlXShuKX1lbHNlIG8uc2hvdyYmaS5zaG93KG4pfSkpfSx0LmdldEluc3RhbmNlPWZ1bmN0aW9uKHQpe3JldHVybiBMKHQsXCJicy5tb2RhbFwiKX0sbyh0LG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI1LjAuMC1hbHBoYTJcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt0fX1dKSx0fSgpO1Yub24oZG9jdW1lbnQsXCJjbGljay5icy5tb2RhbC5kYXRhLWFwaVwiLCdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsKGZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1kKHRoaXMpO1wiQVwiIT09dGhpcy50YWdOYW1lJiZcIkFSRUFcIiE9PXRoaXMudGFnTmFtZXx8dC5wcmV2ZW50RGVmYXVsdCgpLFYub25lKG4sXCJzaG93LmJzLm1vZGFsXCIsKGZ1bmN0aW9uKHQpe3QuZGVmYXVsdFByZXZlbnRlZHx8Vi5vbmUobixcImhpZGRlbi5icy5tb2RhbFwiLChmdW5jdGlvbigpe2IoZSkmJmUuZm9jdXMoKX0pKX0pKTt2YXIgaT1MKG4sXCJicy5tb2RhbFwiKTtpZighaSl7dmFyIG89cyh7fSxldC5nZXREYXRhQXR0cmlidXRlcyhuKSxldC5nZXREYXRhQXR0cmlidXRlcyh0aGlzKSk7aT1uZXcgQ3QobixvKX1pLnNob3codGhpcyl9KSk7dmFyIEF0PUUoKTtpZihBdCl7dmFyIFN0PUF0LmZuLm1vZGFsO0F0LmZuLm1vZGFsPUN0LmpRdWVyeUludGVyZmFjZSxBdC5mbi5tb2RhbC5Db25zdHJ1Y3Rvcj1DdCxBdC5mbi5tb2RhbC5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIEF0LmZuLm1vZGFsPVN0LEN0LmpRdWVyeUludGVyZmFjZX19dmFyIER0PVtcImJhY2tncm91bmRcIixcImNpdGVcIixcImhyZWZcIixcIml0ZW10eXBlXCIsXCJsb25nZGVzY1wiLFwicG9zdGVyXCIsXCJzcmNcIixcInhsaW5rOmhyZWZcIl0sSXQ9L14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZSk6fFteIyYvOj9dKig/OlsjLz9dfCQpKS9naSxPdD0vXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbXFxkKy9hLXpdKz0qJC9pLE50PXtcIipcIjpbXCJjbGFzc1wiLFwiZGlyXCIsXCJpZFwiLFwibGFuZ1wiLFwicm9sZVwiLC9eYXJpYS1bXFx3LV0qJC9pXSxhOltcInRhcmdldFwiLFwiaHJlZlwiLFwidGl0bGVcIixcInJlbFwiXSxhcmVhOltdLGI6W10sYnI6W10sY29sOltdLGNvZGU6W10sZGl2OltdLGVtOltdLGhyOltdLGgxOltdLGgyOltdLGgzOltdLGg0OltdLGg1OltdLGg2OltdLGk6W10saW1nOltcInNyY1wiLFwic3Jjc2V0XCIsXCJhbHRcIixcInRpdGxlXCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLGxpOltdLG9sOltdLHA6W10scHJlOltdLHM6W10sc21hbGw6W10sc3BhbjpbXSxzdWI6W10sc3VwOltdLHN0cm9uZzpbXSx1OltdLHVsOltdfTtmdW5jdGlvbiBqdCh0LGUsbil7dmFyIGk7aWYoIXQubGVuZ3RoKXJldHVybiB0O2lmKG4mJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4pcmV0dXJuIG4odCk7Zm9yKHZhciBvPShuZXcgd2luZG93LkRPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKHQsXCJ0ZXh0L2h0bWxcIikscz1PYmplY3Qua2V5cyhlKSxyPShpPVtdKS5jb25jYXQuYXBwbHkoaSxvLmJvZHkucXVlcnlTZWxlY3RvckFsbChcIipcIikpLGE9ZnVuY3Rpb24odCxuKXt2YXIgaSxvPXJbdF0sYT1vLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoLTE9PT1zLmluZGV4T2YoYSkpcmV0dXJuIG8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSxcImNvbnRpbnVlXCI7dmFyIGw9KGk9W10pLmNvbmNhdC5hcHBseShpLG8uYXR0cmlidXRlcyksYz1bXS5jb25jYXQoZVtcIipcIl18fFtdLGVbYV18fFtdKTtsLmZvckVhY2goKGZ1bmN0aW9uKHQpeyhmdW5jdGlvbih0LGUpe3ZhciBuPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZigtMSE9PWUuaW5kZXhPZihuKSlyZXR1cm4tMT09PUR0LmluZGV4T2Yobil8fEJvb2xlYW4odC5ub2RlVmFsdWUubWF0Y2goSXQpfHx0Lm5vZGVWYWx1ZS5tYXRjaChPdCkpO2Zvcih2YXIgaT1lLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBSZWdFeHB9KSksbz0wLHM9aS5sZW5ndGg7bzxzO28rKylpZihuLm1hdGNoKGlbb10pKXJldHVybiEwO3JldHVybiExfSkodCxjKXx8by5yZW1vdmVBdHRyaWJ1dGUodC5ub2RlTmFtZSl9KSl9LGw9MCxjPXIubGVuZ3RoO2w8YztsKyspYShsKTtyZXR1cm4gby5ib2R5LmlubmVySFRNTH12YXIgeHQ9XCJ0b29sdGlwXCIsUHQ9bmV3IFJlZ0V4cChcIihefFxcXFxzKWJzLXRvb2x0aXBcXFxcUytcIixcImdcIiksUnQ9W1wic2FuaXRpemVcIixcImFsbG93TGlzdFwiLFwic2FuaXRpemVGblwiXSxIdD17YW5pbWF0aW9uOlwiYm9vbGVhblwiLHRlbXBsYXRlOlwic3RyaW5nXCIsdGl0bGU6XCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCIsdHJpZ2dlcjpcInN0cmluZ1wiLGRlbGF5OlwiKG51bWJlcnxvYmplY3QpXCIsaHRtbDpcImJvb2xlYW5cIixzZWxlY3RvcjpcIihzdHJpbmd8Ym9vbGVhbilcIixwbGFjZW1lbnQ6XCIoc3RyaW5nfGZ1bmN0aW9uKVwiLG9mZnNldDpcIihudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKVwiLGNvbnRhaW5lcjpcIihzdHJpbmd8ZWxlbWVudHxib29sZWFuKVwiLGZhbGxiYWNrUGxhY2VtZW50OlwiKHN0cmluZ3xhcnJheSlcIixib3VuZGFyeTpcIihzdHJpbmd8ZWxlbWVudClcIixzYW5pdGl6ZTpcImJvb2xlYW5cIixzYW5pdGl6ZUZuOlwiKG51bGx8ZnVuY3Rpb24pXCIsYWxsb3dMaXN0Olwib2JqZWN0XCIscG9wcGVyQ29uZmlnOlwiKG51bGx8b2JqZWN0KVwifSxCdD17QVVUTzpcImF1dG9cIixUT1A6XCJ0b3BcIixSSUdIVDpcInJpZ2h0XCIsQk9UVE9NOlwiYm90dG9tXCIsTEVGVDpcImxlZnRcIn0sTXQ9e2FuaW1hdGlvbjohMCx0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJ0b29sdGlwLWFycm93XCI+PC9kaXY+PGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj48L2Rpdj4nLHRyaWdnZXI6XCJob3ZlciBmb2N1c1wiLHRpdGxlOlwiXCIsZGVsYXk6MCxodG1sOiExLHNlbGVjdG9yOiExLHBsYWNlbWVudDpcInRvcFwiLG9mZnNldDowLGNvbnRhaW5lcjohMSxmYWxsYmFja1BsYWNlbWVudDpcImZsaXBcIixib3VuZGFyeTpcInNjcm9sbFBhcmVudFwiLHNhbml0aXplOiEwLHNhbml0aXplRm46bnVsbCxhbGxvd0xpc3Q6TnQscG9wcGVyQ29uZmlnOm51bGx9LFF0PXtISURFOlwiaGlkZS5icy50b29sdGlwXCIsSElEREVOOlwiaGlkZGVuLmJzLnRvb2x0aXBcIixTSE9XOlwic2hvdy5icy50b29sdGlwXCIsU0hPV046XCJzaG93bi5icy50b29sdGlwXCIsSU5TRVJURUQ6XCJpbnNlcnRlZC5icy50b29sdGlwXCIsQ0xJQ0s6XCJjbGljay5icy50b29sdGlwXCIsRk9DVVNJTjpcImZvY3VzaW4uYnMudG9vbHRpcFwiLEZPQ1VTT1VUOlwiZm9jdXNvdXQuYnMudG9vbHRpcFwiLE1PVVNFRU5URVI6XCJtb3VzZWVudGVyLmJzLnRvb2x0aXBcIixNT1VTRUxFQVZFOlwibW91c2VsZWF2ZS5icy50b29sdGlwXCJ9LFV0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2lmKHZvaWQgMD09PW4uZGVmYXVsdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9vdHN0cmFwJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZylcIik7dGhpcy5faXNFbmFibGVkPSEwLHRoaXMuX3RpbWVvdXQ9MCx0aGlzLl9ob3ZlclN0YXRlPVwiXCIsdGhpcy5fYWN0aXZlVHJpZ2dlcj17fSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9dCx0aGlzLmNvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy50aXA9bnVsbCx0aGlzLl9zZXRMaXN0ZW5lcnMoKSxrKHQsdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSx0aGlzKX12YXIgZT10LnByb3RvdHlwZTtyZXR1cm4gZS5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLl9pc0VuYWJsZWQ9ITB9LGUuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuX2lzRW5hYmxlZD0hMX0sZS50b2dnbGVFbmFibGVkPWZ1bmN0aW9uKCl7dGhpcy5faXNFbmFibGVkPSF0aGlzLl9pc0VuYWJsZWR9LGUudG9nZ2xlPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2lzRW5hYmxlZClpZih0KXt2YXIgZT10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLG49TCh0LmRlbGVnYXRlVGFyZ2V0LGUpO258fChuPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHQuZGVsZWdhdGVUYXJnZXQsdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSksayh0LmRlbGVnYXRlVGFyZ2V0LGUsbikpLG4uX2FjdGl2ZVRyaWdnZXIuY2xpY2s9IW4uX2FjdGl2ZVRyaWdnZXIuY2xpY2ssbi5faXNXaXRoQWN0aXZlVHJpZ2dlcigpP24uX2VudGVyKG51bGwsbik6bi5fbGVhdmUobnVsbCxuKX1lbHNle2lmKHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIikpcmV0dXJuIHZvaWQgdGhpcy5fbGVhdmUobnVsbCx0aGlzKTt0aGlzLl9lbnRlcihudWxsLHRoaXMpfX0sZS5kaXNwb3NlPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLEModGhpcy5lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpLFYub2ZmKHRoaXMuZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSksVi5vZmYodGhpcy5lbGVtZW50LmNsb3Nlc3QoXCIubW9kYWxcIiksXCJoaWRlLmJzLm1vZGFsXCIsdGhpcy5faGlkZU1vZGFsSGFuZGxlciksdGhpcy50aXAmJnRoaXMudGlwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy50aXApLHRoaXMuX2lzRW5hYmxlZD1udWxsLHRoaXMuX3RpbWVvdXQ9bnVsbCx0aGlzLl9ob3ZlclN0YXRlPW51bGwsdGhpcy5fYWN0aXZlVHJpZ2dlcj1udWxsLHRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9bnVsbCx0aGlzLmNvbmZpZz1udWxsLHRoaXMudGlwPW51bGx9LGUuc2hvdz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoXCJub25lXCI9PT10aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSl0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50c1wiKTtpZih0aGlzLmlzV2l0aENvbnRlbnQoKSYmdGhpcy5faXNFbmFibGVkKXt2YXIgZT1WLnRyaWdnZXIodGhpcy5lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyksaT1mdW5jdGlvbiB0KGUpe2lmKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZ2V0Um9vdE5vZGUpe3ZhciBuPWUuZ2V0Um9vdE5vZGUoKTtyZXR1cm4gbiBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q/bjpudWxsfXJldHVybiBlIGluc3RhbmNlb2YgU2hhZG93Um9vdD9lOmUucGFyZW50Tm9kZT90KGUucGFyZW50Tm9kZSk6bnVsbH0odGhpcy5lbGVtZW50KSxvPW51bGw9PT1pP3RoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLmVsZW1lbnQpOmkuY29udGFpbnModGhpcy5lbGVtZW50KTtpZihlLmRlZmF1bHRQcmV2ZW50ZWR8fCFvKXJldHVybjt2YXIgcz10aGlzLmdldFRpcEVsZW1lbnQoKSxyPXUodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKTtzLnNldEF0dHJpYnV0ZShcImlkXCIsciksdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIixyKSx0aGlzLnNldENvbnRlbnQoKSx0aGlzLmNvbmZpZy5hbmltYXRpb24mJnMuY2xhc3NMaXN0LmFkZChcImZhZGVcIik7dmFyIGE9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50P3RoaXMuY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMscyx0aGlzLmVsZW1lbnQpOnRoaXMuY29uZmlnLnBsYWNlbWVudCxsPXRoaXMuX2dldEF0dGFjaG1lbnQoYSk7dGhpcy5fYWRkQXR0YWNobWVudENsYXNzKGwpO3ZhciBjLGg9dGhpcy5fZ2V0Q29udGFpbmVyKCk7aWYoayhzLHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksdGhpcyksdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMudGlwKXx8aC5hcHBlbmRDaGlsZChzKSxWLnRyaWdnZXIodGhpcy5lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSU5TRVJURUQpLHRoaXMuX3BvcHBlcj1uZXcgbi5kZWZhdWx0KHRoaXMuZWxlbWVudCxzLHRoaXMuX2dldFBvcHBlckNvbmZpZyhsKSkscy5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KShjPVtdKS5jb25jYXQuYXBwbHkoYyxkb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKChmdW5jdGlvbih0KXtWLm9uKHQsXCJtb3VzZW92ZXJcIiwoZnVuY3Rpb24oKXt9KSl9KSk7dmFyIGY9ZnVuY3Rpb24oKXt0LmNvbmZpZy5hbmltYXRpb24mJnQuX2ZpeFRyYW5zaXRpb24oKTt2YXIgZT10Ll9ob3ZlclN0YXRlO3QuX2hvdmVyU3RhdGU9bnVsbCxWLnRyaWdnZXIodC5lbGVtZW50LHQuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pLFwib3V0XCI9PT1lJiZ0Ll9sZWF2ZShudWxsLHQpfTtpZih0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpKXt2YXIgZD1nKHRoaXMudGlwKTtWLm9uZSh0aGlzLnRpcCxcInRyYW5zaXRpb25lbmRcIixmKSxfKHRoaXMudGlwLGQpfWVsc2UgZigpfX0sZS5oaWRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZih0aGlzLl9wb3BwZXIpe3ZhciBlPXRoaXMuZ2V0VGlwRWxlbWVudCgpLG49ZnVuY3Rpb24oKXtcInNob3dcIiE9PXQuX2hvdmVyU3RhdGUmJmUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpLHQuX2NsZWFuVGlwQ2xhc3MoKSx0LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiKSxWLnRyaWdnZXIodC5lbGVtZW50LHQuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKSx0Ll9wb3BwZXIuZGVzdHJveSgpfTtpZighVi50cmlnZ2VyKHRoaXMuZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpLmRlZmF1bHRQcmV2ZW50ZWQpe3ZhciBpO2lmKGUuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIiksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkoaT1bXSkuY29uY2F0LmFwcGx5KGksZG9jdW1lbnQuYm9keS5jaGlsZHJlbikuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIFYub2ZmKHQsXCJtb3VzZW92ZXJcIix5KX0pKTtpZih0aGlzLl9hY3RpdmVUcmlnZ2VyLmNsaWNrPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXIuZm9jdXM9ITEsdGhpcy5fYWN0aXZlVHJpZ2dlci5ob3Zlcj0hMSx0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpKXt2YXIgbz1nKGUpO1Yub25lKGUsXCJ0cmFuc2l0aW9uZW5kXCIsbiksXyhlLG8pfWVsc2UgbigpO3RoaXMuX2hvdmVyU3RhdGU9XCJcIn19fSxlLnVwZGF0ZT1mdW5jdGlvbigpe251bGwhPT10aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpfSxlLmlzV2l0aENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpfSxlLmdldFRpcEVsZW1lbnQ9ZnVuY3Rpb24oKXtpZih0aGlzLnRpcClyZXR1cm4gdGhpcy50aXA7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gdC5pbm5lckhUTUw9dGhpcy5jb25maWcudGVtcGxhdGUsdGhpcy50aXA9dC5jaGlsZHJlblswXSx0aGlzLnRpcH0sZS5zZXRDb250ZW50PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRUaXBFbGVtZW50KCk7dGhpcy5zZXRFbGVtZW50Q29udGVudChudC5maW5kT25lKFwiLnRvb2x0aXAtaW5uZXJcIix0KSx0aGlzLmdldFRpdGxlKCkpLHQuY2xhc3NMaXN0LnJlbW92ZShcImZhZGVcIixcInNob3dcIil9LGUuc2V0RWxlbWVudENvbnRlbnQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT09dClyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbShlKT8oZS5qcXVlcnkmJihlPWVbMF0pLHZvaWQodGhpcy5jb25maWcuaHRtbD9lLnBhcmVudE5vZGUhPT10JiYodC5pbm5lckhUTUw9XCJcIix0LmFwcGVuZENoaWxkKGUpKTp0LnRleHRDb250ZW50PWUudGV4dENvbnRlbnQpKTp2b2lkKHRoaXMuY29uZmlnLmh0bWw/KHRoaXMuY29uZmlnLnNhbml0aXplJiYoZT1qdChlLHRoaXMuY29uZmlnLmFsbG93TGlzdCx0aGlzLmNvbmZpZy5zYW5pdGl6ZUZuKSksdC5pbm5lckhUTUw9ZSk6dC50ZXh0Q29udGVudD1lKX0sZS5nZXRUaXRsZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpO3JldHVybiB0fHwodD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZT90aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudCk6dGhpcy5jb25maWcudGl0bGUpLHR9LGUuX2dldFBvcHBlckNvbmZpZz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBzKHt9LHtwbGFjZW1lbnQ6dCxtb2RpZmllcnM6e29mZnNldDp0aGlzLl9nZXRPZmZzZXQoKSxmbGlwOntiZWhhdmlvcjp0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudH0sYXJyb3c6e2VsZW1lbnQ6XCIuXCIrdGhpcy5jb25zdHJ1Y3Rvci5OQU1FK1wiLWFycm93XCJ9LHByZXZlbnRPdmVyZmxvdzp7Ym91bmRhcmllc0VsZW1lbnQ6dGhpcy5jb25maWcuYm91bmRhcnl9fSxvbkNyZWF0ZTpmdW5jdGlvbih0KXt0Lm9yaWdpbmFsUGxhY2VtZW50IT09dC5wbGFjZW1lbnQmJmUuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KX0sb25VcGRhdGU6ZnVuY3Rpb24odCl7cmV0dXJuIGUuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KX19LHRoaXMuY29uZmlnLnBvcHBlckNvbmZpZyl9LGUuX2FkZEF0dGFjaG1lbnRDbGFzcz1mdW5jdGlvbih0KXt0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwiYnMtdG9vbHRpcC1cIit0KX0sZS5fZ2V0T2Zmc2V0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXt9O3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuY29uZmlnLm9mZnNldD9lLmZuPWZ1bmN0aW9uKGUpe3JldHVybiBlLm9mZnNldHM9cyh7fSxlLm9mZnNldHMsdC5jb25maWcub2Zmc2V0KGUub2Zmc2V0cyx0LmVsZW1lbnQpfHx7fSksZX06ZS5vZmZzZXQ9dGhpcy5jb25maWcub2Zmc2V0LGV9LGUuX2dldENvbnRhaW5lcj1mdW5jdGlvbigpe3JldHVybiExPT09dGhpcy5jb25maWcuY29udGFpbmVyP2RvY3VtZW50LmJvZHk6bSh0aGlzLmNvbmZpZy5jb250YWluZXIpP3RoaXMuY29uZmlnLmNvbnRhaW5lcjpudC5maW5kT25lKHRoaXMuY29uZmlnLmNvbnRhaW5lcil9LGUuX2dldEF0dGFjaG1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIEJ0W3QudG9VcHBlckNhc2UoKV19LGUuX3NldExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5jb25maWcudHJpZ2dlci5zcGxpdChcIiBcIikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7aWYoXCJjbGlja1wiPT09ZSlWLm9uKHQuZWxlbWVudCx0LmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLHQuY29uZmlnLnNlbGVjdG9yLChmdW5jdGlvbihlKXtyZXR1cm4gdC50b2dnbGUoZSl9KSk7ZWxzZSBpZihcIm1hbnVhbFwiIT09ZSl7dmFyIG49XCJob3ZlclwiPT09ZT90LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVI6dC5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOLGk9XCJob3ZlclwiPT09ZT90LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkU6dC5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU09VVDtWLm9uKHQuZWxlbWVudCxuLHQuY29uZmlnLnNlbGVjdG9yLChmdW5jdGlvbihlKXtyZXR1cm4gdC5fZW50ZXIoZSl9KSksVi5vbih0LmVsZW1lbnQsaSx0LmNvbmZpZy5zZWxlY3RvciwoZnVuY3Rpb24oZSl7cmV0dXJuIHQuX2xlYXZlKGUpfSkpfX0pKSx0aGlzLl9oaWRlTW9kYWxIYW5kbGVyPWZ1bmN0aW9uKCl7dC5lbGVtZW50JiZ0LmhpZGUoKX0sVi5vbih0aGlzLmVsZW1lbnQuY2xvc2VzdChcIi5tb2RhbFwiKSxcImhpZGUuYnMubW9kYWxcIix0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKSx0aGlzLmNvbmZpZy5zZWxlY3Rvcj90aGlzLmNvbmZpZz1zKHt9LHRoaXMuY29uZmlnLHt0cmlnZ2VyOlwibWFudWFsXCIsc2VsZWN0b3I6XCJcIn0pOnRoaXMuX2ZpeFRpdGxlKCl9LGUuX2ZpeFRpdGxlPWZ1bmN0aW9uKCl7dmFyIHQ9dHlwZW9mIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpOyh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIil8fFwic3RyaW5nXCIhPT10KSYmKHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpfHxcIlwiKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGl0bGVcIixcIlwiKSl9LGUuX2VudGVyPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTsoZT1lfHxMKHQuZGVsZWdhdGVUYXJnZXQsbikpfHwoZT1uZXcgdGhpcy5jb25zdHJ1Y3Rvcih0LmRlbGVnYXRlVGFyZ2V0LHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpLGsodC5kZWxlZ2F0ZVRhcmdldCxuLGUpKSx0JiYoZS5fYWN0aXZlVHJpZ2dlcltcImZvY3VzaW5cIj09PXQudHlwZT9cImZvY3VzXCI6XCJob3ZlclwiXT0hMCksZS5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKXx8XCJzaG93XCI9PT1lLl9ob3ZlclN0YXRlP2UuX2hvdmVyU3RhdGU9XCJzaG93XCI6KGNsZWFyVGltZW91dChlLl90aW1lb3V0KSxlLl9ob3ZlclN0YXRlPVwic2hvd1wiLGUuY29uZmlnLmRlbGF5JiZlLmNvbmZpZy5kZWxheS5zaG93P2UuX3RpbWVvdXQ9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtcInNob3dcIj09PWUuX2hvdmVyU3RhdGUmJmUuc2hvdygpfSksZS5jb25maWcuZGVsYXkuc2hvdyk6ZS5zaG93KCkpfSxlLl9sZWF2ZT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7KGU9ZXx8TCh0LmRlbGVnYXRlVGFyZ2V0LG4pKXx8KGU9bmV3IHRoaXMuY29uc3RydWN0b3IodC5kZWxlZ2F0ZVRhcmdldCx0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKSxrKHQuZGVsZWdhdGVUYXJnZXQsbixlKSksdCYmKGUuX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c291dFwiPT09dC50eXBlP1wiZm9jdXNcIjpcImhvdmVyXCJdPSExKSxlLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCl8fChjbGVhclRpbWVvdXQoZS5fdGltZW91dCksZS5faG92ZXJTdGF0ZT1cIm91dFwiLGUuY29uZmlnLmRlbGF5JiZlLmNvbmZpZy5kZWxheS5oaWRlP2UuX3RpbWVvdXQ9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtcIm91dFwiPT09ZS5faG92ZXJTdGF0ZSYmZS5oaWRlKCl9KSxlLmNvbmZpZy5kZWxheS5oaWRlKTplLmhpZGUoKSl9LGUuX2lzV2l0aEFjdGl2ZVRyaWdnZXI9ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcilpZih0aGlzLl9hY3RpdmVUcmlnZ2VyW3RdKXJldHVybiEwO3JldHVybiExfSxlLl9nZXRDb25maWc9ZnVuY3Rpb24odCl7dmFyIGU9ZXQuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5lbGVtZW50KTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7LTEhPT1SdC5pbmRleE9mKHQpJiZkZWxldGUgZVt0XX0pKSx0JiZcIm9iamVjdFwiPT10eXBlb2YgdC5jb250YWluZXImJnQuY29udGFpbmVyLmpxdWVyeSYmKHQuY29udGFpbmVyPXQuY29udGFpbmVyWzBdKSxcIm51bWJlclwiPT10eXBlb2YodD1zKHt9LHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxlLFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0P3Q6e30pKS5kZWxheSYmKHQuZGVsYXk9e3Nob3c6dC5kZWxheSxoaWRlOnQuZGVsYXl9KSxcIm51bWJlclwiPT10eXBlb2YgdC50aXRsZSYmKHQudGl0bGU9dC50aXRsZS50b1N0cmluZygpKSxcIm51bWJlclwiPT10eXBlb2YgdC5jb250ZW50JiYodC5jb250ZW50PXQuY29udGVudC50b1N0cmluZygpKSx2KHh0LHQsdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksdC5zYW5pdGl6ZSYmKHQudGVtcGxhdGU9anQodC50ZW1wbGF0ZSx0LmFsbG93TGlzdCx0LnNhbml0aXplRm4pKSx0fSxlLl9nZXREZWxlZ2F0ZUNvbmZpZz1mdW5jdGlvbigpe3ZhciB0PXt9O2lmKHRoaXMuY29uZmlnKWZvcih2YXIgZSBpbiB0aGlzLmNvbmZpZyl0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRbZV0hPT10aGlzLmNvbmZpZ1tlXSYmKHRbZV09dGhpcy5jb25maWdbZV0pO3JldHVybiB0fSxlLl9jbGVhblRpcENsYXNzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRUaXBFbGVtZW50KCksZT10LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLm1hdGNoKFB0KTtudWxsIT09ZSYmZS5sZW5ndGg+MCYmZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRyaW0oKX0pKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gdC5jbGFzc0xpc3QucmVtb3ZlKGUpfSkpfSxlLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2U9ZnVuY3Rpb24odCl7dGhpcy50aXA9dC5pbnN0YW5jZS5wb3BwZXIsdGhpcy5fY2xlYW5UaXBDbGFzcygpLHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHQucGxhY2VtZW50KSl9LGUuX2ZpeFRyYW5zaXRpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldFRpcEVsZW1lbnQoKSxlPXRoaXMuY29uZmlnLmFuaW1hdGlvbjtudWxsPT09dC5nZXRBdHRyaWJ1dGUoXCJ4LXBsYWNlbWVudFwiKSYmKHQuY2xhc3NMaXN0LnJlbW92ZShcImZhZGVcIiksdGhpcy5jb25maWcuYW5pbWF0aW9uPSExLHRoaXMuaGlkZSgpLHRoaXMuc2hvdygpLHRoaXMuY29uZmlnLmFuaW1hdGlvbj1lKX0sdC5qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXt2YXIgbj1MKHRoaXMsXCJicy50b29sdGlwXCIpLGk9XCJvYmplY3RcIj09dHlwZW9mIGUmJmU7aWYoKG58fCEvZGlzcG9zZXxoaWRlLy50ZXN0KGUpKSYmKG58fChuPW5ldyB0KHRoaXMsaSkpLFwic3RyaW5nXCI9PXR5cGVvZiBlKSl7aWYodm9pZCAwPT09bltlXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK2UrJ1wiJyk7bltlXSgpfX0pKX0sdC5nZXRJbnN0YW5jZT1mdW5jdGlvbih0KXtyZXR1cm4gTCh0LFwiYnMudG9vbHRpcFwiKX0sbyh0LG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI1LjAuMC1hbHBoYTJcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE10fX0se2tleTpcIk5BTUVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geHR9fSx7a2V5OlwiREFUQV9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cImJzLnRvb2x0aXBcIn19LHtrZXk6XCJFdmVudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBRdH19LHtrZXk6XCJFVkVOVF9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIi5icy50b29sdGlwXCJ9fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSHR9fV0pLHR9KCksRnQ9RSgpO2lmKEZ0KXt2YXIgV3Q9RnQuZm5beHRdO0Z0LmZuW3h0XT1VdC5qUXVlcnlJbnRlcmZhY2UsRnQuZm5beHRdLkNvbnN0cnVjdG9yPVV0LEZ0LmZuW3h0XS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIEZ0LmZuW3h0XT1XdCxVdC5qUXVlcnlJbnRlcmZhY2V9fXZhciBLdD1cInBvcG92ZXJcIixWdD1uZXcgUmVnRXhwKFwiKF58XFxcXHMpYnMtcG9wb3ZlclxcXFxTK1wiLFwiZ1wiKSxxdD1zKHt9LFV0LkRlZmF1bHQse3BsYWNlbWVudDpcInJpZ2h0XCIsdHJpZ2dlcjpcImNsaWNrXCIsY29udGVudDpcIlwiLHRlbXBsYXRlOic8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInBvcG92ZXItYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2Pid9KSx6dD1zKHt9LFV0LkRlZmF1bHRUeXBlLHtjb250ZW50OlwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKVwifSksWHQ9e0hJREU6XCJoaWRlLmJzLnBvcG92ZXJcIixISURERU46XCJoaWRkZW4uYnMucG9wb3ZlclwiLFNIT1c6XCJzaG93LmJzLnBvcG92ZXJcIixTSE9XTjpcInNob3duLmJzLnBvcG92ZXJcIixJTlNFUlRFRDpcImluc2VydGVkLmJzLnBvcG92ZXJcIixDTElDSzpcImNsaWNrLmJzLnBvcG92ZXJcIixGT0NVU0lOOlwiZm9jdXNpbi5icy5wb3BvdmVyXCIsRk9DVVNPVVQ6XCJmb2N1c291dC5icy5wb3BvdmVyXCIsTU9VU0VFTlRFUjpcIm1vdXNlZW50ZXIuYnMucG9wb3ZlclwiLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlLmJzLnBvcG92ZXJcIn0sWXQ9ZnVuY3Rpb24odCl7dmFyIGUsbjtmdW5jdGlvbiBpKCl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfW49dCwoZT1pKS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLl9fcHJvdG9fXz1uO3ZhciBzPWkucHJvdG90eXBlO3JldHVybiBzLmlzV2l0aENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRUaXRsZSgpfHx0aGlzLl9nZXRDb250ZW50KCl9LHMuc2V0Q29udGVudD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0VGlwRWxlbWVudCgpO3RoaXMuc2V0RWxlbWVudENvbnRlbnQobnQuZmluZE9uZShcIi5wb3BvdmVyLWhlYWRlclwiLHQpLHRoaXMuZ2V0VGl0bGUoKSk7dmFyIGU9dGhpcy5fZ2V0Q29udGVudCgpO1wiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihlPWUuY2FsbCh0aGlzLmVsZW1lbnQpKSx0aGlzLnNldEVsZW1lbnRDb250ZW50KG50LmZpbmRPbmUoXCIucG9wb3Zlci1ib2R5XCIsdCksZSksdC5jbGFzc0xpc3QucmVtb3ZlKFwiZmFkZVwiLFwic2hvd1wiKX0scy5fYWRkQXR0YWNobWVudENsYXNzPWZ1bmN0aW9uKHQpe3RoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJicy1wb3BvdmVyLVwiK3QpfSxzLl9nZXRDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbnRlbnRcIil8fHRoaXMuY29uZmlnLmNvbnRlbnR9LHMuX2NsZWFuVGlwQ2xhc3M9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldFRpcEVsZW1lbnQoKSxlPXQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikubWF0Y2goVnQpO251bGwhPT1lJiZlLmxlbmd0aD4wJiZlLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJpbSgpfSkpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0LmNsYXNzTGlzdC5yZW1vdmUoZSl9KSl9LGkualF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7dmFyIGU9TCh0aGlzLFwiYnMucG9wb3ZlclwiKSxuPVwib2JqZWN0XCI9PXR5cGVvZiB0P3Q6bnVsbDtpZigoZXx8IS9kaXNwb3NlfGhpZGUvLnRlc3QodCkpJiYoZXx8KGU9bmV3IGkodGhpcyxuKSxrKHRoaXMsXCJicy5wb3BvdmVyXCIsZSkpLFwic3RyaW5nXCI9PXR5cGVvZiB0KSl7aWYodm9pZCAwPT09ZVt0XSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK3QrJ1wiJyk7ZVt0XSgpfX0pKX0saS5nZXRJbnN0YW5jZT1mdW5jdGlvbih0KXtyZXR1cm4gTCh0LFwiYnMucG9wb3ZlclwiKX0sbyhpLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI1LjAuMC1hbHBoYTJcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF0fX0se2tleTpcIk5BTUVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gS3R9fSx7a2V5OlwiREFUQV9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cImJzLnBvcG92ZXJcIn19LHtrZXk6XCJFdmVudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBYdH19LHtrZXk6XCJFVkVOVF9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIi5icy5wb3BvdmVyXCJ9fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4genR9fV0pLGl9KFV0KSwkdD1FKCk7aWYoJHQpe3ZhciBHdD0kdC5mbltLdF07JHQuZm5bS3RdPVl0LmpRdWVyeUludGVyZmFjZSwkdC5mbltLdF0uQ29uc3RydWN0b3I9WXQsJHQuZm5bS3RdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gJHQuZm5bS3RdPUd0LFl0LmpRdWVyeUludGVyZmFjZX19dmFyIFp0PVwic2Nyb2xsc3B5XCIsSnQ9e29mZnNldDoxMCxtZXRob2Q6XCJhdXRvXCIsdGFyZ2V0OlwiXCJ9LHRlPXtvZmZzZXQ6XCJudW1iZXJcIixtZXRob2Q6XCJzdHJpbmdcIix0YXJnZXQ6XCIoc3RyaW5nfGVsZW1lbnQpXCJ9LGVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBuPXRoaXM7dGhpcy5fZWxlbWVudD10LHRoaXMuX3Njcm9sbEVsZW1lbnQ9XCJCT0RZXCI9PT10LnRhZ05hbWU/d2luZG93OnQsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9zZWxlY3Rvcj10aGlzLl9jb25maWcudGFyZ2V0K1wiIC5uYXYtbGluaywgXCIrdGhpcy5fY29uZmlnLnRhcmdldCtcIiAubGlzdC1ncm91cC1pdGVtLCBcIit0aGlzLl9jb25maWcudGFyZ2V0K1wiIC5kcm9wZG93bi1pdGVtXCIsdGhpcy5fb2Zmc2V0cz1bXSx0aGlzLl90YXJnZXRzPVtdLHRoaXMuX2FjdGl2ZVRhcmdldD1udWxsLHRoaXMuX3Njcm9sbEhlaWdodD0wLFYub24odGhpcy5fc2Nyb2xsRWxlbWVudCxcInNjcm9sbC5icy5zY3JvbGxzcHlcIiwoZnVuY3Rpb24odCl7cmV0dXJuIG4uX3Byb2Nlc3ModCl9KSksdGhpcy5yZWZyZXNoKCksdGhpcy5fcHJvY2VzcygpLGsodCxcImJzLnNjcm9sbHNweVwiLHRoaXMpfXZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLnJlZnJlc2g9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5fc2Nyb2xsRWxlbWVudD09PXRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93P1wib2Zmc2V0XCI6XCJwb3NpdGlvblwiLG49XCJhdXRvXCI9PT10aGlzLl9jb25maWcubWV0aG9kP2U6dGhpcy5fY29uZmlnLm1ldGhvZCxpPVwicG9zaXRpb25cIj09PW4/dGhpcy5fZ2V0U2Nyb2xsVG9wKCk6MDt0aGlzLl9vZmZzZXRzPVtdLHRoaXMuX3RhcmdldHM9W10sdGhpcy5fc2Nyb2xsSGVpZ2h0PXRoaXMuX2dldFNjcm9sbEhlaWdodCgpLG50LmZpbmQodGhpcy5fc2VsZWN0b3IpLm1hcCgoZnVuY3Rpb24odCl7dmFyIGU9Zih0KSxvPWU/bnQuZmluZE9uZShlKTpudWxsO2lmKG8pe3ZhciBzPW8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7aWYocy53aWR0aHx8cy5oZWlnaHQpcmV0dXJuW2V0W25dKG8pLnRvcCtpLGVdfXJldHVybiBudWxsfSkpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHR9KSkuc29ydCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFswXS1lWzBdfSkpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuX29mZnNldHMucHVzaChlWzBdKSx0Ll90YXJnZXRzLnB1c2goZVsxXSl9KSl9LGUuZGlzcG9zZT1mdW5jdGlvbigpe0ModGhpcy5fZWxlbWVudCxcImJzLnNjcm9sbHNweVwiKSxWLm9mZih0aGlzLl9zY3JvbGxFbGVtZW50LFwiLmJzLnNjcm9sbHNweVwiKSx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fc2Nyb2xsRWxlbWVudD1udWxsLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX3NlbGVjdG9yPW51bGwsdGhpcy5fb2Zmc2V0cz1udWxsLHRoaXMuX3RhcmdldHM9bnVsbCx0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLl9zY3JvbGxIZWlnaHQ9bnVsbH0sZS5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZih0PXMoe30sSnQsXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fSkpLnRhcmdldCYmbSh0LnRhcmdldCkpe3ZhciBlPXQudGFyZ2V0LmlkO2V8fChlPXUoWnQpLHQudGFyZ2V0LmlkPWUpLHQudGFyZ2V0PVwiI1wiK2V9cmV0dXJuIHYoWnQsdCx0ZSksdH0sZS5fZ2V0U2Nyb2xsVG9wPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQ9PT13aW5kb3c/dGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldDp0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcH0sZS5fZ2V0U2Nyb2xsSGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0fHxNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KX0sZS5fZ2V0T2Zmc2V0SGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQ9PT13aW5kb3c/d2luZG93LmlubmVySGVpZ2h0OnRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0fSxlLl9wcm9jZXNzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZ2V0U2Nyb2xsVG9wKCkrdGhpcy5fY29uZmlnLm9mZnNldCxlPXRoaXMuX2dldFNjcm9sbEhlaWdodCgpLG49dGhpcy5fY29uZmlnLm9mZnNldCtlLXRoaXMuX2dldE9mZnNldEhlaWdodCgpO2lmKHRoaXMuX3Njcm9sbEhlaWdodCE9PWUmJnRoaXMucmVmcmVzaCgpLHQ+PW4pe3ZhciBpPXRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGgtMV07dGhpcy5fYWN0aXZlVGFyZ2V0IT09aSYmdGhpcy5fYWN0aXZhdGUoaSl9ZWxzZXtpZih0aGlzLl9hY3RpdmVUYXJnZXQmJnQ8dGhpcy5fb2Zmc2V0c1swXSYmdGhpcy5fb2Zmc2V0c1swXT4wKXJldHVybiB0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx2b2lkIHRoaXMuX2NsZWFyKCk7Zm9yKHZhciBvPXRoaXMuX29mZnNldHMubGVuZ3RoO28tLTspe3RoaXMuX2FjdGl2ZVRhcmdldCE9PXRoaXMuX3RhcmdldHNbb10mJnQ+PXRoaXMuX29mZnNldHNbb10mJih2b2lkIDA9PT10aGlzLl9vZmZzZXRzW28rMV18fHQ8dGhpcy5fb2Zmc2V0c1tvKzFdKSYmdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tvXSl9fX0sZS5fYWN0aXZhdGU9ZnVuY3Rpb24odCl7dGhpcy5fYWN0aXZlVGFyZ2V0PXQsdGhpcy5fY2xlYXIoKTt2YXIgZT10aGlzLl9zZWxlY3Rvci5zcGxpdChcIixcIikubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZSsnW2RhdGEtdGFyZ2V0PVwiJyt0KydcIl0sJytlKydbaHJlZj1cIicrdCsnXCJdJ30pKSxuPW50LmZpbmRPbmUoZS5qb2luKFwiLFwiKSk7bi5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wZG93bi1pdGVtXCIpPyhudC5maW5kT25lKFwiLmRyb3Bkb3duLXRvZ2dsZVwiLG4uY2xvc2VzdChcIi5kcm9wZG93blwiKSkuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKSxuLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIikpOihuLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIiksbnQucGFyZW50cyhuLFwiLm5hdiwgLmxpc3QtZ3JvdXBcIikuZm9yRWFjaCgoZnVuY3Rpb24odCl7bnQucHJldih0LFwiLm5hdi1saW5rLCAubGlzdC1ncm91cC1pdGVtXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIil9KSksbnQucHJldih0LFwiLm5hdi1pdGVtXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe250LmNoaWxkcmVuKHQsXCIubmF2LWxpbmtcIikuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKX0pKX0pKX0pKSksVi50cmlnZ2VyKHRoaXMuX3Njcm9sbEVsZW1lbnQsXCJhY3RpdmF0ZS5icy5zY3JvbGxzcHlcIix7cmVsYXRlZFRhcmdldDp0fSl9LGUuX2NsZWFyPWZ1bmN0aW9uKCl7bnQuZmluZCh0aGlzLl9zZWxlY3RvcikuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIil9KSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKX0pKX0sdC5qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXt2YXIgbj1MKHRoaXMsXCJicy5zY3JvbGxzcHlcIik7aWYobnx8KG49bmV3IHQodGhpcyxcIm9iamVjdFwiPT10eXBlb2YgZSYmZSkpLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZih2b2lkIDA9PT1uW2VdKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrZSsnXCInKTtuW2VdKCl9fSkpfSx0LmdldEluc3RhbmNlPWZ1bmN0aW9uKHQpe3JldHVybiBMKHQsXCJicy5zY3JvbGxzcHlcIil9LG8odCxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNS4wLjAtYWxwaGEyXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBKdH19XSksdH0oKTtWLm9uKHdpbmRvdyxcImxvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpXCIsKGZ1bmN0aW9uKCl7bnQuZmluZCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBlZSh0LGV0LmdldERhdGFBdHRyaWJ1dGVzKHQpKX0pKX0pKTt2YXIgbmU9RSgpO2lmKG5lKXt2YXIgaWU9bmUuZm5bWnRdO25lLmZuW1p0XT1lZS5qUXVlcnlJbnRlcmZhY2UsbmUuZm5bWnRdLkNvbnN0cnVjdG9yPWVlLG5lLmZuW1p0XS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIG5lLmZuW1p0XT1pZSxlZS5qUXVlcnlJbnRlcmZhY2V9fXZhciBvZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5fZWxlbWVudD10LGsodGhpcy5fZWxlbWVudCxcImJzLnRhYlwiLHRoaXMpfXZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLnNob3c9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCEodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIil8fHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIikpKXt2YXIgZSxuPWQodGhpcy5fZWxlbWVudCksaT10aGlzLl9lbGVtZW50LmNsb3Nlc3QoXCIubmF2LCAubGlzdC1ncm91cFwiKTtpZihpKXt2YXIgbz1cIlVMXCI9PT1pLm5vZGVOYW1lfHxcIk9MXCI9PT1pLm5vZGVOYW1lP1wiOnNjb3BlID4gbGkgPiAuYWN0aXZlXCI6XCIuYWN0aXZlXCI7ZT0oZT1udC5maW5kKG8saSkpW2UubGVuZ3RoLTFdfXZhciBzPW51bGw7aWYoZSYmKHM9Vi50cmlnZ2VyKGUsXCJoaWRlLmJzLnRhYlwiLHtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9KSksIShWLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcInNob3cuYnMudGFiXCIse3JlbGF0ZWRUYXJnZXQ6ZX0pLmRlZmF1bHRQcmV2ZW50ZWR8fG51bGwhPT1zJiZzLmRlZmF1bHRQcmV2ZW50ZWQpKXt0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LGkpO3ZhciByPWZ1bmN0aW9uKCl7Vi50cmlnZ2VyKGUsXCJoaWRkZW4uYnMudGFiXCIse3JlbGF0ZWRUYXJnZXQ6dC5fZWxlbWVudH0pLFYudHJpZ2dlcih0Ll9lbGVtZW50LFwic2hvd24uYnMudGFiXCIse3JlbGF0ZWRUYXJnZXQ6ZX0pfTtuP3RoaXMuX2FjdGl2YXRlKG4sbi5wYXJlbnROb2RlLHIpOnIoKX19fSxlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtDKHRoaXMuX2VsZW1lbnQsXCJicy50YWJcIiksdGhpcy5fZWxlbWVudD1udWxsfSxlLl9hY3RpdmF0ZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcyxvPSghZXx8XCJVTFwiIT09ZS5ub2RlTmFtZSYmXCJPTFwiIT09ZS5ub2RlTmFtZT9udC5jaGlsZHJlbihlLFwiLmFjdGl2ZVwiKTpudC5maW5kKFwiOnNjb3BlID4gbGkgPiAuYWN0aXZlXCIsZSkpWzBdLHM9biYmbyYmby5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpLHI9ZnVuY3Rpb24oKXtyZXR1cm4gaS5fdHJhbnNpdGlvbkNvbXBsZXRlKHQsbyxuKX07aWYobyYmcyl7dmFyIGE9ZyhvKTtvLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpLFYub25lKG8sXCJ0cmFuc2l0aW9uZW5kXCIsciksXyhvLGEpfWVsc2UgcigpfSxlLl90cmFuc2l0aW9uQ29tcGxldGU9ZnVuY3Rpb24odCxlLG4pe2lmKGUpe2UuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTt2YXIgaT1udC5maW5kT25lKFwiOnNjb3BlID4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZVwiLGUucGFyZW50Tm9kZSk7aSYmaS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpLFwidGFiXCI9PT1lLmdldEF0dHJpYnV0ZShcInJvbGVcIikmJmUuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCExKX0odC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpLFwidGFiXCI9PT10LmdldEF0dHJpYnV0ZShcInJvbGVcIikmJnQuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCEwKSx3KHQpLHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmFkZVwiKSYmdC5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKSx0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wZG93bi1tZW51XCIpKSYmKHQuY2xvc2VzdChcIi5kcm9wZG93blwiKSYmbnQuZmluZChcIi5kcm9wZG93bi10b2dnbGVcIikuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKX0pKSx0LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCkpO24mJm4oKX0sdC5qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXt2YXIgbj1MKHRoaXMsXCJicy50YWJcIil8fG5ldyB0KHRoaXMpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZih2b2lkIDA9PT1uW2VdKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrZSsnXCInKTtuW2VdKCl9fSkpfSx0LmdldEluc3RhbmNlPWZ1bmN0aW9uKHQpe3JldHVybiBMKHQsXCJicy50YWJcIil9LG8odCxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNS4wLjAtYWxwaGEyXCJ9fV0pLHR9KCk7Vi5vbihkb2N1bWVudCxcImNsaWNrLmJzLnRhYi5kYXRhLWFwaVwiLCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksKEwodGhpcyxcImJzLnRhYlwiKXx8bmV3IG9lKHRoaXMpKS5zaG93KCl9KSk7dmFyIHNlPUUoKTtpZihzZSl7dmFyIHJlPXNlLmZuLnRhYjtzZS5mbi50YWI9b2UualF1ZXJ5SW50ZXJmYWNlLHNlLmZuLnRhYi5Db25zdHJ1Y3Rvcj1vZSxzZS5mbi50YWIubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBzZS5mbi50YWI9cmUsb2UualF1ZXJ5SW50ZXJmYWNlfX12YXIgYWU9e2FuaW1hdGlvbjpcImJvb2xlYW5cIixhdXRvaGlkZTpcImJvb2xlYW5cIixkZWxheTpcIm51bWJlclwifSxsZT17YW5pbWF0aW9uOiEwLGF1dG9oaWRlOiEwLGRlbGF5OjVlM30sY2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dGhpcy5fZWxlbWVudD10LHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5fdGltZW91dD1udWxsLHRoaXMuX3NldExpc3RlbmVycygpLGsodCxcImJzLnRvYXN0XCIsdGhpcyl9dmFyIGU9dC5wcm90b3R5cGU7cmV0dXJuIGUuc2hvdz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoIVYudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy50b2FzdFwiKS5kZWZhdWx0UHJldmVudGVkKXt0aGlzLl9jbGVhclRpbWVvdXQoKSx0aGlzLl9jb25maWcuYW5pbWF0aW9uJiZ0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJmYWRlXCIpO3ZhciBlPWZ1bmN0aW9uKCl7dC5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd2luZ1wiKSx0Ll9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpLFYudHJpZ2dlcih0Ll9lbGVtZW50LFwic2hvd24uYnMudG9hc3RcIiksdC5fY29uZmlnLmF1dG9oaWRlJiYodC5fdGltZW91dD1zZXRUaW1lb3V0KChmdW5jdGlvbigpe3QuaGlkZSgpfSksdC5fY29uZmlnLmRlbGF5KSl9O2lmKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIiksdyh0aGlzLl9lbGVtZW50KSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzaG93aW5nXCIpLHRoaXMuX2NvbmZpZy5hbmltYXRpb24pe3ZhciBuPWcodGhpcy5fZWxlbWVudCk7Vi5vbmUodGhpcy5fZWxlbWVudCxcInRyYW5zaXRpb25lbmRcIixlKSxfKHRoaXMuX2VsZW1lbnQsbil9ZWxzZSBlKCl9fSxlLmhpZGU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKSYmIVYudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZS5icy50b2FzdFwiKS5kZWZhdWx0UHJldmVudGVkKXt2YXIgZT1mdW5jdGlvbigpe3QuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGVcIiksVi50cmlnZ2VyKHQuX2VsZW1lbnQsXCJoaWRkZW4uYnMudG9hc3RcIil9O2lmKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIiksdGhpcy5fY29uZmlnLmFuaW1hdGlvbil7dmFyIG49Zyh0aGlzLl9lbGVtZW50KTtWLm9uZSh0aGlzLl9lbGVtZW50LFwidHJhbnNpdGlvbmVuZFwiLGUpLF8odGhpcy5fZWxlbWVudCxuKX1lbHNlIGUoKX19LGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuX2NsZWFyVGltZW91dCgpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKSYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKSxWLm9mZih0aGlzLl9lbGVtZW50LFwiY2xpY2suZGlzbWlzcy5icy50b2FzdFwiKSxDKHRoaXMuX2VsZW1lbnQsXCJicy50b2FzdFwiKSx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fY29uZmlnPW51bGx9LGUuX2dldENvbmZpZz1mdW5jdGlvbih0KXtyZXR1cm4gdD1zKHt9LGxlLGV0LmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0P3Q6e30pLHYoXCJ0b2FzdFwiLHQsdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksdH0sZS5fc2V0TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztWLm9uKHRoaXMuX2VsZW1lbnQsXCJjbGljay5kaXNtaXNzLmJzLnRvYXN0XCIsJ1tkYXRhLWRpc21pc3M9XCJ0b2FzdFwiXScsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuaGlkZSgpfSkpfSxlLl9jbGVhclRpbWVvdXQ9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCksdGhpcy5fdGltZW91dD1udWxsfSx0LmpRdWVyeUludGVyZmFjZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe3ZhciBuPUwodGhpcyxcImJzLnRvYXN0XCIpO2lmKG58fChuPW5ldyB0KHRoaXMsXCJvYmplY3RcIj09dHlwZW9mIGUmJmUpKSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYodm9pZCAwPT09bltlXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK2UrJ1wiJyk7bltlXSh0aGlzKX19KSl9LHQuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24odCl7cmV0dXJuIEwodCxcImJzLnRvYXN0XCIpfSxvKHQsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjUuMC4wLWFscGhhMlwifX0se2tleTpcIkRlZmF1bHRUeXBlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGFlfX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbGV9fV0pLHR9KCksdWU9RSgpO2lmKHVlKXt2YXIgaGU9dWUuZm4udG9hc3Q7dWUuZm4udG9hc3Q9Y2UualF1ZXJ5SW50ZXJmYWNlLHVlLmZuLnRvYXN0LkNvbnN0cnVjdG9yPWNlLHVlLmZuLnRvYXN0Lm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdWUuZm4udG9hc3Q9aGUsY2UualF1ZXJ5SW50ZXJmYWNlfX1yZXR1cm57QWxlcnQ6eixCdXR0b246JCxDYXJvdXNlbDpsdCxDb2xsYXBzZTpndCxEcm9wZG93bjp3dCxNb2RhbDpDdCxQb3BvdmVyOll0LFNjcm9sbFNweTplZSxUYWI6b2UsVG9hc3Q6Y2UsVG9vbHRpcDpVdH19KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAubWluLmpzLm1hcFxuIiwiZnVuY3Rpb24gY291bnRlclVwKHQpe1widXNlIHN0cmljdFwiO3RoaXMuZGVmYXVsdHM9e2R1cmF0aW9uOjNlMyxwcmVwZW5kOlwiXCIsYXBwZW5kOlwiJVwiLHNlbGVjdG9yOlwiLmNvdW50dXBcIixzdGFydDowLGVuZDoxMDAsaW50dmFsdWVzOiExLGludGVydmFsOjEwMH07dmFyIGU9dGhpczt0aGlzLnVwYXRpbmc9ITEsdGhpcy5pbnRlcnZhbElEPW51bGwsdGhpcy5wcm9wcz17fTtmb3IodmFyIHIgaW4gdGhpcy5kZWZhdWx0cylcInVuZGVmaW5lZFwiIT10eXBlb2YgciYmKGUucHJvcHNbcl09ZS5kZWZhdWx0c1tyXSx0Lmhhc093blByb3BlcnR5KHIpJiZlLnByb3BzLmhhc093blByb3BlcnR5KHIpJiYoZS5wcm9wc1tyXT10W3JdKSk7dGhpcy5kb21lbGVtcz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMucHJvcHMuc2VsZWN0b3IpLHRoaXMuZWxlbXM9W107dmFyIG49e307dGhpcy5kb21lbGVtcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe24ub2JqPXQ7dmFyIHI9cGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJjdXAtc3RhcnRcIikpO2lzTmFOKHIpP24uc3RhcnQ9ZS5wcm9wcy5zdGFydDpuLnN0YXJ0PXI7dmFyIHA9cGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJjdXAtZW5kXCIpKTtpc05hTihwKT9uLmVuZD1lLnByb3BzLmVuZDpuLmVuZD1wO3ZhciBhPXBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwiY3VwLWR1cmF0aW9uXCIpKTtpc05hTihhKT9uLmR1cmF0aW9uPWUucHJvcHMuZHVyYXRpb246bi5kdXJhdGlvbj1hO3ZhciBzPXQuZ2V0QXR0cmlidXRlKFwiY3VwLXByZXBlbmRcIik7bnVsbD09cz9uLnByZXBlbmQ9ZS5wcm9wcy5wcmVwZW5kOm4ucHJlcGVuZD1zO3ZhciBpPXQuZ2V0QXR0cmlidXRlKFwiY3VwLWFwcGVuZFwiKTtudWxsPT1pP24uYXBwZW5kPWUucHJvcHMuYXBwZW5kOm4uYXBwZW5kPWk7dmFyIG89dC5nZXRBdHRyaWJ1dGUoXCJjdXAtaW50dmFsXCIpO251bGw9PW8/bi5pbnR2YWx1ZXM9ZS5wcm9wcy5pbnR2YWx1ZXM6bi5pbnR2YWx1ZXM9byxuLnN0ZXA9KG4uZW5kLW4uc3RhcnQpLyhuLmR1cmF0aW9uL2UucHJvcHMuaW50ZXJ2YWwpLG4udmFsPW4uc3RhcnQsZS5lbGVtcy5wdXNoKG4pLG49e319KX1jb3VudGVyVXAucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9dGhpczt0aGlzLmludGVydmFsSUQ9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXt0LnVwZGF0aW5nfHx0LnVwZGF0ZSgpfSx0LnByb3BzLmludGVydmFsKX0sY291bnRlclVwLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt0aGlzLnVwZGF0aW5nPSEwO3ZhciB0PSEwO3RoaXMuZWxlbXMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnZhbCs9ZS5zdGVwLGUudmFsPGUuZW5kPygxPT1lLmludHZhbHVlcz9lLm9iai5pbm5lckhUTUw9ZS5wcmVwZW5kK01hdGguZmxvb3IoZS52YWwpLnRvU3RyaW5nKCkrZS5hcHBlbmQ6ZS5vYmouaW5uZXJIVE1MPWUucHJlcGVuZCsoTWF0aC5yb3VuZCgxMDAqZS52YWwpLzEwMCkudG9TdHJpbmcoKStlLmFwcGVuZCx0PSExKTplLm9iai5pbm5lckhUTUw9ZS5wcmVwZW5kK2UuZW5kLnRvU3RyaW5nKCkrZS5hcHBlbmR9KSwxPT10JiZjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJRCksdGhpcy51cGRhdGluZz0hMX07IiwiXG5pbXBvcnQgZmxhdHBpY2tyIGZyb20gJ2ZsYXRwaWNrcic7XG5jb25zdCB7IEZyZW5jaCB9ID0gcmVxdWlyZShcImZsYXRwaWNrci9kaXN0L2wxMG4vZnJcIik7XG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mbGF0cGlja3InKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgZmxhdHBpY2tyKGlucHV0LCB7XG4gICAgYWx0SW5wdXQ6IHRydWUsXG4gICAgYWx0Rm9ybWF0OiBcImogRiwgWVwiLFxuICAgIGRhdGVGb3JtYXQ6IFwiZC1tLVlcIixcbiAgICBcImxvY2FsZVwiOiBGcmVuY2gsXG4gICAgZmlyc3REYXlPZldlZWs6IDEsXG4gIH0pO1xufSk7XG4iLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToodD10fHxzZWxmKS5HTGlnaHRib3g9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7cmV0dXJuKHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0pKGUpfWZ1bmN0aW9uIGUodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGkodCxlKXtmb3IodmFyIGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIG49ZVtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fWZ1bmN0aW9uIG4odCxlLG4pe3JldHVybiBlJiZpKHQucHJvdG90eXBlLGUpLG4mJmkodCxuKSx0fWZ1bmN0aW9uIHModCl7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKEFycmF5LmlzQXJyYXkodCkpe2Zvcih2YXIgZT0wLGk9bmV3IEFycmF5KHQubGVuZ3RoKTtlPHQubGVuZ3RoO2UrKylpW2VdPXRbZV07cmV0dXJuIGl9fSh0KXx8ZnVuY3Rpb24odCl7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdCh0KXx8XCJbb2JqZWN0IEFyZ3VtZW50c11cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSlyZXR1cm4gQXJyYXkuZnJvbSh0KX0odCl8fGZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpfSgpfWZ1bmN0aW9uIG8odCl7cmV0dXJuIE1hdGguc3FydCh0LngqdC54K3QueSp0LnkpfWZ1bmN0aW9uIGwodCxlKXt2YXIgaT1mdW5jdGlvbih0LGUpe3ZhciBpPW8odCkqbyhlKTtpZigwPT09aSlyZXR1cm4gMDt2YXIgbj1mdW5jdGlvbih0LGUpe3JldHVybiB0LngqZS54K3QueSplLnl9KHQsZSkvaTtyZXR1cm4gbj4xJiYobj0xKSxNYXRoLmFjb3Mobil9KHQsZSk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQueCplLnktZS54KnQueX0odCxlKT4wJiYoaSo9LTEpLDE4MCppL01hdGguUEl9dmFyIHI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGkpe2UodGhpcyx0KSx0aGlzLmhhbmRsZXJzPVtdLHRoaXMuZWw9aX1yZXR1cm4gbih0LFt7a2V5OlwiYWRkXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5oYW5kbGVycy5wdXNoKHQpfX0se2tleTpcImRlbFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3R8fCh0aGlzLmhhbmRsZXJzPVtdKTtmb3IodmFyIGU9dGhpcy5oYW5kbGVycy5sZW5ndGg7ZT49MDtlLS0pdGhpcy5oYW5kbGVyc1tlXT09PXQmJnRoaXMuaGFuZGxlcnMuc3BsaWNlKGUsMSl9fSx7a2V5OlwiZGlzcGF0Y2hcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9dGhpcy5oYW5kbGVycy5sZW5ndGg7dDxlO3QrKyl7dmFyIGk9dGhpcy5oYW5kbGVyc1t0XTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBpJiZpLmFwcGx5KHRoaXMuZWwsYXJndW1lbnRzKX19fV0pLHR9KCk7ZnVuY3Rpb24gYSh0LGUpe3ZhciBpPW5ldyByKHQpO3JldHVybiBpLmFkZChlKSxpfXZhciBoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChpLG4pe2UodGhpcyx0KSx0aGlzLmVsZW1lbnQ9XCJzdHJpbmdcIj09dHlwZW9mIGk/ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpKTppLHRoaXMuc3RhcnQ9dGhpcy5zdGFydC5iaW5kKHRoaXMpLHRoaXMubW92ZT10aGlzLm1vdmUuYmluZCh0aGlzKSx0aGlzLmVuZD10aGlzLmVuZC5iaW5kKHRoaXMpLHRoaXMuY2FuY2VsPXRoaXMuY2FuY2VsLmJpbmQodGhpcyksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsdGhpcy5zdGFydCwhMSksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIix0aGlzLm1vdmUsITEpLHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0aGlzLmVuZCwhMSksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGNhbmNlbFwiLHRoaXMuY2FuY2VsLCExKSx0aGlzLnByZVY9e3g6bnVsbCx5Om51bGx9LHRoaXMucGluY2hTdGFydExlbj1udWxsLHRoaXMuem9vbT0xLHRoaXMuaXNEb3VibGVUYXA9ITE7dmFyIHM9ZnVuY3Rpb24oKXt9O3RoaXMucm90YXRlPWEodGhpcy5lbGVtZW50LG4ucm90YXRlfHxzKSx0aGlzLnRvdWNoU3RhcnQ9YSh0aGlzLmVsZW1lbnQsbi50b3VjaFN0YXJ0fHxzKSx0aGlzLm11bHRpcG9pbnRTdGFydD1hKHRoaXMuZWxlbWVudCxuLm11bHRpcG9pbnRTdGFydHx8cyksdGhpcy5tdWx0aXBvaW50RW5kPWEodGhpcy5lbGVtZW50LG4ubXVsdGlwb2ludEVuZHx8cyksdGhpcy5waW5jaD1hKHRoaXMuZWxlbWVudCxuLnBpbmNofHxzKSx0aGlzLnN3aXBlPWEodGhpcy5lbGVtZW50LG4uc3dpcGV8fHMpLHRoaXMudGFwPWEodGhpcy5lbGVtZW50LG4udGFwfHxzKSx0aGlzLmRvdWJsZVRhcD1hKHRoaXMuZWxlbWVudCxuLmRvdWJsZVRhcHx8cyksdGhpcy5sb25nVGFwPWEodGhpcy5lbGVtZW50LG4ubG9uZ1RhcHx8cyksdGhpcy5zaW5nbGVUYXA9YSh0aGlzLmVsZW1lbnQsbi5zaW5nbGVUYXB8fHMpLHRoaXMucHJlc3NNb3ZlPWEodGhpcy5lbGVtZW50LG4ucHJlc3NNb3ZlfHxzKSx0aGlzLnR3b0ZpbmdlclByZXNzTW92ZT1hKHRoaXMuZWxlbWVudCxuLnR3b0ZpbmdlclByZXNzTW92ZXx8cyksdGhpcy50b3VjaE1vdmU9YSh0aGlzLmVsZW1lbnQsbi50b3VjaE1vdmV8fHMpLHRoaXMudG91Y2hFbmQ9YSh0aGlzLmVsZW1lbnQsbi50b3VjaEVuZHx8cyksdGhpcy50b3VjaENhbmNlbD1hKHRoaXMuZWxlbWVudCxuLnRvdWNoQ2FuY2VsfHxzKSx0aGlzLl9jYW5jZWxBbGxIYW5kbGVyPXRoaXMuY2FuY2VsQWxsLmJpbmQodGhpcyksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzLl9jYW5jZWxBbGxIYW5kbGVyKSx0aGlzLmRlbHRhPW51bGwsdGhpcy5sYXN0PW51bGwsdGhpcy5ub3c9bnVsbCx0aGlzLnRhcFRpbWVvdXQ9bnVsbCx0aGlzLnNpbmdsZVRhcFRpbWVvdXQ9bnVsbCx0aGlzLmxvbmdUYXBUaW1lb3V0PW51bGwsdGhpcy5zd2lwZVRpbWVvdXQ9bnVsbCx0aGlzLngxPXRoaXMueDI9dGhpcy55MT10aGlzLnkyPW51bGwsdGhpcy5wcmVUYXBQb3NpdGlvbj17eDpudWxsLHk6bnVsbH19cmV0dXJuIG4odCxbe2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodC50b3VjaGVzKXt0aGlzLm5vdz1EYXRlLm5vdygpLHRoaXMueDE9dC50b3VjaGVzWzBdLnBhZ2VYLHRoaXMueTE9dC50b3VjaGVzWzBdLnBhZ2VZLHRoaXMuZGVsdGE9dGhpcy5ub3ctKHRoaXMubGFzdHx8dGhpcy5ub3cpLHRoaXMudG91Y2hTdGFydC5kaXNwYXRjaCh0LHRoaXMuZWxlbWVudCksbnVsbCE9PXRoaXMucHJlVGFwUG9zaXRpb24ueCYmKHRoaXMuaXNEb3VibGVUYXA9dGhpcy5kZWx0YT4wJiZ0aGlzLmRlbHRhPD0yNTAmJk1hdGguYWJzKHRoaXMucHJlVGFwUG9zaXRpb24ueC10aGlzLngxKTwzMCYmTWF0aC5hYnModGhpcy5wcmVUYXBQb3NpdGlvbi55LXRoaXMueTEpPDMwLHRoaXMuaXNEb3VibGVUYXAmJmNsZWFyVGltZW91dCh0aGlzLnNpbmdsZVRhcFRpbWVvdXQpKSx0aGlzLnByZVRhcFBvc2l0aW9uLng9dGhpcy54MSx0aGlzLnByZVRhcFBvc2l0aW9uLnk9dGhpcy55MSx0aGlzLmxhc3Q9dGhpcy5ub3c7dmFyIGU9dGhpcy5wcmVWO2lmKHQudG91Y2hlcy5sZW5ndGg+MSl7dGhpcy5fY2FuY2VsTG9uZ1RhcCgpLHRoaXMuX2NhbmNlbFNpbmdsZVRhcCgpO3ZhciBpPXt4OnQudG91Y2hlc1sxXS5wYWdlWC10aGlzLngxLHk6dC50b3VjaGVzWzFdLnBhZ2VZLXRoaXMueTF9O2UueD1pLngsZS55PWkueSx0aGlzLnBpbmNoU3RhcnRMZW49byhlKSx0aGlzLm11bHRpcG9pbnRTdGFydC5kaXNwYXRjaCh0LHRoaXMuZWxlbWVudCl9dGhpcy5fcHJldmVudFRhcD0hMSx0aGlzLmxvbmdUYXBUaW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aGlzLmxvbmdUYXAuZGlzcGF0Y2godCx0aGlzLmVsZW1lbnQpLHRoaXMuX3ByZXZlbnRUYXA9ITB9LmJpbmQodGhpcyksNzUwKX19fSx7a2V5OlwibW92ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHQudG91Y2hlcyl7dmFyIGU9dGhpcy5wcmVWLGk9dC50b3VjaGVzLmxlbmd0aCxuPXQudG91Y2hlc1swXS5wYWdlWCxzPXQudG91Y2hlc1swXS5wYWdlWTtpZih0aGlzLmlzRG91YmxlVGFwPSExLGk+MSl7dmFyIHI9dC50b3VjaGVzWzFdLnBhZ2VYLGE9dC50b3VjaGVzWzFdLnBhZ2VZLGg9e3g6dC50b3VjaGVzWzFdLnBhZ2VYLW4seTp0LnRvdWNoZXNbMV0ucGFnZVktc307bnVsbCE9PWUueCYmKHRoaXMucGluY2hTdGFydExlbj4wJiYodC56b29tPW8oaCkvdGhpcy5waW5jaFN0YXJ0TGVuLHRoaXMucGluY2guZGlzcGF0Y2godCx0aGlzLmVsZW1lbnQpKSx0LmFuZ2xlPWwoaCxlKSx0aGlzLnJvdGF0ZS5kaXNwYXRjaCh0LHRoaXMuZWxlbWVudCkpLGUueD1oLngsZS55PWgueSxudWxsIT09dGhpcy54MiYmbnVsbCE9PXRoaXMuc3gyPyh0LmRlbHRhWD0obi10aGlzLngyK3ItdGhpcy5zeDIpLzIsdC5kZWx0YVk9KHMtdGhpcy55MithLXRoaXMuc3kyKS8yKToodC5kZWx0YVg9MCx0LmRlbHRhWT0wKSx0aGlzLnR3b0ZpbmdlclByZXNzTW92ZS5kaXNwYXRjaCh0LHRoaXMuZWxlbWVudCksdGhpcy5zeDI9cix0aGlzLnN5Mj1hfWVsc2V7aWYobnVsbCE9PXRoaXMueDIpe3QuZGVsdGFYPW4tdGhpcy54Mix0LmRlbHRhWT1zLXRoaXMueTI7dmFyIGM9TWF0aC5hYnModGhpcy54MS10aGlzLngyKSxkPU1hdGguYWJzKHRoaXMueTEtdGhpcy55Mik7KGM+MTB8fGQ+MTApJiYodGhpcy5fcHJldmVudFRhcD0hMCl9ZWxzZSB0LmRlbHRhWD0wLHQuZGVsdGFZPTA7dGhpcy5wcmVzc01vdmUuZGlzcGF0Y2godCx0aGlzLmVsZW1lbnQpfXRoaXMudG91Y2hNb3ZlLmRpc3BhdGNoKHQsdGhpcy5lbGVtZW50KSx0aGlzLl9jYW5jZWxMb25nVGFwKCksdGhpcy54Mj1uLHRoaXMueTI9cyxpPjEmJnQucHJldmVudERlZmF1bHQoKX19fSx7a2V5OlwiZW5kXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodC5jaGFuZ2VkVG91Y2hlcyl7dGhpcy5fY2FuY2VsTG9uZ1RhcCgpO3ZhciBlPXRoaXM7dC50b3VjaGVzLmxlbmd0aDwyJiYodGhpcy5tdWx0aXBvaW50RW5kLmRpc3BhdGNoKHQsdGhpcy5lbGVtZW50KSx0aGlzLnN4Mj10aGlzLnN5Mj1udWxsKSx0aGlzLngyJiZNYXRoLmFicyh0aGlzLngxLXRoaXMueDIpPjMwfHx0aGlzLnkyJiZNYXRoLmFicyh0aGlzLnkxLXRoaXMueTIpPjMwPyh0LmRpcmVjdGlvbj10aGlzLl9zd2lwZURpcmVjdGlvbih0aGlzLngxLHRoaXMueDIsdGhpcy55MSx0aGlzLnkyKSx0aGlzLnN3aXBlVGltZW91dD1zZXRUaW1lb3V0KChmdW5jdGlvbigpe2Uuc3dpcGUuZGlzcGF0Y2godCxlLmVsZW1lbnQpfSksMCkpOih0aGlzLnRhcFRpbWVvdXQ9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLl9wcmV2ZW50VGFwfHxlLnRhcC5kaXNwYXRjaCh0LGUuZWxlbWVudCksZS5pc0RvdWJsZVRhcCYmKGUuZG91YmxlVGFwLmRpc3BhdGNoKHQsZS5lbGVtZW50KSxlLmlzRG91YmxlVGFwPSExKX0pLDApLGUuaXNEb3VibGVUYXB8fChlLnNpbmdsZVRhcFRpbWVvdXQ9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLnNpbmdsZVRhcC5kaXNwYXRjaCh0LGUuZWxlbWVudCl9KSwyNTApKSksdGhpcy50b3VjaEVuZC5kaXNwYXRjaCh0LHRoaXMuZWxlbWVudCksdGhpcy5wcmVWLng9MCx0aGlzLnByZVYueT0wLHRoaXMuem9vbT0xLHRoaXMucGluY2hTdGFydExlbj1udWxsLHRoaXMueDE9dGhpcy54Mj10aGlzLnkxPXRoaXMueTI9bnVsbH19fSx7a2V5OlwiY2FuY2VsQWxsXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9wcmV2ZW50VGFwPSEwLGNsZWFyVGltZW91dCh0aGlzLnNpbmdsZVRhcFRpbWVvdXQpLGNsZWFyVGltZW91dCh0aGlzLnRhcFRpbWVvdXQpLGNsZWFyVGltZW91dCh0aGlzLmxvbmdUYXBUaW1lb3V0KSxjbGVhclRpbWVvdXQodGhpcy5zd2lwZVRpbWVvdXQpfX0se2tleTpcImNhbmNlbFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuY2FuY2VsQWxsKCksdGhpcy50b3VjaENhbmNlbC5kaXNwYXRjaCh0LHRoaXMuZWxlbWVudCl9fSx7a2V5OlwiX2NhbmNlbExvbmdUYXBcIix2YWx1ZTpmdW5jdGlvbigpe2NsZWFyVGltZW91dCh0aGlzLmxvbmdUYXBUaW1lb3V0KX19LHtrZXk6XCJfY2FuY2VsU2luZ2xlVGFwXCIsdmFsdWU6ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5zaW5nbGVUYXBUaW1lb3V0KX19LHtrZXk6XCJfc3dpcGVEaXJlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxuKXtyZXR1cm4gTWF0aC5hYnModC1lKT49TWF0aC5hYnMoaS1uKT90LWU+MD9cIkxlZnRcIjpcIlJpZ2h0XCI6aS1uPjA/XCJVcFwiOlwiRG93blwifX0se2tleTpcIm9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzW3RdJiZ0aGlzW3RdLmFkZChlKX19LHtrZXk6XCJvZmZcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXNbdF0mJnRoaXNbdF0uZGVsKGUpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNpbmdsZVRhcFRpbWVvdXQmJmNsZWFyVGltZW91dCh0aGlzLnNpbmdsZVRhcFRpbWVvdXQpLHRoaXMudGFwVGltZW91dCYmY2xlYXJUaW1lb3V0KHRoaXMudGFwVGltZW91dCksdGhpcy5sb25nVGFwVGltZW91dCYmY2xlYXJUaW1lb3V0KHRoaXMubG9uZ1RhcFRpbWVvdXQpLHRoaXMuc3dpcGVUaW1lb3V0JiZjbGVhclRpbWVvdXQodGhpcy5zd2lwZVRpbWVvdXQpLHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLHRoaXMuc3RhcnQpLHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5tb3ZlKSx0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsdGhpcy5lbmQpLHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIix0aGlzLmNhbmNlbCksdGhpcy5yb3RhdGUuZGVsKCksdGhpcy50b3VjaFN0YXJ0LmRlbCgpLHRoaXMubXVsdGlwb2ludFN0YXJ0LmRlbCgpLHRoaXMubXVsdGlwb2ludEVuZC5kZWwoKSx0aGlzLnBpbmNoLmRlbCgpLHRoaXMuc3dpcGUuZGVsKCksdGhpcy50YXAuZGVsKCksdGhpcy5kb3VibGVUYXAuZGVsKCksdGhpcy5sb25nVGFwLmRlbCgpLHRoaXMuc2luZ2xlVGFwLmRlbCgpLHRoaXMucHJlc3NNb3ZlLmRlbCgpLHRoaXMudHdvRmluZ2VyUHJlc3NNb3ZlLmRlbCgpLHRoaXMudG91Y2hNb3ZlLmRlbCgpLHRoaXMudG91Y2hFbmQuZGVsKCksdGhpcy50b3VjaENhbmNlbC5kZWwoKSx0aGlzLnByZVY9dGhpcy5waW5jaFN0YXJ0TGVuPXRoaXMuem9vbT10aGlzLmlzRG91YmxlVGFwPXRoaXMuZGVsdGE9dGhpcy5sYXN0PXRoaXMubm93PXRoaXMudGFwVGltZW91dD10aGlzLnNpbmdsZVRhcFRpbWVvdXQ9dGhpcy5sb25nVGFwVGltZW91dD10aGlzLnN3aXBlVGltZW91dD10aGlzLngxPXRoaXMueDI9dGhpcy55MT10aGlzLnkyPXRoaXMucHJlVGFwUG9zaXRpb249dGhpcy5yb3RhdGU9dGhpcy50b3VjaFN0YXJ0PXRoaXMubXVsdGlwb2ludFN0YXJ0PXRoaXMubXVsdGlwb2ludEVuZD10aGlzLnBpbmNoPXRoaXMuc3dpcGU9dGhpcy50YXA9dGhpcy5kb3VibGVUYXA9dGhpcy5sb25nVGFwPXRoaXMuc2luZ2xlVGFwPXRoaXMucHJlc3NNb3ZlPXRoaXMudG91Y2hNb3ZlPXRoaXMudG91Y2hFbmQ9dGhpcy50b3VjaENhbmNlbD10aGlzLnR3b0ZpbmdlclByZXNzTW92ZT1udWxsLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsdGhpcy5fY2FuY2VsQWxsSGFuZGxlciksbnVsbH19XSksdH0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChpLG4pe3ZhciBzPXRoaXMsbz1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZihlKHRoaXMsdCksdGhpcy5pbWc9aSx0aGlzLnNsaWRlPW4sdGhpcy5vbmNsb3NlPW8sdGhpcy5pbWcuc2V0Wm9vbUV2ZW50cylyZXR1cm4hMTt0aGlzLmFjdGl2ZT0hMSx0aGlzLnpvb21lZEluPSExLHRoaXMuZHJhZ2dpbmc9ITEsdGhpcy5jdXJyZW50WD1udWxsLHRoaXMuY3VycmVudFk9bnVsbCx0aGlzLmluaXRpYWxYPW51bGwsdGhpcy5pbml0aWFsWT1udWxsLHRoaXMueE9mZnNldD0wLHRoaXMueU9mZnNldD0wLHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwoZnVuY3Rpb24odCl7cmV0dXJuIHMuZHJhZ1N0YXJ0KHQpfSksITEpLHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBzLmRyYWdFbmQodCl9KSwhMSksdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLChmdW5jdGlvbih0KXtyZXR1cm4gcy5kcmFnKHQpfSksITEpLHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLChmdW5jdGlvbih0KXtpZighcy56b29tZWRJbilyZXR1cm4gcy56b29tSW4oKTtzLnpvb21lZEluJiYhcy5kcmFnZ2luZyYmcy56b29tT3V0KCl9KSwhMSksdGhpcy5pbWcuc2V0Wm9vbUV2ZW50cz0hMH1yZXR1cm4gbih0LFt7a2V5Olwiem9vbUluXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLndpZG93V2lkdGgoKTtpZighKHRoaXMuem9vbWVkSW58fHQ8PTc2OCkpe3ZhciBlPXRoaXMuaW1nO2lmKGUuc2V0QXR0cmlidXRlKFwiZGF0YS1zdHlsZVwiLGUuZ2V0QXR0cmlidXRlKFwic3R5bGVcIikpLGUuc3R5bGUubWF4V2lkdGg9ZS5uYXR1cmFsV2lkdGgrXCJweFwiLGUuc3R5bGUubWF4SGVpZ2h0PWUubmF0dXJhbEhlaWdodCtcInB4XCIsZS5uYXR1cmFsV2lkdGg+dCl7dmFyIGk9dC8yLWUubmF0dXJhbFdpZHRoLzI7dGhpcy5zZXRUcmFuc2xhdGUodGhpcy5pbWcucGFyZW50Tm9kZSxpLDApfXRoaXMuc2xpZGUuY2xhc3NMaXN0LmFkZChcInpvb21lZFwiKSx0aGlzLnpvb21lZEluPSEwfX19LHtrZXk6XCJ6b29tT3V0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmltZy5wYXJlbnROb2RlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsXCJcIiksdGhpcy5pbWcuc2V0QXR0cmlidXRlKFwic3R5bGVcIix0aGlzLmltZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN0eWxlXCIpKSx0aGlzLnNsaWRlLmNsYXNzTGlzdC5yZW1vdmUoXCJ6b29tZWRcIiksdGhpcy56b29tZWRJbj0hMSx0aGlzLmN1cnJlbnRYPW51bGwsdGhpcy5jdXJyZW50WT1udWxsLHRoaXMuaW5pdGlhbFg9bnVsbCx0aGlzLmluaXRpYWxZPW51bGwsdGhpcy54T2Zmc2V0PTAsdGhpcy55T2Zmc2V0PTAsdGhpcy5vbmNsb3NlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9uY2xvc2UmJnRoaXMub25jbG9zZSgpfX0se2tleTpcImRyYWdTdGFydFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0aGlzLnpvb21lZEluPyhcInRvdWNoc3RhcnRcIj09PXQudHlwZT8odGhpcy5pbml0aWFsWD10LnRvdWNoZXNbMF0uY2xpZW50WC10aGlzLnhPZmZzZXQsdGhpcy5pbml0aWFsWT10LnRvdWNoZXNbMF0uY2xpZW50WS10aGlzLnlPZmZzZXQpOih0aGlzLmluaXRpYWxYPXQuY2xpZW50WC10aGlzLnhPZmZzZXQsdGhpcy5pbml0aWFsWT10LmNsaWVudFktdGhpcy55T2Zmc2V0KSx0LnRhcmdldD09PXRoaXMuaW1nJiYodGhpcy5hY3RpdmU9ITAsdGhpcy5pbWcuY2xhc3NMaXN0LmFkZChcImRyYWdnaW5nXCIpKSk6dGhpcy5hY3RpdmU9ITF9fSx7a2V5OlwiZHJhZ0VuZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuaW5pdGlhbFg9dGhpcy5jdXJyZW50WCx0aGlzLmluaXRpYWxZPXRoaXMuY3VycmVudFksdGhpcy5hY3RpdmU9ITEsc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmRyYWdnaW5nPSExLGUuaW1nLmlzRHJhZ2dpbmc9ITEsZS5pbWcuY2xhc3NMaXN0LnJlbW92ZShcImRyYWdnaW5nXCIpfSksMTAwKX19LHtrZXk6XCJkcmFnXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5hY3RpdmUmJih0LnByZXZlbnREZWZhdWx0KCksXCJ0b3VjaG1vdmVcIj09PXQudHlwZT8odGhpcy5jdXJyZW50WD10LnRvdWNoZXNbMF0uY2xpZW50WC10aGlzLmluaXRpYWxYLHRoaXMuY3VycmVudFk9dC50b3VjaGVzWzBdLmNsaWVudFktdGhpcy5pbml0aWFsWSk6KHRoaXMuY3VycmVudFg9dC5jbGllbnRYLXRoaXMuaW5pdGlhbFgsdGhpcy5jdXJyZW50WT10LmNsaWVudFktdGhpcy5pbml0aWFsWSksdGhpcy54T2Zmc2V0PXRoaXMuY3VycmVudFgsdGhpcy55T2Zmc2V0PXRoaXMuY3VycmVudFksdGhpcy5pbWcuaXNEcmFnZ2luZz0hMCx0aGlzLmRyYWdnaW5nPSEwLHRoaXMuc2V0VHJhbnNsYXRlKHRoaXMuaW1nLHRoaXMuY3VycmVudFgsdGhpcy5jdXJyZW50WSkpfX0se2tleTpcIm9uTW92ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHRoaXMuem9vbWVkSW4pe3ZhciBlPXQuY2xpZW50WC10aGlzLmltZy5uYXR1cmFsV2lkdGgvMixpPXQuY2xpZW50WS10aGlzLmltZy5uYXR1cmFsSGVpZ2h0LzI7dGhpcy5zZXRUcmFuc2xhdGUodGhpcy5pbWcsZSxpKX19fSx7a2V5Olwic2V0VHJhbnNsYXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3Quc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlM2QoXCIrZStcInB4LCBcIitpK1wicHgsIDApXCJ9fSx7a2V5Olwid2lkb3dXaWR0aFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5pbm5lcldpZHRofHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGh8fGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGh9fV0pLHR9KCksZD1cIm5hdmlnYXRvclwiaW4gd2luZG93JiZ3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKGlQYWQpfChpUGhvbmUpfChpUG9kKXwoQW5kcm9pZCl8KFBsYXlCb29rKXwoQkIxMCl8KEJsYWNrQmVycnkpfChPcGVyYSBNaW5pKXwoSUVNb2JpbGUpfCh3ZWJPUyl8KE1lZUdvKS9pKSx1PW51bGwhPT1kfHx2b2lkIDAhPT1kb2N1bWVudC5jcmVhdGVUb3VjaHx8XCJvbnRvdWNoc3RhcnRcImluIHdpbmRvd3x8XCJvbm1zZ2VzdHVyZWNoYW5nZVwiaW4gd2luZG93fHxuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyxnPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHRtbFwiKVswXSxwPWZ1bmN0aW9uKCl7dmFyIHQsZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmFrZWVsZW1lbnRcIiksaT17dHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIixPVHJhbnNpdGlvbjpcIm9UcmFuc2l0aW9uRW5kXCIsTW96VHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIixXZWJraXRUcmFuc2l0aW9uOlwid2Via2l0VHJhbnNpdGlvbkVuZFwifTtmb3IodCBpbiBpKWlmKHZvaWQgMCE9PWUuc3R5bGVbdF0pcmV0dXJuIGlbdF19KCksdj1mdW5jdGlvbigpe3ZhciB0LGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZha2VlbGVtZW50XCIpLGk9e2FuaW1hdGlvbjpcImFuaW1hdGlvbmVuZFwiLE9BbmltYXRpb246XCJvQW5pbWF0aW9uRW5kXCIsTW96QW5pbWF0aW9uOlwiYW5pbWF0aW9uZW5kXCIsV2Via2l0QW5pbWF0aW9uOlwid2Via2l0QW5pbWF0aW9uRW5kXCJ9O2Zvcih0IGluIGkpaWYodm9pZCAwIT09ZS5zdHlsZVt0XSlyZXR1cm4gaVt0XX0oKSxmPURhdGUubm93KCksbT17fSx5PXtzZWxlY3RvcjpcIi5nbGlnaHRib3hcIixlbGVtZW50czpudWxsLHNraW46XCJjbGVhblwiLGNsb3NlQnV0dG9uOiEwLHN0YXJ0QXQ6bnVsbCxhdXRvcGxheVZpZGVvczohMCxkZXNjUG9zaXRpb246XCJib3R0b21cIix3aWR0aDpcIjkwMHB4XCIsaGVpZ2h0OlwiNTA2cHhcIix2aWRlb3NXaWR0aDpcIjk2MHB4XCIsYmVmb3JlU2xpZGVDaGFuZ2U6bnVsbCxhZnRlclNsaWRlQ2hhbmdlOm51bGwsYmVmb3JlU2xpZGVMb2FkOm51bGwsYWZ0ZXJTbGlkZUxvYWQ6bnVsbCxzbGlkZUluc2VydGVkOm51bGwsc2xpZGVSZW1vdmVkOm51bGwsb25PcGVuOm51bGwsb25DbG9zZTpudWxsLGxvb3A6ITEsdG91Y2hOYXZpZ2F0aW9uOiEwLHRvdWNoRm9sbG93QXhpczohMCxrZXlib2FyZE5hdmlnYXRpb246ITAsY2xvc2VPbk91dHNpZGVDbGljazohMCxwbHlyOntjc3M6XCJodHRwczovL2Nkbi5wbHlyLmlvLzMuNS42L3BseXIuY3NzXCIsanM6XCJodHRwczovL2Nkbi5wbHlyLmlvLzMuNS42L3BseXIuanNcIixjb25maWc6e3JhdGlvOlwiMTY6OVwiLHlvdXR1YmU6e25vQ29va2llOiEwLHJlbDowLHNob3dpbmZvOjAsaXZfbG9hZF9wb2xpY3k6M30sdmltZW86e2J5bGluZTohMSxwb3J0cmFpdDohMSx0aXRsZTohMSx0cmFuc3BhcmVudDohMX19fSxvcGVuRWZmZWN0Olwiem9vbUluXCIsY2xvc2VFZmZlY3Q6XCJ6b29tT3V0XCIsc2xpZGVFZmZlY3Q6XCJzbGlkZVwiLG1vcmVUZXh0OlwiU2VlIG1vcmVcIixtb3JlTGVuZ3RoOjYwLGxpZ2h0Ym94SHRtbDpcIlwiLGNzc0VmZWN0czp7ZmFkZTp7aW46XCJmYWRlSW5cIixvdXQ6XCJmYWRlT3V0XCJ9LHpvb206e2luOlwiem9vbUluXCIsb3V0Olwiem9vbU91dFwifSxzbGlkZTp7aW46XCJzbGlkZUluUmlnaHRcIixvdXQ6XCJzbGlkZU91dExlZnRcIn0sc2xpZGVfYmFjazp7aW46XCJzbGlkZUluTGVmdFwiLG91dDpcInNsaWRlT3V0UmlnaHRcIn19LHN2Zzp7Y2xvc2U6JzxzdmcgdmVyc2lvbj1cIjEuMVwiIGlkPVwiTGF5ZXJfMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PGc+PGc+PHBhdGggZD1cIk01MDUuOTQzLDYuMDU4Yy04LjA3Ny04LjA3Ny0yMS4xNzItOC4wNzctMjkuMjQ5LDBMNi4wNTgsNDc2LjY5M2MtOC4wNzcsOC4wNzctOC4wNzcsMjEuMTcyLDAsMjkuMjQ5QzEwLjA5Niw1MDkuOTgyLDE1LjM5LDUxMiwyMC42ODMsNTEyYzUuMjkzLDAsMTAuNTg2LTIuMDE5LDE0LjYyNS02LjA1OUw1MDUuOTQzLDM1LjMwNkM1MTQuMDE5LDI3LjIzLDUxNC4wMTksMTQuMTM1LDUwNS45NDMsNi4wNTh6XCIvPjwvZz48L2c+PGc+PGc+PHBhdGggZD1cIk01MDUuOTQyLDQ3Ni42OTRMMzUuMzA2LDYuMDU5Yy04LjA3Ni04LjA3Ny0yMS4xNzItOC4wNzctMjkuMjQ4LDBjLTguMDc3LDguMDc2LTguMDc3LDIxLjE3MSwwLDI5LjI0OGw0NzAuNjM2LDQ3MC42MzZjNC4wMzgsNC4wMzksOS4zMzIsNi4wNTgsMTQuNjI1LDYuMDU4YzUuMjkzLDAsMTAuNTg3LTIuMDE5LDE0LjYyNC02LjA1N0M1MTQuMDE4LDQ5Ny44NjYsNTE0LjAxOCw0ODQuNzcxLDUwNS45NDIsNDc2LjY5NHpcIi8+PC9nPjwvZz48L3N2Zz4nLG5leHQ6JzxzdmcgdmVyc2lvbj1cIjEuMVwiIGlkPVwiQ2FwYV8xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCA0NzcuMTc1IDQ3Ny4xNzVcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPiA8Zz48cGF0aCBkPVwiTTM2MC43MzEsMjI5LjA3NWwtMjI1LjEtMjI1LjFjLTUuMy01LjMtMTMuOC01LjMtMTkuMSwwcy01LjMsMTMuOCwwLDE5LjFsMjE1LjUsMjE1LjVsLTIxNS41LDIxNS41Yy01LjMsNS4zLTUuMywxMy44LDAsMTkuMWMyLjYsMi42LDYuMSw0LDkuNSw0YzMuNCwwLDYuOS0xLjMsOS41LTRsMjI1LjEtMjI1LjFDMzY1LjkzMSwyNDIuODc1LDM2NS45MzEsMjM0LjI3NSwzNjAuNzMxLDIyOS4wNzV6XCIvPjwvZz48L3N2Zz4nLHByZXY6JzxzdmcgdmVyc2lvbj1cIjEuMVwiIGlkPVwiQ2FwYV8xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCA0NzcuMTc1IDQ3Ny4xNzVcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxnPjxwYXRoIGQ9XCJNMTQ1LjE4OCwyMzguNTc1bDIxNS41LTIxNS41YzUuMy01LjMsNS4zLTEzLjgsMC0xOS4xcy0xMy44LTUuMy0xOS4xLDBsLTIyNS4xLDIyNS4xYy01LjMsNS4zLTUuMywxMy44LDAsMTkuMWwyMjUuMSwyMjVjMi42LDIuNiw2LjEsNCw5LjUsNHM2LjktMS4zLDkuNS00YzUuMy01LjMsNS4zLTEzLjgsMC0xOS4xTDE0NS4xODgsMjM4LjU3NXpcIi8+PC9nPjwvc3ZnPid9fTt5LnNsaWRlSHRtbD0nPGRpdiBjbGFzcz1cImdzbGlkZVwiPlxcbiAgICA8ZGl2IGNsYXNzPVwiZ3NsaWRlLWlubmVyLWNvbnRlbnRcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJnaW5uZXItY29udGFpbmVyXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdzbGlkZS1tZWRpYVwiPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJnc2xpZGUtZGVzY3JpcHRpb25cIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdkZXNjLWlubmVyXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJnc2xpZGUtdGl0bGVcIj48L2g0PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdzbGlkZS1kZXNjXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2Pic7eS5saWdodGJveEh0bWw9JzxkaXYgaWQ9XCJnbGlnaHRib3gtYm9keVwiIGNsYXNzPVwiZ2xpZ2h0Ym94LWNvbnRhaW5lclwiPlxcbiAgICA8ZGl2IGNsYXNzPVwiZ2xvYWRlciB2aXNpYmxlXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJnb3ZlcmxheVwiPjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwiZ2NvbnRhaW5lclwiPlxcbiAgICA8ZGl2IGlkPVwiZ2xpZ2h0Ym94LXNsaWRlclwiIGNsYXNzPVwiZ3NsaWRlclwiPjwvZGl2PlxcbiAgICA8YnV0dG9uIGNsYXNzPVwiZ25leHQgZ2J0blwiIHRhYmluZGV4PVwiMFwiPntuZXh0U1ZHfTwvYnV0dG9uPlxcbiAgICA8YnV0dG9uIGNsYXNzPVwiZ3ByZXYgZ2J0blwiIHRhYmluZGV4PVwiMVwiPntwcmV2U1ZHfTwvYnV0dG9uPlxcbiAgICA8YnV0dG9uIGNsYXNzPVwiZ2Nsb3NlIGdidG5cIiB0YWJpbmRleD1cIjJcIj57Y2xvc2VTVkd9PC9idXR0b24+XFxuPC9kaXY+XFxuPC9kaXY+Jzt2YXIgYj17aHJlZjpcIlwiLHRpdGxlOlwiXCIsdHlwZTpcIlwiLGRlc2NyaXB0aW9uOlwiXCIsZGVzY1Bvc2l0aW9uOlwiXCIsZWZmZWN0OlwiXCIsd2lkdGg6XCJcIixoZWlnaHQ6XCJcIixub2RlOiExLGNvbnRlbnQ6ITF9O2Z1bmN0aW9uIHgoKXt2YXIgdD17fSxlPSEwLGk9MCxuPWFyZ3VtZW50cy5sZW5ndGg7XCJbb2JqZWN0IEJvb2xlYW5dXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzWzBdKSYmKGU9YXJndW1lbnRzWzBdLGkrKyk7Zm9yKHZhciBzPWZ1bmN0aW9uKGkpe2Zvcih2YXIgbiBpbiBpKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpLG4pJiYoZSYmXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpW25dKT90W25dPXgoITAsdFtuXSxpW25dKTp0W25dPWlbbl0pfTtpPG47aSsrKXtzKGFyZ3VtZW50c1tpXSl9cmV0dXJuIHR9dmFyIHc9e2lzRnVuY3Rpb246ZnVuY3Rpb24odCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdH0saXNTdHJpbmc6ZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR9LGlzTm9kZTpmdW5jdGlvbih0KXtyZXR1cm4hKCF0fHwhdC5ub2RlVHlwZXx8MSE9dC5ub2RlVHlwZSl9LGlzQXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCl9LGlzQXJyYXlMaWtlOmZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lmxlbmd0aCYmaXNGaW5pdGUodC5sZW5ndGgpfSxpc09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT09dChlKSYmbnVsbCE9ZSYmIXcuaXNGdW5jdGlvbihlKSYmIXcuaXNBcnJheShlKX0saXNOaWw6ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXR9LGhhczpmdW5jdGlvbih0LGUpe3JldHVybiBudWxsIT09dCYmaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxzaXplOmZ1bmN0aW9uKHQpe2lmKHcuaXNPYmplY3QodCkpe2lmKHQua2V5cylyZXR1cm4gdC5rZXlzKCkubGVuZ3RoO3ZhciBlPTA7Zm9yKHZhciBpIGluIHQpdy5oYXModCxpKSYmZSsrO3JldHVybiBlfXJldHVybiB0Lmxlbmd0aH0saXNOdW1iZXI6ZnVuY3Rpb24odCl7cmV0dXJuIWlzTmFOKHBhcnNlRmxvYXQodCkpJiZpc0Zpbml0ZSh0KX19O2Z1bmN0aW9uIFModCxlKXtpZigody5pc05vZGUodCl8fHQ9PT13aW5kb3d8fHQ9PT1kb2N1bWVudCkmJih0PVt0XSksdy5pc0FycmF5TGlrZSh0KXx8dy5pc09iamVjdCh0KXx8KHQ9W3RdKSwwIT13LnNpemUodCkpaWYody5pc0FycmF5TGlrZSh0KSYmIXcuaXNPYmplY3QodCkpZm9yKHZhciBpPXQubGVuZ3RoLG49MDtuPGkmJiExIT09ZS5jYWxsKHRbbl0sdFtuXSxuLHQpO24rKyk7ZWxzZSBpZih3LmlzT2JqZWN0KHQpKWZvcih2YXIgcyBpbiB0KWlmKHcuaGFzKHQscykmJiExPT09ZS5jYWxsKHRbc10sdFtzXSxzLHQpKWJyZWFrfWZ1bmN0aW9uIFQodCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm51bGwsaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCxuPXRbZl09dFtmXXx8W10scz17YWxsOm4sZXZ0Om51bGwsZm91bmQ6bnVsbH07cmV0dXJuIGUmJmkmJncuc2l6ZShuKT4wJiZTKG4sKGZ1bmN0aW9uKHQsbil7aWYodC5ldmVudE5hbWU9PWUmJnQuZm4udG9TdHJpbmcoKT09aS50b1N0cmluZygpKXJldHVybiBzLmZvdW5kPSEwLHMuZXZ0PW4sITF9KSksc31mdW5jdGlvbiBrKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxpPWUub25FbGVtZW50LG49ZS53aXRoQ2FsbGJhY2sscz1lLmF2b2lkRHVwbGljYXRlLG89dm9pZCAwPT09c3x8cyxsPWUub25jZSxyPXZvaWQgMCE9PWwmJmwsYT1lLnVzZUNhcHR1cmUsaD12b2lkIDAhPT1hJiZhLGM9YXJndW1lbnRzLmxlbmd0aD4yP2FyZ3VtZW50c1syXTp2b2lkIDAsZD1pfHxbXTtmdW5jdGlvbiB1KHQpe3cuaXNGdW5jdGlvbihuKSYmbi5jYWxsKGMsdCx0aGlzKSxyJiZ1LmRlc3Ryb3koKX1yZXR1cm4gdy5pc1N0cmluZyhkKSYmKGQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChkKSksdS5kZXN0cm95PWZ1bmN0aW9uKCl7UyhkLChmdW5jdGlvbihlKXt2YXIgaT1UKGUsdCx1KTtpLmZvdW5kJiZpLmFsbC5zcGxpY2UoaS5ldnQsMSksZS5yZW1vdmVFdmVudExpc3RlbmVyJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCx1LGgpfSkpfSxTKGQsKGZ1bmN0aW9uKGUpe3ZhciBpPVQoZSx0LHUpOyhlLmFkZEV2ZW50TGlzdGVuZXImJm8mJiFpLmZvdW5kfHwhbykmJihlLmFkZEV2ZW50TGlzdGVuZXIodCx1LGgpLGkuYWxsLnB1c2goe2V2ZW50TmFtZTp0LGZuOnV9KSl9KSksdX1mdW5jdGlvbiBFKHQsZSl7UyhlLnNwbGl0KFwiIFwiKSwoZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2xhc3NMaXN0LmFkZChlKX0pKX1mdW5jdGlvbiBBKHQsZSl7UyhlLnNwbGl0KFwiIFwiKSwoZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2xhc3NMaXN0LnJlbW92ZShlKX0pKX1mdW5jdGlvbiBDKHQsZSl7cmV0dXJuIHQuY2xhc3NMaXN0LmNvbnRhaW5zKGUpfWZ1bmN0aW9uIEwodCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiXCIsaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdO2lmKCF0fHxcIlwiPT09ZSlyZXR1cm4hMTtpZihcIm5vbmVcIj09ZSlyZXR1cm4gdy5pc0Z1bmN0aW9uKGkpJiZpKCksITE7dmFyIG49ZS5zcGxpdChcIiBcIik7UyhuLChmdW5jdGlvbihlKXtFKHQsXCJnXCIrZSl9KSksayh2LHtvbkVsZW1lbnQ6dCxhdm9pZER1cGxpY2F0ZTohMSxvbmNlOiEwLHdpdGhDYWxsYmFjazpmdW5jdGlvbih0LGUpe1MobiwoZnVuY3Rpb24odCl7QShlLFwiZ1wiK3QpfSkpLHcuaXNGdW5jdGlvbihpKSYmaSgpfX0pfWZ1bmN0aW9uIE4odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3IoaS5pbm5lckhUTUw9dDtpLmZpcnN0Q2hpbGQ7KWUuYXBwZW5kQ2hpbGQoaS5maXJzdENoaWxkKTtyZXR1cm4gZX1mdW5jdGlvbiBJKHQsZSl7Zm9yKDt0IT09ZG9jdW1lbnQuYm9keTspe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKHQ9dC5wYXJlbnRFbGVtZW50KS5tYXRjaGVzP3QubWF0Y2hlcyhlKTp0Lm1zTWF0Y2hlc1NlbGVjdG9yKGUpKXJldHVybiB0fX1mdW5jdGlvbiBPKHQpe3Quc3R5bGUuZGlzcGxheT1cImJsb2NrXCJ9ZnVuY3Rpb24gTSh0KXt0LnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9ZnVuY3Rpb24gcSgpe3JldHVybnt3aWR0aDp3aW5kb3cuaW5uZXJXaWR0aHx8ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRofHxkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLGhlaWdodDp3aW5kb3cuaW5uZXJIZWlnaHR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHR8fGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0fX1mdW5jdGlvbiB6KHQpe2lmKEModC50YXJnZXQsXCJwbHlyLS1odG1sNVwiKSl7dmFyIGU9SSh0LnRhcmdldCxcIi5nc2xpZGUtbWVkaWFcIik7XCJlbnRlcmZ1bGxzY3JlZW5cIj09dC50eXBlJiZFKGUsXCJmdWxsc2NyZWVuXCIpLFwiZXhpdGZ1bGxzY3JlZW5cIj09dC50eXBlJiZBKGUsXCJmdWxsc2NyZWVuXCIpfX1mdW5jdGlvbiBQKHQpe3JldHVybiB3LmlzTnVtYmVyKHQpP1wiXCIuY29uY2F0KHQsXCJweFwiKTp0fWZ1bmN0aW9uIEQodCxlKXt2YXIgaT1cInZpZGVvXCI9PXQudHlwZT9QKGUudmlkZW9zV2lkdGgpOlAoZS53aWR0aCksbj1QKGUuaGVpZ2h0KTtyZXR1cm4gdC53aWR0aD13Lmhhcyh0LFwid2lkdGhcIikmJlwiXCIhPT10LndpZHRoP1AodC53aWR0aCk6aSx0LmhlaWdodD13Lmhhcyh0LFwiaGVpZ2h0XCIpJiZcIlwiIT09dC5oZWlnaHQ/UCh0LmhlaWdodCk6bix0fXZhciBYPWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm51bGwsZT1hcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCxpPXgoe2Rlc2NQb3NpdGlvbjplLmRlc2NQb3NpdGlvbn0sYik7aWYody5pc09iamVjdCh0KSYmIXcuaXNOb2RlKHQpKXt3Lmhhcyh0LFwidHlwZVwiKXx8KHcuaGFzKHQsXCJjb250ZW50XCIpJiZ0LmNvbnRlbnQ/dC50eXBlPVwiaW5saW5lXCI6dy5oYXModCxcImhyZWZcIikmJih0LnR5cGU9Vyh0LmhyZWYpKSk7dmFyIG49eChpLHQpO3JldHVybiBEKG4sZSksbn12YXIgcz1cIlwiLG89dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWdsaWdodGJveFwiKSxsPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcImFcIj09PWwmJihzPXQuaHJlZiksXCJpbWdcIj09PWwmJihzPXQuc3JjKSxpLmhyZWY9cyxTKGksKGZ1bmN0aW9uKG4scyl7dy5oYXMoZSxzKSYmXCJ3aWR0aFwiIT09cyYmKGlbc109ZVtzXSk7dmFyIG89dC5kYXRhc2V0W3NdO3cuaXNOaWwobyl8fChpW3NdPW8pfSkpLGkuY29udGVudCYmKGkudHlwZT1cImlubGluZVwiKSwhaS50eXBlJiZzJiYoaS50eXBlPVcocykpLHcuaXNOaWwobykpe2lmKFwiYVwiPT1sKXt2YXIgcj10LnRpdGxlO3cuaXNOaWwocil8fFwiXCI9PT1yfHwoaS50aXRsZT1yKX1pZihcImltZ1wiPT1sKXt2YXIgYT10LmFsdDt3LmlzTmlsKGEpfHxcIlwiPT09YXx8KGkudGl0bGU9YSl9dmFyIGg9dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWRlc2NyaXB0aW9uXCIpO3cuaXNOaWwoaCl8fFwiXCI9PT1ofHwoaS5kZXNjcmlwdGlvbj1oKX1lbHNle3ZhciBjPVtdO1MoaSwoZnVuY3Rpb24odCxlKXtjLnB1c2goXCI7XFxcXHM/XCIrZSl9KSksYz1jLmpvaW4oXCJcXFxccz86fFwiKSxcIlwiIT09by50cmltKCkmJlMoaSwoZnVuY3Rpb24odCxlKXt2YXIgbj1vLHM9bmV3IFJlZ0V4cChcInM/XCIrZStcInM/OnM/KC4qPykoXCIrYytcInM/OnwkKVwiKSxsPW4ubWF0Y2gocyk7aWYobCYmbC5sZW5ndGgmJmxbMV0pe3ZhciByPWxbMV0udHJpbSgpLnJlcGxhY2UoLztcXHMqJC8sXCJcIik7aVtlXT1yfX0pKX1pZihpLmRlc2NyaXB0aW9uJiZcIi5cIj09aS5kZXNjcmlwdGlvbi5zdWJzdHJpbmcoMCwxKSYmZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpLmRlc2NyaXB0aW9uKSlpLmRlc2NyaXB0aW9uPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaS5kZXNjcmlwdGlvbikuaW5uZXJIVE1MO2Vsc2V7dmFyIGQ9dC5xdWVyeVNlbGVjdG9yKFwiLmdsaWdodGJveC1kZXNjXCIpO2QmJihpLmRlc2NyaXB0aW9uPWQuaW5uZXJIVE1MKX1yZXR1cm4gRChpLGUpLGl9LEI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm51bGwsaT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30sbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdO2lmKEMoZSxcImxvYWRlZFwiKSlyZXR1cm4hMTt3LmlzRnVuY3Rpb24odGhpcy5zZXR0aW5ncy5iZWZvcmVTbGlkZUxvYWQpJiZ0aGlzLnNldHRpbmdzLmJlZm9yZVNsaWRlTG9hZCh7aW5kZXg6aS5pbmRleCxzbGlkZTplLHBsYXllcjohMX0pO3ZhciBzPWkudHlwZSxvPWkuZGVzY1Bvc2l0aW9uLGw9ZS5xdWVyeVNlbGVjdG9yKFwiLmdzbGlkZS1tZWRpYVwiKSxyPWUucXVlcnlTZWxlY3RvcihcIi5nc2xpZGUtdGl0bGVcIiksYT1lLnF1ZXJ5U2VsZWN0b3IoXCIuZ3NsaWRlLWRlc2NcIiksaD1lLnF1ZXJ5U2VsZWN0b3IoXCIuZ2Rlc2MtaW5uZXJcIiksdT1uLGc9XCJnU2xpZGVUaXRsZV9cIitpLmluZGV4LHA9XCJnU2xpZGVEZXNjX1wiK2kuaW5kZXg7aWYody5pc0Z1bmN0aW9uKHRoaXMuc2V0dGluZ3MuYWZ0ZXJTbGlkZUxvYWQpJiYodT1mdW5jdGlvbigpe3cuaXNGdW5jdGlvbihuKSYmbigpLHQuc2V0dGluZ3MuYWZ0ZXJTbGlkZUxvYWQoe2luZGV4OmkuaW5kZXgsc2xpZGU6ZSxwbGF5ZXI6dC5nZXRTbGlkZVBsYXllckluc3RhbmNlKGkuaW5kZXgpfSl9KSxcIlwiPT1pLnRpdGxlJiZcIlwiPT1pLmRlc2NyaXB0aW9uP2gmJmgucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgucGFyZW50Tm9kZSk6KHImJlwiXCIhPT1pLnRpdGxlPyhyLmlkPWcsci5pbm5lckhUTUw9aS50aXRsZSk6ci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpLGEmJlwiXCIhPT1pLmRlc2NyaXB0aW9uPyhhLmlkPXAsZCYmdGhpcy5zZXR0aW5ncy5tb3JlTGVuZ3RoPjA/KGkuc21hbGxEZXNjcmlwdGlvbj0kKGkuZGVzY3JpcHRpb24sdGhpcy5zZXR0aW5ncy5tb3JlTGVuZ3RoLHRoaXMuc2V0dGluZ3MubW9yZVRleHQpLGEuaW5uZXJIVE1MPWkuc21hbGxEZXNjcmlwdGlvbixVLmFwcGx5KHRoaXMsW2EsaV0pKTphLmlubmVySFRNTD1pLmRlc2NyaXB0aW9uKTphLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYSksRShsLnBhcmVudE5vZGUsXCJkZXNjLVwiLmNvbmNhdChvKSksRShoLnBhcmVudE5vZGUsXCJkZXNjcmlwdGlvbi1cIi5jb25jYXQobykpKSxFKGwsXCJnc2xpZGUtXCIuY29uY2F0KHMpKSxFKGUsXCJsb2FkZWRcIiksXCJ2aWRlb1wiPT09cylyZXR1cm4gRShsLnBhcmVudE5vZGUsXCJndmlkZW8tY29udGFpbmVyXCIpLGwuaW5zZXJ0QmVmb3JlKE4oJzxkaXYgY2xhc3M9XCJndmlkZW8td3JhcHBlclwiPjwvZGl2PicpLGwuZmlyc3RDaGlsZCksdm9pZCBGLmFwcGx5KHRoaXMsW2UsaSx1XSk7aWYoXCJleHRlcm5hbFwiPT09cyl7dmFyIHY9WSh7dXJsOmkuaHJlZixjYWxsYmFjazp1fSk7cmV0dXJuIGwucGFyZW50Tm9kZS5zdHlsZS5tYXhXaWR0aD1pLndpZHRoLGwucGFyZW50Tm9kZS5zdHlsZS5oZWlnaHQ9aS5oZWlnaHQsdm9pZCBsLmFwcGVuZENoaWxkKHYpfWlmKFwiaW5saW5lXCIhPT1zKXtpZihcImltYWdlXCI9PT1zKXt2YXIgZj1uZXcgSW1hZ2U7cmV0dXJuIGYuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwoZnVuY3Rpb24oKXtmLm5hdHVyYWxXaWR0aD5mLm9mZnNldFdpZHRoJiYoRShmLFwiem9vbWFibGVcIiksbmV3IGMoZixlLChmdW5jdGlvbigpe3QucmVzaXplKGUpfSkpKSx3LmlzRnVuY3Rpb24odSkmJnUoKX0pLCExKSxmLnNyYz1pLmhyZWYsZi5hbHQ9XCJcIixcIlwiIT09aS50aXRsZSYmZi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsbGVkYnlcIixnKSxcIlwiIT09aS5kZXNjcmlwdGlvbiYmZi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIscCksdm9pZCBsLmluc2VydEJlZm9yZShmLGwuZmlyc3RDaGlsZCl9dy5pc0Z1bmN0aW9uKHUpJiZ1KCl9ZWxzZSBILmFwcGx5KHRoaXMsW2UsaSx1XSl9O2Z1bmN0aW9uIEYodCxlLGkpe3ZhciBuPXRoaXMscz1cImd2aWRlb1wiK2UuaW5kZXgsbz10LnF1ZXJ5U2VsZWN0b3IoXCIuZ3ZpZGVvLXdyYXBwZXJcIik7Xyh0aGlzLnNldHRpbmdzLnBseXIuY3NzKTt2YXIgbD1lLmhyZWYscj1sb2NhdGlvbi5wcm90b2NvbC5yZXBsYWNlKFwiOlwiLFwiXCIpLGE9XCJcIixoPVwiXCIsYz0hMTtcImZpbGVcIj09ciYmKHI9XCJodHRwXCIpLG8ucGFyZW50Tm9kZS5zdHlsZS5tYXhXaWR0aD1lLndpZHRoLF8odGhpcy5zZXR0aW5ncy5wbHlyLmpzLFwiUGx5clwiLChmdW5jdGlvbigpe2lmKGwubWF0Y2goL3ZpbWVvXFwuY29tXFwvKFswLTldKikvKSl7dmFyIHQ9L3ZpbWVvLipcXC8oXFxkKykvaS5leGVjKGwpO2E9XCJ2aW1lb1wiLGg9dFsxXX1pZihsLm1hdGNoKC8oeW91dHViZVxcLmNvbXx5b3V0dWJlLW5vY29va2llXFwuY29tKVxcL3dhdGNoXFw/dj0oW2EtekEtWjAtOVxcLV9dKykvKXx8bC5tYXRjaCgveW91dHVcXC5iZVxcLyhbYS16QS1aMC05XFwtX10rKS8pfHxsLm1hdGNoKC8oeW91dHViZVxcLmNvbXx5b3V0dWJlLW5vY29va2llXFwuY29tKVxcL2VtYmVkXFwvKFthLXpBLVowLTlcXC1fXSspLykpe3ZhciByPWZ1bmN0aW9uKHQpe3ZhciBlPVwiXCI7ZT12b2lkIDAhPT0odD10LnJlcGxhY2UoLyg+fDwpL2dpLFwiXCIpLnNwbGl0KC8odmlcXC98dj18XFwvdlxcL3x5b3V0dVxcLmJlXFwvfFxcL2VtYmVkXFwvKS8pKVsyXT8oZT10WzJdLnNwbGl0KC9bXjAtOWEtel9cXC1dL2kpKVswXTp0O3JldHVybiBlfShsKTthPVwieW91dHViZVwiLGg9cn1pZihudWxsIT09bC5tYXRjaCgvXFwuKG1wNHxvZ2d8d2VibXxtb3YpJC8pKXthPVwibG9jYWxcIjt2YXIgZD0nPHZpZGVvIGlkPVwiJytzKydcIiAnO2QrPSdzdHlsZT1cImJhY2tncm91bmQ6IzAwMDsgbWF4LXdpZHRoOiAnLmNvbmNhdChlLndpZHRoLCc7XCIgJyksZCs9J3ByZWxvYWQ9XCJtZXRhZGF0YVwiICcsZCs9J3gtd2Via2l0LWFpcnBsYXk9XCJhbGxvd1wiICcsZCs9J3dlYmtpdC1wbGF5c2lubGluZT1cIlwiICcsZCs9XCJjb250cm9scyBcIixkKz0nY2xhc3M9XCJndmlkZW8tbG9jYWxcIj4nO3ZhciB1PWwudG9Mb3dlckNhc2UoKS5zcGxpdChcIi5cIikucG9wKCksZz17bXA0OlwiXCIsb2dnOlwiXCIsd2VibTpcIlwifTtmb3IodmFyIHAgaW4gZ1t1PVwibW92XCI9PXU/XCJtcDRcIjp1XT1sLGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShwKSl7dmFyIHY9Z1twXTtlLmhhc093blByb3BlcnR5KHApJiYodj1lW3BdKSxcIlwiIT09diYmKGQrPSc8c291cmNlIHNyYz1cIicuY29uY2F0KHYsJ1wiIHR5cGU9XCJ2aWRlby8nKS5jb25jYXQocCwnXCI+JykpfWM9TihkKz1cIjwvdmlkZW8+XCIpfXZhciBmPWN8fE4oJzxkaXYgaWQ9XCInLmNvbmNhdChzLCdcIiBkYXRhLXBseXItcHJvdmlkZXI9XCInKS5jb25jYXQoYSwnXCIgZGF0YS1wbHlyLWVtYmVkLWlkPVwiJykuY29uY2F0KGgsJ1wiPjwvZGl2PicpKTtFKG8sXCJcIi5jb25jYXQoYSxcIi12aWRlbyBndmlkZW9cIikpLG8uYXBwZW5kQ2hpbGQoZiksby5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIscyksby5zZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIsZS5pbmRleCk7dmFyIHk9dy5oYXMobi5zZXR0aW5ncy5wbHlyLFwiY29uZmlnXCIpP24uc2V0dGluZ3MucGx5ci5jb25maWc6e30sYj1uZXcgUGx5cihcIiNcIitzLHkpO2Iub24oXCJyZWFkeVwiLChmdW5jdGlvbih0KXt2YXIgZT10LmRldGFpbC5wbHlyO21bc109ZSx3LmlzRnVuY3Rpb24oaSkmJmkoKX0pKSxiLm9uKFwiZW50ZXJmdWxsc2NyZWVuXCIseiksYi5vbihcImV4aXRmdWxsc2NyZWVuXCIseil9KSl9ZnVuY3Rpb24gWSh0KXt2YXIgZT10LnVybCxpPXQuYWxsb3csbj10LmNhbGxiYWNrLHM9dC5hcHBlbmRUbyxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7cmV0dXJuIG8uY2xhc3NOYW1lPVwidmltZW8tdmlkZW8gZ3ZpZGVvXCIsby5zcmM9ZSxvLnN0eWxlLndpZHRoPVwiMTAwJVwiLG8uc3R5bGUuaGVpZ2h0PVwiMTAwJVwiLGkmJm8uc2V0QXR0cmlidXRlKFwiYWxsb3dcIixpKSxvLm9ubG9hZD1mdW5jdGlvbigpe0UobyxcIm5vZGUtcmVhZHlcIiksdy5pc0Z1bmN0aW9uKG4pJiZuKCl9LHMmJnMuYXBwZW5kQ2hpbGQobyksb31mdW5jdGlvbiBfKHQsZSxpKXtpZih3LmlzTmlsKHQpKWNvbnNvbGUuZXJyb3IoXCJJbmplY3QgdmlkZW9zIGFwaSBlcnJvclwiKTtlbHNle3ZhciBuO2lmKHcuaXNGdW5jdGlvbihlKSYmKGk9ZSxlPSExKSwtMSE9PXQuaW5kZXhPZihcIi5jc3NcIikpe2lmKChuPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmtbaHJlZj1cIicrdCsnXCJdJykpJiZuLmxlbmd0aD4wKXJldHVybiB2b2lkKHcuaXNGdW5jdGlvbihpKSYmaSgpKTt2YXIgcz1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0sbz1zLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmtbcmVsPVwic3R5bGVzaGVldFwiXScpLGw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7cmV0dXJuIGwucmVsPVwic3R5bGVzaGVldFwiLGwudHlwZT1cInRleHQvY3NzXCIsbC5ocmVmPXQsbC5tZWRpYT1cImFsbFwiLG8/cy5pbnNlcnRCZWZvcmUobCxvWzBdKTpzLmFwcGVuZENoaWxkKGwpLHZvaWQody5pc0Z1bmN0aW9uKGkpJiZpKCkpfWlmKChuPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdFtzcmM9XCInK3QrJ1wiXScpKSYmbi5sZW5ndGg+MCl7aWYody5pc0Z1bmN0aW9uKGkpKXtpZih3LmlzU3RyaW5nKGUpKXJldHVybiBqKChmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT13aW5kb3dbZV19KSwoZnVuY3Rpb24oKXtpKCl9KSksITE7aSgpfX1lbHNle3ZhciByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7ci50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIsci5zcmM9dCxyLm9ubG9hZD1mdW5jdGlvbigpe2lmKHcuaXNGdW5jdGlvbihpKSl7aWYody5pc1N0cmluZyhlKSlyZXR1cm4gaigoZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09d2luZG93W2VdfSksKGZ1bmN0aW9uKCl7aSgpfSkpLCExO2koKX19LGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocil9fX1mdW5jdGlvbiBqKHQsZSxpLG4pe2lmKHQoKSllKCk7ZWxzZXt2YXIgcztpfHwoaT0xMDApO3ZhciBvPXNldEludGVydmFsKChmdW5jdGlvbigpe3QoKSYmKGNsZWFySW50ZXJ2YWwobykscyYmY2xlYXJUaW1lb3V0KHMpLGUoKSl9KSxpKTtuJiYocz1zZXRUaW1lb3V0KChmdW5jdGlvbigpe2NsZWFySW50ZXJ2YWwobyl9KSxuKSl9fWZ1bmN0aW9uIEgodCxlLGkpe3ZhciBuLHM9dGhpcyxvPXQucXVlcnlTZWxlY3RvcihcIi5nc2xpZGUtbWVkaWFcIiksbD0hKCF3LmhhcyhlLFwiaHJlZlwiKXx8IWUuaHJlZikmJmUuaHJlZi5zcGxpdChcIiNcIikucG9wKCkudHJpbSgpLHI9ISghdy5oYXMoZSxcImNvbnRlbnRcIil8fCFlLmNvbnRlbnQpJiZlLmNvbnRlbnQ7aWYociYmKHcuaXNTdHJpbmcocikmJihuPU4oJzxkaXYgY2xhc3M9XCJnaW5saW5lZC1jb250ZW50XCI+Jy5jb25jYXQocixcIjwvZGl2PlwiKSkpLHcuaXNOb2RlKHIpKSl7XCJub25lXCI9PXIuc3R5bGUuZGlzcGxheSYmKHIuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIpO3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7YS5jbGFzc05hbWU9XCJnaW5saW5lZC1jb250ZW50XCIsYS5hcHBlbmRDaGlsZChyKSxuPWF9aWYobCl7dmFyIGg9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobCk7aWYoIWgpcmV0dXJuITE7dmFyIGM9aC5jbG9uZU5vZGUoITApO2Muc3R5bGUuaGVpZ2h0PWUuaGVpZ2h0LGMuc3R5bGUubWF4V2lkdGg9ZS53aWR0aCxFKGMsXCJnaW5saW5lZC1jb250ZW50XCIpLG49Y31pZighbilyZXR1cm4gY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBhcHBlbmQgaW5saW5lIHNsaWRlIGNvbnRlbnRcIixlKSwhMTtvLnN0eWxlLmhlaWdodD1lLmhlaWdodCxvLnN0eWxlLndpZHRoPWUud2lkdGgsby5hcHBlbmRDaGlsZChuKSx0aGlzLmV2ZW50c1tcImlubGluZWNsb3NlXCIrbF09ayhcImNsaWNrXCIse29uRWxlbWVudDpvLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ3RyaWdnZXItY2xvc2VcIiksd2l0aENhbGxiYWNrOmZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSxzLmNsb3NlKCl9fSksdy5pc0Z1bmN0aW9uKGkpJiZpKCl9dmFyIFc9ZnVuY3Rpb24odCl7dmFyIGU9dDtpZihudWxsIT09KHQ9dC50b0xvd2VyQ2FzZSgpKS5tYXRjaCgvXFwuKGpwZWd8anBnfGpwZXxnaWZ8cG5nfGFwbnx3ZWJwfHN2ZykkLykpcmV0dXJuXCJpbWFnZVwiO2lmKHQubWF0Y2goLyh5b3V0dWJlXFwuY29tfHlvdXR1YmUtbm9jb29raWVcXC5jb20pXFwvd2F0Y2hcXD92PShbYS16QS1aMC05XFwtX10rKS8pfHx0Lm1hdGNoKC95b3V0dVxcLmJlXFwvKFthLXpBLVowLTlcXC1fXSspLyl8fHQubWF0Y2goLyh5b3V0dWJlXFwuY29tfHlvdXR1YmUtbm9jb29raWVcXC5jb20pXFwvZW1iZWRcXC8oW2EtekEtWjAtOVxcLV9dKykvKSlyZXR1cm5cInZpZGVvXCI7aWYodC5tYXRjaCgvdmltZW9cXC5jb21cXC8oWzAtOV0qKS8pKXJldHVyblwidmlkZW9cIjtpZihudWxsIT09dC5tYXRjaCgvXFwuKG1wNHxvZ2d8d2VibXxtb3YpJC8pKXJldHVyblwidmlkZW9cIjtpZih0LmluZGV4T2YoXCIjXCIpPi0xJiZcIlwiIT09ZS5zcGxpdChcIiNcIikucG9wKCkudHJpbSgpKXJldHVyblwiaW5saW5lXCI7cmV0dXJuIHQuaW5jbHVkZXMoXCJnYWpheD10cnVlXCIpP1wiYWpheFwiOlwiZXh0ZXJuYWxcIn07ZnVuY3Rpb24gVigpe3ZhciB0PXRoaXM7aWYodGhpcy5ldmVudHMuaGFzT3duUHJvcGVydHkoXCJrZXlib2FyZFwiKSlyZXR1cm4hMTt0aGlzLmV2ZW50cy5rZXlib2FyZD1rKFwia2V5ZG93blwiLHtvbkVsZW1lbnQ6d2luZG93LHdpdGhDYWxsYmFjazpmdW5jdGlvbihlLGkpe3ZhciBuPShlPWV8fHdpbmRvdy5ldmVudCkua2V5Q29kZTtpZig5PT1uKXt2YXIgbz0hKCFkb2N1bWVudC5hY3RpdmVFbGVtZW50fHwhZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSkmJmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtpZihcImlucHV0XCI9PW98fFwidGV4dGFyZWFcIj09b3x8XCJidXR0b25cIj09bylyZXR1cm47ZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciBsPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ2J0blwiKTtpZighbHx8bC5sZW5ndGg8PTApcmV0dXJuO3ZhciByPXMobCkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gQyh0LFwiZm9jdXNlZFwiKX0pKTtpZighci5sZW5ndGgpe3ZhciBhPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nYnRuW3RhYmluZGV4PVwiMFwiXScpO3JldHVybiB2b2lkKGEmJihhLmZvY3VzKCksRShhLFwiZm9jdXNlZFwiKSkpfWwuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIEEodCxcImZvY3VzZWRcIil9KSk7dmFyIGg9clswXS5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKTtoPWh8fFwiMFwiO3ZhciBjPXBhcnNlSW50KGgpKzE7Yz5sLmxlbmd0aC0xJiYoYz1cIjBcIik7dmFyIGQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdidG5bdGFiaW5kZXg9XCInLmNvbmNhdChjLCdcIl0nKSk7ZCYmKGQuZm9jdXMoKSxFKGQsXCJmb2N1c2VkXCIpKX0zOT09biYmdC5uZXh0U2xpZGUoKSwzNz09biYmdC5wcmV2U2xpZGUoKSwyNz09biYmdC5jbG9zZSgpfX0pfWZ1bmN0aW9uIEcoKXt2YXIgdD10aGlzO2lmKHRoaXMuZXZlbnRzLmhhc093blByb3BlcnR5KFwidG91Y2hcIikpcmV0dXJuITE7dmFyIGUsaSxuLHM9cSgpLG89cy53aWR0aCxsPXMuaGVpZ2h0LHI9ITEsYT1udWxsLGM9bnVsbCxkPW51bGwsdT0hMSxnPTEscD0xLHY9ITEsZj0hMSxtPW51bGwseT1udWxsLGI9bnVsbCx4PW51bGwsdz0wLFM9MCxUPSExLGs9ITEsTD17fSxOPXt9LE89MCxNPTAsej10aGlzLFA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnbGlnaHRib3gtc2xpZGVyXCIpLEQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5nb3ZlcmxheVwiKSxYPSh0aGlzLmxvb3AoKSxuZXcgaChQLHt0b3VjaFN0YXJ0OmZ1bmN0aW9uKHQpe2lmKEModC50YXJnZXRUb3VjaGVzWzBdLnRhcmdldCxcImdpbm5lci1jb250YWluZXJcIil8fEkodC50YXJnZXRUb3VjaGVzWzBdLnRhcmdldCxcIi5nc2xpZGUtZGVzY1wiKSlyZXR1cm4gcj0hMSwhMTtyPSEwLE49dC50YXJnZXRUb3VjaGVzWzBdLEwucGFnZVg9dC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYLEwucGFnZVk9dC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZLE89dC50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFgsTT10LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSxhPXouYWN0aXZlU2xpZGUsYz1hLnF1ZXJ5U2VsZWN0b3IoXCIuZ3NsaWRlLW1lZGlhXCIpLG49YS5xdWVyeVNlbGVjdG9yKFwiLmdzbGlkZS1pbmxpbmVcIiksZD1udWxsLEMoYyxcImdzbGlkZS1pbWFnZVwiKSYmKGQ9Yy5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpKSxBKEQsXCJncmVzZXRcIil9LHRvdWNoTW92ZTpmdW5jdGlvbihzKXtpZihyJiYoTj1zLnRhcmdldFRvdWNoZXNbMF0sIXYmJiFmKSl7aWYobiYmbi5vZmZzZXRIZWlnaHQ+bCl7dmFyIGE9TC5wYWdlWC1OLnBhZ2VYO2lmKE1hdGguYWJzKGEpPD0xMylyZXR1cm4hMX11PSEwO3ZhciBoLGc9cy50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFgscD1zLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSxtPU8tZyx5PU0tcDtpZihNYXRoLmFicyhtKT5NYXRoLmFicyh5KT8oVD0hMSxrPSEwKTooaz0hMSxUPSEwKSxlPU4ucGFnZVgtTC5wYWdlWCx3PTEwMCplL28saT1OLnBhZ2VZLUwucGFnZVksUz0xMDAqaS9sLFQmJmQmJihoPTEtTWF0aC5hYnMoaSkvbCxELnN0eWxlLm9wYWNpdHk9aCx0LnNldHRpbmdzLnRvdWNoRm9sbG93QXhpcyYmKHc9MCkpLGsmJihoPTEtTWF0aC5hYnMoZSkvbyxjLnN0eWxlLm9wYWNpdHk9aCx0LnNldHRpbmdzLnRvdWNoRm9sbG93QXhpcyYmKFM9MCkpLCFkKXJldHVybiBSKGMsXCJ0cmFuc2xhdGUzZChcIi5jb25jYXQodyxcIiUsIDAsIDApXCIpKTtSKGMsXCJ0cmFuc2xhdGUzZChcIi5jb25jYXQodyxcIiUsIFwiKS5jb25jYXQoUyxcIiUsIDApXCIpKX19LHRvdWNoRW5kOmZ1bmN0aW9uKCl7aWYocil7aWYodT0hMSxmfHx2KXJldHVybiBiPW0sdm9pZCh4PXkpO3ZhciBlPU1hdGguYWJzKHBhcnNlSW50KFMpKSxpPU1hdGguYWJzKHBhcnNlSW50KHcpKTtpZighKGU+MjkmJmQpKXJldHVybiBlPDI5JiZpPDI1PyhFKEQsXCJncmVzZXRcIiksRC5zdHlsZS5vcGFjaXR5PTEsWihjKSk6dm9pZCAwO3QuY2xvc2UoKX19LG11bHRpcG9pbnRFbmQ6ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KChmdW5jdGlvbigpe3Y9ITF9KSw1MCl9LG11bHRpcG9pbnRTdGFydDpmdW5jdGlvbigpe3Y9ITAsZz1wfHwxfSxwaW5jaDpmdW5jdGlvbih0KXtpZighZHx8dSlyZXR1cm4hMTt2PSEwLGQuc2NhbGVYPWQuc2NhbGVZPWcqdC56b29tO3ZhciBlPWcqdC56b29tO2lmKGY9ITAsZTw9MSlyZXR1cm4gZj0hMSxlPTEseD1udWxsLGI9bnVsbCxtPW51bGwseT1udWxsLHZvaWQgZC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLFwiXCIpO2U+NC41JiYoZT00LjUpLGQuc3R5bGUudHJhbnNmb3JtPVwic2NhbGUzZChcIi5jb25jYXQoZSxcIiwgXCIpLmNvbmNhdChlLFwiLCAxKVwiKSxwPWV9LHByZXNzTW92ZTpmdW5jdGlvbih0KXtpZihmJiYhdil7dmFyIGU9Ti5wYWdlWC1MLnBhZ2VYLGk9Ti5wYWdlWS1MLnBhZ2VZO2ImJihlKz1iKSx4JiYoaSs9eCksbT1lLHk9aTt2YXIgbj1cInRyYW5zbGF0ZTNkKFwiLmNvbmNhdChlLFwicHgsIFwiKS5jb25jYXQoaSxcInB4LCAwKVwiKTtwJiYobis9XCIgc2NhbGUzZChcIi5jb25jYXQocCxcIiwgXCIpLmNvbmNhdChwLFwiLCAxKVwiKSksUihkLG4pfX0sc3dpcGU6ZnVuY3Rpb24oZSl7aWYoIWYpaWYodil2PSExO2Vsc2V7aWYoXCJMZWZ0XCI9PWUuZGlyZWN0aW9uKXtpZih0LmluZGV4PT10LmVsZW1lbnRzLmxlbmd0aC0xKXJldHVybiBaKGMpO3QubmV4dFNsaWRlKCl9aWYoXCJSaWdodFwiPT1lLmRpcmVjdGlvbil7aWYoMD09dC5pbmRleClyZXR1cm4gWihjKTt0LnByZXZTbGlkZSgpfX19fSkpO3RoaXMuZXZlbnRzLnRvdWNoPVh9ZnVuY3Rpb24gUih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJcIjtpZihcIlwiPT1lKXJldHVybiB0LnN0eWxlLndlYmtpdFRyYW5zZm9ybT1cIlwiLHQuc3R5bGUuTW96VHJhbnNmb3JtPVwiXCIsdC5zdHlsZS5tc1RyYW5zZm9ybT1cIlwiLHQuc3R5bGUuT1RyYW5zZm9ybT1cIlwiLHQuc3R5bGUudHJhbnNmb3JtPVwiXCIsITE7dC5zdHlsZS53ZWJraXRUcmFuc2Zvcm09ZSx0LnN0eWxlLk1velRyYW5zZm9ybT1lLHQuc3R5bGUubXNUcmFuc2Zvcm09ZSx0LnN0eWxlLk9UcmFuc2Zvcm09ZSx0LnN0eWxlLnRyYW5zZm9ybT1lfWZ1bmN0aW9uIFoodCl7dmFyIGU9Qyh0LFwiZ3NsaWRlLW1lZGlhXCIpP3Q6dC5xdWVyeVNlbGVjdG9yKFwiLmdzbGlkZS1tZWRpYVwiKSxpPXQucXVlcnlTZWxlY3RvcihcIi5nc2xpZGUtZGVzY3JpcHRpb25cIik7RShlLFwiZ3Jlc2V0XCIpLFIoZSxcInRyYW5zbGF0ZTNkKDAsIDAsIDApXCIpO2socCx7b25FbGVtZW50OmUsb25jZTohMCx3aXRoQ2FsbGJhY2s6ZnVuY3Rpb24odCxpKXtBKGUsXCJncmVzZXRcIil9fSk7ZS5zdHlsZS5vcGFjaXR5PVwiXCIsaSYmKGkuc3R5bGUub3BhY2l0eT1cIlwiKX1mdW5jdGlvbiAkKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTo1MCxpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl0sbj1pO2lmKCh0PXQudHJpbSgpKS5sZW5ndGg8PWUpcmV0dXJuIHQ7dmFyIHM9dC5zdWJzdHIoMCxlLTEpO3JldHVybiBuP3MrJy4uLiA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgY2xhc3M9XCJkZXNjLW1vcmVcIj4nK2krXCI8L2E+XCI6c31mdW5jdGlvbiBVKHQsZSl7dmFyIGk9dC5xdWVyeVNlbGVjdG9yKFwiLmRlc2MtbW9yZVwiKTtpZighaSlyZXR1cm4hMTtrKFwiY2xpY2tcIix7b25FbGVtZW50Omksd2l0aENhbGxiYWNrOmZ1bmN0aW9uKHQsaSl7dC5wcmV2ZW50RGVmYXVsdCgpO3ZhciBuPWRvY3VtZW50LmJvZHkscz1JKGksXCIuZ3NsaWRlLWRlc2NcIik7aWYoIXMpcmV0dXJuITE7cy5pbm5lckhUTUw9ZS5kZXNjcmlwdGlvbixFKG4sXCJnZGVzYy1vcGVuXCIpO3ZhciBvPWsoXCJjbGlja1wiLHtvbkVsZW1lbnQ6W24sSShzLFwiLmdzbGlkZS1kZXNjcmlwdGlvblwiKV0sd2l0aENhbGxiYWNrOmZ1bmN0aW9uKHQsaSl7XCJhXCIhPT10LnRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiYoQShuLFwiZ2Rlc2Mtb3BlblwiKSxFKG4sXCJnZGVzYy1jbG9zZWRcIikscy5pbm5lckhUTUw9ZS5zbWFsbERlc2NyaXB0aW9uLFUocyxlKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe0EobixcImdkZXNjLWNsb3NlZFwiKX0pLDQwMCksby5kZXN0cm95KCkpfX0pfX0pfXZhciBKPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtlKHRoaXMsdCksdGhpcy5zZXR0aW5ncz14KHksaSksdGhpcy5lZmZlY3RzQ2xhc3Nlcz10aGlzLmdldEFuaW1hdGlvbkNsYXNzZXMoKSx0aGlzLnNsaWRlc0RhdGE9e319cmV0dXJuIG4odCxbe2tleTpcImluaXRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5iYXNlRXZlbnRzPWsoXCJjbGlja1wiLHtvbkVsZW1lbnQ6dGhpcy5nZXRTZWxlY3RvcigpLHdpdGhDYWxsYmFjazpmdW5jdGlvbihlLGkpe2UucHJldmVudERlZmF1bHQoKSx0Lm9wZW4oaSl9fSksdGhpcy5lbGVtZW50cz10aGlzLmdldEVsZW1lbnRzKCl9fSx7a2V5Olwib3BlblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm51bGwsZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbDtpZigwPT10aGlzLmVsZW1lbnRzLmxlbmd0aClyZXR1cm4hMTt0aGlzLmFjdGl2ZVNsaWRlPW51bGwsdGhpcy5wcmV2QWN0aXZlU2xpZGVJbmRleD1udWxsLHRoaXMucHJldkFjdGl2ZVNsaWRlPW51bGw7dmFyIGk9dy5pc051bWJlcihlKT9lOnRoaXMuc2V0dGluZ3Muc3RhcnRBdDt3LmlzTm9kZSh0KSYmdy5pc05pbChpKSYmKGk9dGhpcy5nZXRFbGVtZW50SW5kZXgodCkpPDAmJihpPTApLHcuaXNOdW1iZXIoaSl8fChpPTApLHRoaXMuYnVpbGQoKSxMKHRoaXMub3ZlcmxheSxcIm5vbmVcIj09dGhpcy5zZXR0aW5ncy5vcGVuRWZmZWN0P1wibm9uZVwiOnRoaXMuc2V0dGluZ3MuY3NzRWZlY3RzLmZhZGUuaW4pO3ZhciBuPWRvY3VtZW50LmJvZHkscz13aW5kb3cuaW5uZXJXaWR0aC1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7aWYocz4wKXt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7by50eXBlPVwidGV4dC9jc3NcIixvLmNsYXNzTmFtZT1cImdjc3Mtc3R5bGVzXCIsby5pbm5lclRleHQ9XCIuZ3Njcm9sbGJhci1maXhlciB7bWFyZ2luLXJpZ2h0OiBcIi5jb25jYXQocyxcInB4fVwiKSxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG8pLEUobixcImdzY3JvbGxiYXItZml4ZXJcIil9aWYoRShuLFwiZ2xpZ2h0Ym94LW9wZW5cIiksRShnLFwiZ2xpZ2h0Ym94LW9wZW5cIiksZCYmKEUoZG9jdW1lbnQuYm9keSxcImdsaWdodGJveC1tb2JpbGVcIiksdGhpcy5zZXR0aW5ncy5zbGlkZUVmZmVjdD1cInNsaWRlXCIpLHRoaXMuc2hvd1NsaWRlKGksITApLDE9PXRoaXMuZWxlbWVudHMubGVuZ3RoPyhNKHRoaXMucHJldkJ1dHRvbiksTSh0aGlzLm5leHRCdXR0b24pKTooTyh0aGlzLnByZXZCdXR0b24pLE8odGhpcy5uZXh0QnV0dG9uKSksdGhpcy5saWdodGJveE9wZW49ITAsdy5pc0Z1bmN0aW9uKHRoaXMuc2V0dGluZ3Mub25PcGVuKSYmdGhpcy5zZXR0aW5ncy5vbk9wZW4oKSx1JiZ0aGlzLnNldHRpbmdzLnRvdWNoTmF2aWdhdGlvbilyZXR1cm4gRy5hcHBseSh0aGlzKSwhMTt0aGlzLnNldHRpbmdzLmtleWJvYXJkTmF2aWdhdGlvbiYmVi5hcHBseSh0aGlzKX19LHtrZXk6XCJvcGVuQXRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowO3RoaXMub3BlbihudWxsLHQpfX0se2tleTpcInNob3dTbGlkZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowLGk9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXTtPKHRoaXMubG9hZGVyKSx0aGlzLmluZGV4PXBhcnNlSW50KGUpO3ZhciBuPXRoaXMuc2xpZGVzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuY3VycmVudFwiKTtuJiZBKG4sXCJjdXJyZW50XCIpLHRoaXMuc2xpZGVBbmltYXRlT3V0KCk7dmFyIHM9dGhpcy5zbGlkZXNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5nc2xpZGVcIilbZV07aWYoQyhzLFwibG9hZGVkXCIpKXRoaXMuc2xpZGVBbmltYXRlSW4ocyxpKSxNKHRoaXMubG9hZGVyKTtlbHNle08odGhpcy5sb2FkZXIpO3ZhciBvPXRoaXMuZWxlbWVudHNbZV07by5pbmRleD1lLHRoaXMuc2xpZGVzRGF0YVtlXT1vLEIuYXBwbHkodGhpcyxbcyxvLGZ1bmN0aW9uKCl7TSh0LmxvYWRlciksdC5yZXNpemUoKSx0LnNsaWRlQW5pbWF0ZUluKHMsaSl9XSl9dGhpcy5zbGlkZURlc2NyaXB0aW9uPXMucXVlcnlTZWxlY3RvcihcIi5nc2xpZGUtZGVzY3JpcHRpb25cIiksdGhpcy5zbGlkZURlc2NyaXB0aW9uQ29udGFpbmVkPXRoaXMuc2xpZGVEZXNjcmlwdGlvbiYmQyh0aGlzLnNsaWRlRGVzY3JpcHRpb24ucGFyZW50Tm9kZSxcImdzbGlkZS1tZWRpYVwiKSx0aGlzLnByZWxvYWRTbGlkZShlKzEpLHRoaXMucHJlbG9hZFNsaWRlKGUtMSksdGhpcy51cGRhdGVOYXZpZ2F0aW9uQ2xhc3NlcygpLHRoaXMuYWN0aXZlU2xpZGU9c319LHtrZXk6XCJwcmVsb2FkU2xpZGVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKHQ8MHx8dD50aGlzLmVsZW1lbnRzLmxlbmd0aC0xKXJldHVybiExO2lmKHcuaXNOaWwodGhpcy5lbGVtZW50c1t0XSkpcmV0dXJuITE7dmFyIGk9dGhpcy5zbGlkZXNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5nc2xpZGVcIilbdF07aWYoQyhpLFwibG9hZGVkXCIpKXJldHVybiExO3ZhciBuPXRoaXMuZWxlbWVudHNbdF07bi5pbmRleD10LHRoaXMuc2xpZGVzRGF0YVt0XT1uO3ZhciBzPW4uc291cmNldHlwZTtcInZpZGVvXCI9PXN8fFwiZXh0ZXJuYWxcIj09cz9zZXRUaW1lb3V0KChmdW5jdGlvbigpe0IuYXBwbHkoZSxbaSxuXSl9KSwyMDApOkIuYXBwbHkodGhpcyxbaSxuXSl9fSx7a2V5OlwicHJldlNsaWRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmdvVG9TbGlkZSh0aGlzLmluZGV4LTEpfX0se2tleTpcIm5leHRTbGlkZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5nb1RvU2xpZGUodGhpcy5pbmRleCsxKX19LHtrZXk6XCJnb1RvU2xpZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07dGhpcy5wcmV2QWN0aXZlU2xpZGU9dGhpcy5hY3RpdmVTbGlkZSx0aGlzLnByZXZBY3RpdmVTbGlkZUluZGV4PXRoaXMuaW5kZXg7dmFyIGU9dGhpcy5sb29wKCk7aWYoIWUmJih0PDB8fHQ+dGhpcy5lbGVtZW50cy5sZW5ndGgtMSkpcmV0dXJuITE7dDwwP3Q9dGhpcy5lbGVtZW50cy5sZW5ndGgtMTp0Pj10aGlzLmVsZW1lbnRzLmxlbmd0aCYmKHQ9MCksdGhpcy5zaG93U2xpZGUodCl9fSx7a2V5OlwiaW5zZXJ0U2xpZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTotMSxpPXgoe2Rlc2NQb3NpdGlvbjp0aGlzLnNldHRpbmdzLmRlc2NQb3NpdGlvbn0sYiksbj1OKHRoaXMuc2V0dGluZ3Muc2xpZGVIdG1sKSxzPXRoaXMuZWxlbWVudHMubGVuZ3RoLTE7aWYoZTwwJiYoZT10aGlzLmVsZW1lbnRzLmxlbmd0aCksKHQ9eChpLHQpKS5pbmRleD1lLHQubm9kZT0hMSx0aGlzLmVsZW1lbnRzLnNwbGljZShlLDAsdCksdGhpcy5zbGlkZXNDb250YWluZXIpe2lmKGU+cyl0aGlzLnNsaWRlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChuKTtlbHNle3ZhciBvPXRoaXMuc2xpZGVzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ3NsaWRlXCIpW2VdO3RoaXMuc2xpZGVzQ29udGFpbmVyLmluc2VydEJlZm9yZShuLG8pfSgwPT10aGlzLmluZGV4JiYwPT1lfHx0aGlzLmluZGV4LTE9PWV8fHRoaXMuaW5kZXgrMT09ZSkmJnRoaXMucHJlbG9hZFNsaWRlKGUpLDA9PXRoaXMuaW5kZXgmJjA9PWUmJih0aGlzLmluZGV4PTEpLHRoaXMudXBkYXRlTmF2aWdhdGlvbkNsYXNzZXMoKX13LmlzRnVuY3Rpb24odGhpcy5zZXR0aW5ncy5zbGlkZUluc2VydGVkKSYmdGhpcy5zZXR0aW5ncy5zbGlkZUluc2VydGVkKHtpbmRleDplLHNsaWRlOnRoaXMuc2xpZGVzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ3NsaWRlXCIpW2VdLHBsYXllcjp0aGlzLmdldFNsaWRlUGxheWVySW5zdGFuY2UoZSl9KX19LHtrZXk6XCJyZW1vdmVTbGlkZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOi0xO2lmKHQ8MHx8dD50aGlzLmVsZW1lbnRzLmxlbmd0aC0xKXJldHVybiExO3ZhciBlPXRoaXMuc2xpZGVzQ29udGFpbmVyJiZ0aGlzLnNsaWRlc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLmdzbGlkZVwiKVt0XTtlJiYodGhpcy5nZXRBY3RpdmVTbGlkZUluZGV4KCk9PXQmJih0PT10aGlzLmVsZW1lbnRzLmxlbmd0aC0xP3RoaXMucHJldlNsaWRlKCk6dGhpcy5uZXh0U2xpZGUoKSksZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpKSx0aGlzLmVsZW1lbnRzLnNwbGljZSh0LDEpLHcuaXNGdW5jdGlvbih0aGlzLnNldHRpbmdzLnNsaWRlUmVtb3ZlZCkmJnRoaXMuc2V0dGluZ3Muc2xpZGVSZW1vdmVkKHQpfX0se2tleTpcInNsaWRlQW5pbWF0ZUluXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLG49dC5xdWVyeVNlbGVjdG9yKFwiLmdzbGlkZS1tZWRpYVwiKSxzPXQucXVlcnlTZWxlY3RvcihcIi5nc2xpZGUtZGVzY3JpcHRpb25cIiksbz17aW5kZXg6dGhpcy5wcmV2QWN0aXZlU2xpZGVJbmRleCxzbGlkZTp0aGlzLnByZXZBY3RpdmVTbGlkZSxwbGF5ZXI6dGhpcy5nZXRTbGlkZVBsYXllckluc3RhbmNlKHRoaXMucHJldkFjdGl2ZVNsaWRlSW5kZXgpfSxsPXtpbmRleDp0aGlzLmluZGV4LHNsaWRlOnRoaXMuYWN0aXZlU2xpZGUscGxheWVyOnRoaXMuZ2V0U2xpZGVQbGF5ZXJJbnN0YW5jZSh0aGlzLmluZGV4KX07aWYobi5vZmZzZXRXaWR0aD4wJiZzJiYoTShzKSxzLnN0eWxlLmRpc3BsYXk9XCJcIiksQSh0LHRoaXMuZWZmZWN0c0NsYXNzZXMpLGUpTCh0LHRoaXMuc2V0dGluZ3Mub3BlbkVmZmVjdCwoZnVuY3Rpb24oKXshZCYmaS5zZXR0aW5ncy5hdXRvcGxheVZpZGVvcyYmaS5wbGF5U2xpZGVWaWRlbyh0KSx3LmlzRnVuY3Rpb24oaS5zZXR0aW5ncy5hZnRlclNsaWRlQ2hhbmdlKSYmaS5zZXR0aW5ncy5hZnRlclNsaWRlQ2hhbmdlLmFwcGx5KGksW28sbF0pfSkpO2Vsc2V7dmFyIHI9dGhpcy5zZXR0aW5ncy5zbGlkZUVmZmVjdCxhPVwibm9uZVwiIT09cj90aGlzLnNldHRpbmdzLmNzc0VmZWN0c1tyXS5pbjpyO3RoaXMucHJldkFjdGl2ZVNsaWRlSW5kZXg+dGhpcy5pbmRleCYmXCJzbGlkZVwiPT10aGlzLnNldHRpbmdzLnNsaWRlRWZmZWN0JiYoYT10aGlzLnNldHRpbmdzLmNzc0VmZWN0cy5zbGlkZV9iYWNrLmluKSxMKHQsYSwoZnVuY3Rpb24oKXshZCYmaS5zZXR0aW5ncy5hdXRvcGxheVZpZGVvcyYmaS5wbGF5U2xpZGVWaWRlbyh0KSx3LmlzRnVuY3Rpb24oaS5zZXR0aW5ncy5hZnRlclNsaWRlQ2hhbmdlKSYmaS5zZXR0aW5ncy5hZnRlclNsaWRlQ2hhbmdlLmFwcGx5KGksW28sbF0pfSkpfXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7aS5yZXNpemUodCl9KSwxMDApLEUodCxcImN1cnJlbnRcIil9fSx7a2V5Olwic2xpZGVBbmltYXRlT3V0XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighdGhpcy5wcmV2QWN0aXZlU2xpZGUpcmV0dXJuITE7dmFyIHQ9dGhpcy5wcmV2QWN0aXZlU2xpZGU7QSh0LHRoaXMuZWZmZWN0c0NsYXNzZXMpLEUodCxcInByZXZcIik7dmFyIGU9dGhpcy5zZXR0aW5ncy5zbGlkZUVmZmVjdCxpPVwibm9uZVwiIT09ZT90aGlzLnNldHRpbmdzLmNzc0VmZWN0c1tlXS5vdXQ6ZTt0aGlzLnN0b3BTbGlkZVZpZGVvKHQpLHcuaXNGdW5jdGlvbih0aGlzLnNldHRpbmdzLmJlZm9yZVNsaWRlQ2hhbmdlKSYmdGhpcy5zZXR0aW5ncy5iZWZvcmVTbGlkZUNoYW5nZS5hcHBseSh0aGlzLFt7aW5kZXg6dGhpcy5wcmV2QWN0aXZlU2xpZGVJbmRleCxzbGlkZTp0aGlzLnByZXZBY3RpdmVTbGlkZSxwbGF5ZXI6dGhpcy5nZXRTbGlkZVBsYXllckluc3RhbmNlKHRoaXMucHJldkFjdGl2ZVNsaWRlSW5kZXgpfSx7aW5kZXg6dGhpcy5pbmRleCxzbGlkZTp0aGlzLmFjdGl2ZVNsaWRlLHBsYXllcjp0aGlzLmdldFNsaWRlUGxheWVySW5zdGFuY2UodGhpcy5pbmRleCl9XSksdGhpcy5wcmV2QWN0aXZlU2xpZGVJbmRleD50aGlzLmluZGV4JiZcInNsaWRlXCI9PXRoaXMuc2V0dGluZ3Muc2xpZGVFZmZlY3QmJihpPXRoaXMuc2V0dGluZ3MuY3NzRWZlY3RzLnNsaWRlX2JhY2sub3V0KSxMKHQsaSwoZnVuY3Rpb24oKXt2YXIgZT10LnF1ZXJ5U2VsZWN0b3IoXCIuZ3NsaWRlLW1lZGlhXCIpLGk9dC5xdWVyeVNlbGVjdG9yKFwiLmdzbGlkZS1kZXNjcmlwdGlvblwiKTtlLnN0eWxlLnRyYW5zZm9ybT1cIlwiLEEoZSxcImdyZXNldFwiKSxlLnN0eWxlLm9wYWNpdHk9XCJcIixpJiYoaS5zdHlsZS5vcGFjaXR5PVwiXCIpLEEodCxcInByZXZcIil9KSl9fSx7a2V5OlwiZ2V0QWxsUGxheWVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG19fSx7a2V5OlwiZ2V0U2xpZGVQbGF5ZXJJbnN0YW5jZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVwiZ3ZpZGVvXCIrdDtyZXR1cm4hKCF3LmhhcyhtLGUpfHwhbVtlXSkmJm1bZV19fSx7a2V5Olwic3RvcFNsaWRlVmlkZW9cIix2YWx1ZTpmdW5jdGlvbih0KXtpZih3LmlzTm9kZSh0KSl7dmFyIGU9dC5xdWVyeVNlbGVjdG9yKFwiLmd2aWRlby13cmFwcGVyXCIpO2UmJih0PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbmRleFwiKSl9dmFyIGk9dGhpcy5nZXRTbGlkZVBsYXllckluc3RhbmNlKHQpO2kmJmkucGxheWluZyYmaS5wYXVzZSgpfX0se2tleTpcInBsYXlTbGlkZVZpZGVvXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYody5pc05vZGUodCkpe3ZhciBlPXQucXVlcnlTZWxlY3RvcihcIi5ndmlkZW8td3JhcHBlclwiKTtlJiYodD1lLmdldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIikpfXZhciBpPXRoaXMuZ2V0U2xpZGVQbGF5ZXJJbnN0YW5jZSh0KTtpJiYhaS5wbGF5aW5nJiZpLnBsYXkoKX19LHtrZXk6XCJzZXRFbGVtZW50c1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5zZXR0aW5ncy5lbGVtZW50cz0hMTt2YXIgaT1bXTtTKHQsKGZ1bmN0aW9uKHQpe3ZhciBuPVgodCxlLnNldHRpbmdzKTtpLnB1c2gobil9KSksdGhpcy5lbGVtZW50cz1pLHRoaXMubGlnaHRib3hPcGVuJiYodGhpcy5zbGlkZXNDb250YWluZXIuaW5uZXJIVE1MPVwiXCIsUyh0aGlzLmVsZW1lbnRzLChmdW5jdGlvbigpe3ZhciB0PU4oZS5zZXR0aW5ncy5zbGlkZUh0bWwpO2Uuc2xpZGVzQ29udGFpbmVyLmFwcGVuZENoaWxkKHQpfSkpLHRoaXMuc2hvd1NsaWRlKDAsITApKX19LHtrZXk6XCJnZXRFbGVtZW50SW5kZXhcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT0hMTtyZXR1cm4gUyh0aGlzLmVsZW1lbnRzLChmdW5jdGlvbihpLG4pe2lmKHcuaGFzKGksXCJub2RlXCIpJiZpLm5vZGU9PXQpcmV0dXJuIGU9biwhMH0pKSxlfX0se2tleTpcImdldEVsZW1lbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm51bGwsaT1bXTt0aGlzLmVsZW1lbnRzPXRoaXMuZWxlbWVudHM/dGhpcy5lbGVtZW50czpbXSwhdy5pc05pbCh0aGlzLnNldHRpbmdzLmVsZW1lbnRzKSYmdy5pc0FycmF5KHRoaXMuc2V0dGluZ3MuZWxlbWVudHMpJiYoaT10aGlzLnNldHRpbmdzLmVsZW1lbnRzKTt2YXIgbj0hMSxzPXRoaXMuZ2V0U2VsZWN0b3IoKTtpZihudWxsIT09ZSl7dmFyIG89ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWdhbGxlcnlcIik7byYmXCJcIiE9PW8mJihuPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWdhbGxlcnk9XCInLmNvbmNhdChvLCdcIl0nKSkpfXJldHVybiAwPT1uJiZzJiYobj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuZ2V0U2VsZWN0b3IoKSkpLFMobj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKSwoZnVuY3Rpb24oZSxuKXt2YXIgcz1YKGUsdC5zZXR0aW5ncyk7cy5ub2RlPWUscy5pbmRleD1uLGkucHVzaChzKX0pKSxpfX0se2tleTpcImdldFNlbGVjdG9yXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cImRhdGEtXCI9PXRoaXMuc2V0dGluZ3Muc2VsZWN0b3Iuc3Vic3RyaW5nKDAsNSk/XCIqW1wiLmNvbmNhdCh0aGlzLnNldHRpbmdzLnNlbGVjdG9yLFwiXVwiKTp0aGlzLnNldHRpbmdzLnNlbGVjdG9yfX0se2tleTpcImdldEFjdGl2ZVNsaWRlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zbGlkZXNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5nc2xpZGVcIilbdGhpcy5pbmRleF19fSx7a2V5OlwiZ2V0QWN0aXZlU2xpZGVJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5kZXh9fSx7a2V5OlwiZ2V0QW5pbWF0aW9uQ2xhc3Nlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9W107Zm9yKHZhciBlIGluIHRoaXMuc2V0dGluZ3MuY3NzRWZlY3RzKWlmKHRoaXMuc2V0dGluZ3MuY3NzRWZlY3RzLmhhc093blByb3BlcnR5KGUpKXt2YXIgaT10aGlzLnNldHRpbmdzLmNzc0VmZWN0c1tlXTt0LnB1c2goXCJnXCIuY29uY2F0KGkuaW4pKSx0LnB1c2goXCJnXCIuY29uY2F0KGkub3V0KSl9cmV0dXJuIHQuam9pbihcIiBcIil9fSx7a2V5OlwiYnVpbGRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYodGhpcy5idWlsdClyZXR1cm4hMTt2YXIgZT13Lmhhcyh0aGlzLnNldHRpbmdzLnN2ZyxcIm5leHRcIik/dGhpcy5zZXR0aW5ncy5zdmcubmV4dDpcIlwiLGk9dy5oYXModGhpcy5zZXR0aW5ncy5zdmcsXCJwcmV2XCIpP3RoaXMuc2V0dGluZ3Muc3ZnLnByZXY6XCJcIixuPXcuaGFzKHRoaXMuc2V0dGluZ3Muc3ZnLFwiY2xvc2VcIik/dGhpcy5zZXR0aW5ncy5zdmcuY2xvc2U6XCJcIixzPXRoaXMuc2V0dGluZ3MubGlnaHRib3hIdG1sO3M9TihzPShzPShzPXMucmVwbGFjZSgve25leHRTVkd9L2csZSkpLnJlcGxhY2UoL3twcmV2U1ZHfS9nLGkpKS5yZXBsYWNlKC97Y2xvc2VTVkd9L2csbikpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocyk7dmFyIG89ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnbGlnaHRib3gtYm9keVwiKTt0aGlzLm1vZGFsPW87dmFyIGw9by5xdWVyeVNlbGVjdG9yKFwiLmdjbG9zZVwiKTt0aGlzLnByZXZCdXR0b249by5xdWVyeVNlbGVjdG9yKFwiLmdwcmV2XCIpLHRoaXMubmV4dEJ1dHRvbj1vLnF1ZXJ5U2VsZWN0b3IoXCIuZ25leHRcIiksdGhpcy5vdmVybGF5PW8ucXVlcnlTZWxlY3RvcihcIi5nb3ZlcmxheVwiKSx0aGlzLmxvYWRlcj1vLnF1ZXJ5U2VsZWN0b3IoXCIuZ2xvYWRlclwiKSx0aGlzLnNsaWRlc0NvbnRhaW5lcj1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdsaWdodGJveC1zbGlkZXJcIiksdGhpcy5ldmVudHM9e30sRSh0aGlzLm1vZGFsLFwiZ2xpZ2h0Ym94LVwiK3RoaXMuc2V0dGluZ3Muc2tpbiksdGhpcy5zZXR0aW5ncy5jbG9zZUJ1dHRvbiYmbCYmKHRoaXMuZXZlbnRzLmNsb3NlPWsoXCJjbGlja1wiLHtvbkVsZW1lbnQ6bCx3aXRoQ2FsbGJhY2s6ZnVuY3Rpb24oZSxpKXtlLnByZXZlbnREZWZhdWx0KCksdC5jbG9zZSgpfX0pKSxsJiYhdGhpcy5zZXR0aW5ncy5jbG9zZUJ1dHRvbiYmbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGwpLHRoaXMubmV4dEJ1dHRvbiYmKHRoaXMuZXZlbnRzLm5leHQ9ayhcImNsaWNrXCIse29uRWxlbWVudDp0aGlzLm5leHRCdXR0b24sd2l0aENhbGxiYWNrOmZ1bmN0aW9uKGUsaSl7ZS5wcmV2ZW50RGVmYXVsdCgpLHQubmV4dFNsaWRlKCl9fSkpLHRoaXMucHJldkJ1dHRvbiYmKHRoaXMuZXZlbnRzLnByZXY9ayhcImNsaWNrXCIse29uRWxlbWVudDp0aGlzLnByZXZCdXR0b24sd2l0aENhbGxiYWNrOmZ1bmN0aW9uKGUsaSl7ZS5wcmV2ZW50RGVmYXVsdCgpLHQucHJldlNsaWRlKCl9fSkpLHRoaXMuc2V0dGluZ3MuY2xvc2VPbk91dHNpZGVDbGljayYmKHRoaXMuZXZlbnRzLm91dENsb3NlPWsoXCJjbGlja1wiLHtvbkVsZW1lbnQ6byx3aXRoQ2FsbGJhY2s6ZnVuY3Rpb24oZSxpKXtDKGRvY3VtZW50LmJvZHksXCJnbGlnaHRib3gtbW9iaWxlXCIpfHxJKGUudGFyZ2V0LFwiLmdpbm5lci1jb250YWluZXJcIil8fEkoZS50YXJnZXQsXCIuZ2J0blwiKXx8QyhlLnRhcmdldCxcImduZXh0XCIpfHxDKGUudGFyZ2V0LFwiZ3ByZXZcIil8fHQuY2xvc2UoKX19KSksUyh0aGlzLmVsZW1lbnRzLChmdW5jdGlvbigpe3ZhciBlPU4odC5zZXR0aW5ncy5zbGlkZUh0bWwpO3Quc2xpZGVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGUpfSkpLHUmJkUoZG9jdW1lbnQuYm9keSxcImdsaWdodGJveC10b3VjaFwiKSx0aGlzLmV2ZW50cy5yZXNpemU9ayhcInJlc2l6ZVwiLHtvbkVsZW1lbnQ6d2luZG93LHdpdGhDYWxsYmFjazpmdW5jdGlvbigpe3QucmVzaXplKCl9fSksdGhpcy5idWlsdD0hMH19LHtrZXk6XCJyZXNpemVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpudWxsO2lmKCh0PXR8fHRoaXMuYWN0aXZlU2xpZGUpJiYhQyh0LFwiem9vbWVkXCIpKXt2YXIgZT1xKCksaT10LnF1ZXJ5U2VsZWN0b3IoXCIuZ3ZpZGVvLXdyYXBwZXJcIiksbj10LnF1ZXJ5U2VsZWN0b3IoXCIuZ3NsaWRlLWltYWdlXCIpLHM9dGhpcy5zbGlkZURlc2NyaXB0aW9uLG89ZS53aWR0aCxsPWUuaGVpZ2h0O2lmKG88PTc2OD9FKGRvY3VtZW50LmJvZHksXCJnbGlnaHRib3gtbW9iaWxlXCIpOkEoZG9jdW1lbnQuYm9keSxcImdsaWdodGJveC1tb2JpbGVcIiksaXx8bil7dmFyIHI9ITE7aWYocyYmKEMocyxcImRlc2NyaXB0aW9uLWJvdHRvbVwiKXx8QyhzLFwiZGVzY3JpcHRpb24tdG9wXCIpKSYmIUMocyxcImdhYnNvbHV0ZVwiKSYmKHI9ITApLG4paWYobzw9NzY4KXt2YXIgYT1uLnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7YS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLFwiXCIpfWVsc2UgaWYocil7dmFyIGg9cy5vZmZzZXRIZWlnaHQsYz10aGlzLnNsaWRlc0RhdGFbdGhpcy5pbmRleF0ud2lkdGg7Yz1jPD1vP2MrXCJweFwiOlwiMTAwJVwiO3ZhciBkPW4ucXVlcnlTZWxlY3RvcihcImltZ1wiKTtkLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsXCJtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoIC0gXCIuY29uY2F0KGgsXCJweClcIikpLHMuc2V0QXR0cmlidXRlKFwic3R5bGVcIixcIm1heC13aWR0aDogXCIuY29uY2F0KGQub2Zmc2V0V2lkdGgsXCJweDtcIikpfWlmKGkpe3ZhciB1PXcuaGFzKHRoaXMuc2V0dGluZ3MucGx5ci5jb25maWcsXCJyYXRpb1wiKT90aGlzLnNldHRpbmdzLnBseXIuY29uZmlnLnJhdGlvOlwiMTY6OVwiLGc9dS5zcGxpdChcIjpcIikscD10aGlzLnNsaWRlc0RhdGFbdGhpcy5pbmRleF0ud2lkdGgsdj1wLyhwYXJzZUludChnWzBdKS9wYXJzZUludChnWzFdKSk7aWYodj1NYXRoLmZsb29yKHYpLHImJihsLT1zLm9mZnNldEhlaWdodCksbDx2JiZvPnApe3ZhciBmPWkub2Zmc2V0V2lkdGgsbT1pLm9mZnNldEhlaWdodCx5PWwvbSxiPXt3aWR0aDpmKnksaGVpZ2h0Om0qeX07aS5wYXJlbnROb2RlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsXCJtYXgtd2lkdGg6IFwiLmNvbmNhdChiLndpZHRoLFwicHhcIikpLHImJnMuc2V0QXR0cmlidXRlKFwic3R5bGVcIixcIm1heC13aWR0aDogXCIuY29uY2F0KGIud2lkdGgsXCJweDtcIikpfWVsc2UgaS5wYXJlbnROb2RlLnN0eWxlLm1heFdpZHRoPVwiXCIuY29uY2F0KHAsXCJweFwiKSxyJiZzLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsXCJtYXgtd2lkdGg6IFwiLmNvbmNhdChwLFwicHg7XCIpKX19fX19LHtrZXk6XCJyZWxvYWRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaW5pdCgpfX0se2tleTpcInVwZGF0ZU5hdmlnYXRpb25DbGFzc2VzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxvb3AoKTtBKHRoaXMubmV4dEJ1dHRvbixcImRpc2FibGVkXCIpLEEodGhpcy5wcmV2QnV0dG9uLFwiZGlzYWJsZWRcIiksMD09dGhpcy5pbmRleCYmdGhpcy5lbGVtZW50cy5sZW5ndGgtMT09MD8oRSh0aGlzLnByZXZCdXR0b24sXCJkaXNhYmxlZFwiKSxFKHRoaXMubmV4dEJ1dHRvbixcImRpc2FibGVkXCIpKTowIT09dGhpcy5pbmRleHx8dD90aGlzLmluZGV4IT09dGhpcy5lbGVtZW50cy5sZW5ndGgtMXx8dHx8RSh0aGlzLm5leHRCdXR0b24sXCJkaXNhYmxlZFwiKTpFKHRoaXMucHJldkJ1dHRvbixcImRpc2FibGVkXCIpfX0se2tleTpcImxvb3BcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXcuaGFzKHRoaXMuc2V0dGluZ3MsXCJsb29wQXRFbmRcIik/dGhpcy5zZXR0aW5ncy5sb29wQXRFbmQ6bnVsbDtyZXR1cm4gdD13Lmhhcyh0aGlzLnNldHRpbmdzLFwibG9vcFwiKT90aGlzLnNldHRpbmdzLmxvb3A6dCx0fX0se2tleTpcImNsb3NlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCF0aGlzLmxpZ2h0Ym94T3Blbil7aWYodGhpcy5ldmVudHMpe2Zvcih2YXIgZSBpbiB0aGlzLmV2ZW50cyl0aGlzLmV2ZW50cy5oYXNPd25Qcm9wZXJ0eShlKSYmdGhpcy5ldmVudHNbZV0uZGVzdHJveSgpO3RoaXMuZXZlbnRzPW51bGx9cmV0dXJuITF9aWYodGhpcy5jbG9zaW5nKXJldHVybiExO3RoaXMuY2xvc2luZz0hMCx0aGlzLnN0b3BTbGlkZVZpZGVvKHRoaXMuYWN0aXZlU2xpZGUpLEUodGhpcy5tb2RhbCxcImdsaWdodGJveC1jbG9zaW5nXCIpLEwodGhpcy5vdmVybGF5LFwibm9uZVwiPT10aGlzLnNldHRpbmdzLm9wZW5FZmZlY3Q/XCJub25lXCI6dGhpcy5zZXR0aW5ncy5jc3NFZmVjdHMuZmFkZS5vdXQpLEwodGhpcy5hY3RpdmVTbGlkZSx0aGlzLnNldHRpbmdzLmNsb3NlRWZmZWN0LChmdW5jdGlvbigpe2lmKHQuYWN0aXZlU2xpZGU9bnVsbCx0LnByZXZBY3RpdmVTbGlkZUluZGV4PW51bGwsdC5wcmV2QWN0aXZlU2xpZGU9bnVsbCx0LmJ1aWx0PSExLHQuZXZlbnRzKXtmb3IodmFyIGUgaW4gdC5ldmVudHMpdC5ldmVudHMuaGFzT3duUHJvcGVydHkoZSkmJnQuZXZlbnRzW2VdLmRlc3Ryb3koKTt0LmV2ZW50cz1udWxsfXZhciBpPWRvY3VtZW50LmJvZHk7QShnLFwiZ2xpZ2h0Ym94LW9wZW5cIiksQShpLFwiZ2xpZ2h0Ym94LW9wZW4gdG91Y2hpbmcgZ2Rlc2Mtb3BlbiBnbGlnaHRib3gtdG91Y2ggZ2xpZ2h0Ym94LW1vYmlsZSBnc2Nyb2xsYmFyLWZpeGVyXCIpLHQubW9kYWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0Lm1vZGFsKSx3LmlzRnVuY3Rpb24odC5zZXR0aW5ncy5vbkNsb3NlKSYmdC5zZXR0aW5ncy5vbkNsb3NlKCk7dmFyIG49ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5nY3NzLXN0eWxlc1wiKTtuJiZuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobiksdC5saWdodGJveE9wZW49ITEsdC5jbG9zaW5nPW51bGx9KSl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jbG9zZSgpLHRoaXMuYmFzZUV2ZW50cy5kZXN0cm95KCl9fV0pLHR9KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LGU9bmV3IEoodCk7cmV0dXJuIGUuaW5pdCgpLGV9fSkpOyIsIi8qIVxyXG4gKiBpbWFnZXNMb2FkZWQgUEFDS0FHRUQgdjQuMS40XHJcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXHJcbiAqIE1JVCBMaWNlbnNlXHJcbiAqL1xyXG5cclxuIWZ1bmN0aW9uKGUsdCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImV2LWVtaXR0ZXIvZXYtZW1pdHRlclwiLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPXQoKTplLkV2RW1pdHRlcj10KCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lm9uPWZ1bmN0aW9uKGUsdCl7aWYoZSYmdCl7dmFyIGk9dGhpcy5fZXZlbnRzPXRoaXMuX2V2ZW50c3x8e30sbj1pW2VdPWlbZV18fFtdO3JldHVybiBuLmluZGV4T2YodCk9PS0xJiZuLnB1c2godCksdGhpc319LHQub25jZT1mdW5jdGlvbihlLHQpe2lmKGUmJnQpe3RoaXMub24oZSx0KTt2YXIgaT10aGlzLl9vbmNlRXZlbnRzPXRoaXMuX29uY2VFdmVudHN8fHt9LG49aVtlXT1pW2VdfHx7fTtyZXR1cm4gblt0XT0hMCx0aGlzfX0sdC5vZmY9ZnVuY3Rpb24oZSx0KXt2YXIgaT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50c1tlXTtpZihpJiZpLmxlbmd0aCl7dmFyIG49aS5pbmRleE9mKHQpO3JldHVybiBuIT0tMSYmaS5zcGxpY2UobiwxKSx0aGlzfX0sdC5lbWl0RXZlbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgaT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50c1tlXTtpZihpJiZpLmxlbmd0aCl7aT1pLnNsaWNlKDApLHQ9dHx8W107Zm9yKHZhciBuPXRoaXMuX29uY2VFdmVudHMmJnRoaXMuX29uY2VFdmVudHNbZV0sbz0wO288aS5sZW5ndGg7bysrKXt2YXIgcj1pW29dLHM9biYmbltyXTtzJiYodGhpcy5vZmYoZSxyKSxkZWxldGUgbltyXSksci5hcHBseSh0aGlzLHQpfXJldHVybiB0aGlzfX0sdC5hbGxPZmY9ZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5fZXZlbnRzLGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzfSxlfSksZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV2LWVtaXR0ZXIvZXYtZW1pdHRlclwiXSxmdW5jdGlvbihpKXtyZXR1cm4gdChlLGkpfSk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9dChlLHJlcXVpcmUoXCJldi1lbWl0dGVyXCIpKTplLmltYWdlc0xvYWRlZD10KGUsZS5FdkVtaXR0ZXIpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gaShlLHQpe2Zvcih2YXIgaSBpbiB0KWVbaV09dFtpXTtyZXR1cm4gZX1mdW5jdGlvbiBuKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGU7dmFyIHQ9XCJvYmplY3RcIj09dHlwZW9mIGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aDtyZXR1cm4gdD9kLmNhbGwoZSk6W2VdfWZ1bmN0aW9uIG8oZSx0LHIpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG8pKXJldHVybiBuZXcgbyhlLHQscik7dmFyIHM9ZTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKHM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlKSkscz8odGhpcy5lbGVtZW50cz1uKHMpLHRoaXMub3B0aW9ucz1pKHt9LHRoaXMub3B0aW9ucyksXCJmdW5jdGlvblwiPT10eXBlb2YgdD9yPXQ6aSh0aGlzLm9wdGlvbnMsdCksciYmdGhpcy5vbihcImFsd2F5c1wiLHIpLHRoaXMuZ2V0SW1hZ2VzKCksaCYmKHRoaXMuanFEZWZlcnJlZD1uZXcgaC5EZWZlcnJlZCksdm9pZCBzZXRUaW1lb3V0KHRoaXMuY2hlY2suYmluZCh0aGlzKSkpOnZvaWQgYS5lcnJvcihcIkJhZCBlbGVtZW50IGZvciBpbWFnZXNMb2FkZWQgXCIrKHN8fGUpKX1mdW5jdGlvbiByKGUpe3RoaXMuaW1nPWV9ZnVuY3Rpb24gcyhlLHQpe3RoaXMudXJsPWUsdGhpcy5lbGVtZW50PXQsdGhpcy5pbWc9bmV3IEltYWdlfXZhciBoPWUualF1ZXJ5LGE9ZS5jb25zb2xlLGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlO28ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLG8ucHJvdG90eXBlLm9wdGlvbnM9e30sby5wcm90b3R5cGUuZ2V0SW1hZ2VzPWZ1bmN0aW9uKCl7dGhpcy5pbWFnZXM9W10sdGhpcy5lbGVtZW50cy5mb3JFYWNoKHRoaXMuYWRkRWxlbWVudEltYWdlcyx0aGlzKX0sby5wcm90b3R5cGUuYWRkRWxlbWVudEltYWdlcz1mdW5jdGlvbihlKXtcIklNR1wiPT1lLm5vZGVOYW1lJiZ0aGlzLmFkZEltYWdlKGUpLHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kPT09ITAmJnRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoZSk7dmFyIHQ9ZS5ub2RlVHlwZTtpZih0JiZ1W3RdKXtmb3IodmFyIGk9ZS5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nXCIpLG49MDtuPGkubGVuZ3RoO24rKyl7dmFyIG89aVtuXTt0aGlzLmFkZEltYWdlKG8pfWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCl7dmFyIHI9ZS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kKTtmb3Iobj0wO248ci5sZW5ndGg7bisrKXt2YXIgcz1yW25dO3RoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMocyl9fX19O3ZhciB1PXsxOiEwLDk6ITAsMTE6ITB9O3JldHVybiBvLnByb3RvdHlwZS5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcz1mdW5jdGlvbihlKXt2YXIgdD1nZXRDb21wdXRlZFN0eWxlKGUpO2lmKHQpZm9yKHZhciBpPS91cmxcXCgoWydcIl0pPyguKj8pXFwxXFwpL2dpLG49aS5leGVjKHQuYmFja2dyb3VuZEltYWdlKTtudWxsIT09bjspe3ZhciBvPW4mJm5bMl07byYmdGhpcy5hZGRCYWNrZ3JvdW5kKG8sZSksbj1pLmV4ZWModC5iYWNrZ3JvdW5kSW1hZ2UpfX0sby5wcm90b3R5cGUuYWRkSW1hZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHIoZSk7dGhpcy5pbWFnZXMucHVzaCh0KX0sby5wcm90b3R5cGUuYWRkQmFja2dyb3VuZD1mdW5jdGlvbihlLHQpe3ZhciBpPW5ldyBzKGUsdCk7dGhpcy5pbWFnZXMucHVzaChpKX0sby5wcm90b3R5cGUuY2hlY2s9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsaSxuKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5wcm9ncmVzcyhlLGksbil9KX12YXIgdD10aGlzO3JldHVybiB0aGlzLnByb2dyZXNzZWRDb3VudD0wLHRoaXMuaGFzQW55QnJva2VuPSExLHRoaXMuaW1hZ2VzLmxlbmd0aD92b2lkIHRoaXMuaW1hZ2VzLmZvckVhY2goZnVuY3Rpb24odCl7dC5vbmNlKFwicHJvZ3Jlc3NcIixlKSx0LmNoZWNrKCl9KTp2b2lkIHRoaXMuY29tcGxldGUoKX0sby5wcm90b3R5cGUucHJvZ3Jlc3M9ZnVuY3Rpb24oZSx0LGkpe3RoaXMucHJvZ3Jlc3NlZENvdW50KyssdGhpcy5oYXNBbnlCcm9rZW49dGhpcy5oYXNBbnlCcm9rZW58fCFlLmlzTG9hZGVkLHRoaXMuZW1pdEV2ZW50KFwicHJvZ3Jlc3NcIixbdGhpcyxlLHRdKSx0aGlzLmpxRGVmZXJyZWQmJnRoaXMuanFEZWZlcnJlZC5ub3RpZnkmJnRoaXMuanFEZWZlcnJlZC5ub3RpZnkodGhpcyxlKSx0aGlzLnByb2dyZXNzZWRDb3VudD09dGhpcy5pbWFnZXMubGVuZ3RoJiZ0aGlzLmNvbXBsZXRlKCksdGhpcy5vcHRpb25zLmRlYnVnJiZhJiZhLmxvZyhcInByb2dyZXNzOiBcIitpLGUsdCl9LG8ucHJvdG90eXBlLmNvbXBsZXRlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5oYXNBbnlCcm9rZW4/XCJmYWlsXCI6XCJkb25lXCI7aWYodGhpcy5pc0NvbXBsZXRlPSEwLHRoaXMuZW1pdEV2ZW50KGUsW3RoaXNdKSx0aGlzLmVtaXRFdmVudChcImFsd2F5c1wiLFt0aGlzXSksdGhpcy5qcURlZmVycmVkKXt2YXIgdD10aGlzLmhhc0FueUJyb2tlbj9cInJlamVjdFwiOlwicmVzb2x2ZVwiO3RoaXMuanFEZWZlcnJlZFt0XSh0aGlzKX19LHIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLHIucHJvdG90eXBlLmNoZWNrPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtyZXR1cm4gZT92b2lkIHRoaXMuY29uZmlybSgwIT09dGhpcy5pbWcubmF0dXJhbFdpZHRoLFwibmF0dXJhbFdpZHRoXCIpOih0aGlzLnByb3h5SW1hZ2U9bmV3IEltYWdlLHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpLHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIix0aGlzKSx0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpLHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpLHZvaWQodGhpcy5wcm94eUltYWdlLnNyYz10aGlzLmltZy5zcmMpKX0sci5wcm90b3R5cGUuZ2V0SXNJbWFnZUNvbXBsZXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW1nLmNvbXBsZXRlJiZ0aGlzLmltZy5uYXR1cmFsV2lkdGh9LHIucHJvdG90eXBlLmNvbmZpcm09ZnVuY3Rpb24oZSx0KXt0aGlzLmlzTG9hZGVkPWUsdGhpcy5lbWl0RXZlbnQoXCJwcm9ncmVzc1wiLFt0aGlzLHRoaXMuaW1nLHRdKX0sci5wcm90b3R5cGUuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJvblwiK2UudHlwZTt0aGlzW3RdJiZ0aGlzW3RdKGUpfSxyLnByb3RvdHlwZS5vbmxvYWQ9ZnVuY3Rpb24oKXt0aGlzLmNvbmZpcm0oITAsXCJvbmxvYWRcIiksdGhpcy51bmJpbmRFdmVudHMoKX0sci5wcm90b3R5cGUub25lcnJvcj1mdW5jdGlvbigpe3RoaXMuY29uZmlybSghMSxcIm9uZXJyb3JcIiksdGhpcy51bmJpbmRFdmVudHMoKX0sci5wcm90b3R5cGUudW5iaW5kRXZlbnRzPWZ1bmN0aW9uKCl7dGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcyksdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpLHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcyksdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsdGhpcyl9LHMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoci5wcm90b3R5cGUpLHMucHJvdG90eXBlLmNoZWNrPWZ1bmN0aW9uKCl7dGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIix0aGlzKSx0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIix0aGlzKSx0aGlzLmltZy5zcmM9dGhpcy51cmw7dmFyIGU9dGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtlJiYodGhpcy5jb25maXJtKDAhPT10aGlzLmltZy5uYXR1cmFsV2lkdGgsXCJuYXR1cmFsV2lkdGhcIiksdGhpcy51bmJpbmRFdmVudHMoKSl9LHMucHJvdG90eXBlLnVuYmluZEV2ZW50cz1mdW5jdGlvbigpe3RoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcyksdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsdGhpcyl9LHMucHJvdG90eXBlLmNvbmZpcm09ZnVuY3Rpb24oZSx0KXt0aGlzLmlzTG9hZGVkPWUsdGhpcy5lbWl0RXZlbnQoXCJwcm9ncmVzc1wiLFt0aGlzLHRoaXMuZWxlbWVudCx0XSl9LG8ubWFrZUpRdWVyeVBsdWdpbj1mdW5jdGlvbih0KXt0PXR8fGUualF1ZXJ5LHQmJihoPXQsaC5mbi5pbWFnZXNMb2FkZWQ9ZnVuY3Rpb24oZSx0KXt2YXIgaT1uZXcgbyh0aGlzLGUsdCk7cmV0dXJuIGkuanFEZWZlcnJlZC5wcm9taXNlKGgodGhpcykpfSl9LG8ubWFrZUpRdWVyeVBsdWdpbigpLG99KTsiLCIvKiFcclxuICogSXNvdG9wZSBQQUNLQUdFRCB2My4wLjZcclxuICpcclxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxyXG4gKiBvciBJc290b3BlIENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcclxuICpcclxuICogaHR0cHM6Ly9pc290b3BlLm1ldGFmaXp6eS5jb1xyXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDE4IE1ldGFmaXp6eVxyXG4gKi9cclxuXHJcbiFmdW5jdGlvbiAodCwgZSkgeyBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFwianF1ZXJ5LWJyaWRnZXQvanF1ZXJ5LWJyaWRnZXRcIiwgW1wianF1ZXJ5XCJdLCBmdW5jdGlvbiAoaSkgeyByZXR1cm4gZSh0LCBpKSB9KSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzID0gZSh0LCByZXF1aXJlKFwianF1ZXJ5XCIpKSA6IHQualF1ZXJ5QnJpZGdldCA9IGUodCwgdC5qUXVlcnkpIH0od2luZG93LCBmdW5jdGlvbiAodCwgZSkgeyBcInVzZSBzdHJpY3RcIjsgZnVuY3Rpb24gaShpLCBzLCBhKSB7IGZ1bmN0aW9uIHUodCwgZSwgbykgeyB2YXIgbiwgcyA9IFwiJCgpLlwiICsgaSArICcoXCInICsgZSArICdcIiknOyByZXR1cm4gdC5lYWNoKGZ1bmN0aW9uICh0LCB1KSB7IHZhciBoID0gYS5kYXRhKHUsIGkpOyBpZiAoIWgpIHJldHVybiB2b2lkIHIoaSArIFwiIG5vdCBpbml0aWFsaXplZC4gQ2Fubm90IGNhbGwgbWV0aG9kcywgaS5lLiBcIiArIHMpOyB2YXIgZCA9IGhbZV07IGlmICghZCB8fCBcIl9cIiA9PSBlLmNoYXJBdCgwKSkgcmV0dXJuIHZvaWQgcihzICsgXCIgaXMgbm90IGEgdmFsaWQgbWV0aG9kXCIpOyB2YXIgbCA9IGQuYXBwbHkoaCwgbyk7IG4gPSB2b2lkIDAgPT09IG4gPyBsIDogbiB9KSwgdm9pZCAwICE9PSBuID8gbiA6IHQgfSBmdW5jdGlvbiBoKHQsIGUpIHsgdC5lYWNoKGZ1bmN0aW9uICh0LCBvKSB7IHZhciBuID0gYS5kYXRhKG8sIGkpOyBuID8gKG4ub3B0aW9uKGUpLCBuLl9pbml0KCkpIDogKG4gPSBuZXcgcyhvLCBlKSwgYS5kYXRhKG8sIGksIG4pKSB9KSB9IGEgPSBhIHx8IGUgfHwgdC5qUXVlcnksIGEgJiYgKHMucHJvdG90eXBlLm9wdGlvbiB8fCAocy5wcm90b3R5cGUub3B0aW9uID0gZnVuY3Rpb24gKHQpIHsgYS5pc1BsYWluT2JqZWN0KHQpICYmICh0aGlzLm9wdGlvbnMgPSBhLmV4dGVuZCghMCwgdGhpcy5vcHRpb25zLCB0KSkgfSksIGEuZm5baV0gPSBmdW5jdGlvbiAodCkgeyBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkgeyB2YXIgZSA9IG4uY2FsbChhcmd1bWVudHMsIDEpOyByZXR1cm4gdSh0aGlzLCB0LCBlKSB9IHJldHVybiBoKHRoaXMsIHQpLCB0aGlzIH0sIG8oYSkpIH0gZnVuY3Rpb24gbyh0KSB7ICF0IHx8IHQgJiYgdC5icmlkZ2V0IHx8ICh0LmJyaWRnZXQgPSBpKSB9IHZhciBuID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLCBzID0gdC5jb25zb2xlLCByID0gXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgcyA/IGZ1bmN0aW9uICgpIHsgfSA6IGZ1bmN0aW9uICh0KSB7IHMuZXJyb3IodCkgfTsgcmV0dXJuIG8oZSB8fCB0LmpRdWVyeSksIGkgfSksIGZ1bmN0aW9uICh0LCBlKSB7IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoXCJldi1lbWl0dGVyL2V2LWVtaXR0ZXJcIiwgZSkgOiBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMgPyBtb2R1bGUuZXhwb3J0cyA9IGUoKSA6IHQuRXZFbWl0dGVyID0gZSgpIH0oXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiB0KCkgeyB9IHZhciBlID0gdC5wcm90b3R5cGU7IHJldHVybiBlLm9uID0gZnVuY3Rpb24gKHQsIGUpIHsgaWYgKHQgJiYgZSkgeyB2YXIgaSA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fSwgbyA9IGlbdF0gPSBpW3RdIHx8IFtdOyByZXR1cm4gby5pbmRleE9mKGUpID09IC0xICYmIG8ucHVzaChlKSwgdGhpcyB9IH0sIGUub25jZSA9IGZ1bmN0aW9uICh0LCBlKSB7IGlmICh0ICYmIGUpIHsgdGhpcy5vbih0LCBlKTsgdmFyIGkgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fSwgbyA9IGlbdF0gPSBpW3RdIHx8IHt9OyByZXR1cm4gb1tlXSA9ICEwLCB0aGlzIH0gfSwgZS5vZmYgPSBmdW5jdGlvbiAodCwgZSkgeyB2YXIgaSA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbdF07IGlmIChpICYmIGkubGVuZ3RoKSB7IHZhciBvID0gaS5pbmRleE9mKGUpOyByZXR1cm4gbyAhPSAtMSAmJiBpLnNwbGljZShvLCAxKSwgdGhpcyB9IH0sIGUuZW1pdEV2ZW50ID0gZnVuY3Rpb24gKHQsIGUpIHsgdmFyIGkgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzW3RdOyBpZiAoaSAmJiBpLmxlbmd0aCkgeyBpID0gaS5zbGljZSgwKSwgZSA9IGUgfHwgW107IGZvciAodmFyIG8gPSB0aGlzLl9vbmNlRXZlbnRzICYmIHRoaXMuX29uY2VFdmVudHNbdF0sIG4gPSAwOyBuIDwgaS5sZW5ndGg7IG4rKykgeyB2YXIgcyA9IGlbbl0sIHIgPSBvICYmIG9bc107IHIgJiYgKHRoaXMub2ZmKHQsIHMpLCBkZWxldGUgb1tzXSksIHMuYXBwbHkodGhpcywgZSkgfSByZXR1cm4gdGhpcyB9IH0sIGUuYWxsT2ZmID0gZnVuY3Rpb24gKCkgeyBkZWxldGUgdGhpcy5fZXZlbnRzLCBkZWxldGUgdGhpcy5fb25jZUV2ZW50cyB9LCB0IH0pLCBmdW5jdGlvbiAodCwgZSkgeyBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFwiZ2V0LXNpemUvZ2V0LXNpemVcIiwgZSkgOiBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMgPyBtb2R1bGUuZXhwb3J0cyA9IGUoKSA6IHQuZ2V0U2l6ZSA9IGUoKSB9KHdpbmRvdywgZnVuY3Rpb24gKCkgeyBcInVzZSBzdHJpY3RcIjsgZnVuY3Rpb24gdCh0KSB7IHZhciBlID0gcGFyc2VGbG9hdCh0KSwgaSA9IHQuaW5kZXhPZihcIiVcIikgPT0gLTEgJiYgIWlzTmFOKGUpOyByZXR1cm4gaSAmJiBlIH0gZnVuY3Rpb24gZSgpIHsgfSBmdW5jdGlvbiBpKCkgeyBmb3IgKHZhciB0ID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwLCBpbm5lcldpZHRoOiAwLCBpbm5lckhlaWdodDogMCwgb3V0ZXJXaWR0aDogMCwgb3V0ZXJIZWlnaHQ6IDAgfSwgZSA9IDA7IGUgPCBoOyBlKyspIHsgdmFyIGkgPSB1W2VdOyB0W2ldID0gMCB9IHJldHVybiB0IH0gZnVuY3Rpb24gbyh0KSB7IHZhciBlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0KTsgcmV0dXJuIGUgfHwgYShcIlN0eWxlIHJldHVybmVkIFwiICsgZSArIFwiLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyBTZWUgaHR0cHM6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzFcIiksIGUgfSBmdW5jdGlvbiBuKCkgeyBpZiAoIWQpIHsgZCA9ICEwOyB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7IGUuc3R5bGUud2lkdGggPSBcIjIwMHB4XCIsIGUuc3R5bGUucGFkZGluZyA9IFwiMXB4IDJweCAzcHggNHB4XCIsIGUuc3R5bGUuYm9yZGVyU3R5bGUgPSBcInNvbGlkXCIsIGUuc3R5bGUuYm9yZGVyV2lkdGggPSBcIjFweCAycHggM3B4IDRweFwiLCBlLnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiOyB2YXIgaSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyBpLmFwcGVuZENoaWxkKGUpOyB2YXIgbiA9IG8oZSk7IHIgPSAyMDAgPT0gTWF0aC5yb3VuZCh0KG4ud2lkdGgpKSwgcy5pc0JveFNpemVPdXRlciA9IHIsIGkucmVtb3ZlQ2hpbGQoZSkgfSB9IGZ1bmN0aW9uIHMoZSkgeyBpZiAobigpLCBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIChlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKSksIGUgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBlLm5vZGVUeXBlKSB7IHZhciBzID0gbyhlKTsgaWYgKFwibm9uZVwiID09IHMuZGlzcGxheSkgcmV0dXJuIGkoKTsgdmFyIGEgPSB7fTsgYS53aWR0aCA9IGUub2Zmc2V0V2lkdGgsIGEuaGVpZ2h0ID0gZS5vZmZzZXRIZWlnaHQ7IGZvciAodmFyIGQgPSBhLmlzQm9yZGVyQm94ID0gXCJib3JkZXItYm94XCIgPT0gcy5ib3hTaXppbmcsIGwgPSAwOyBsIDwgaDsgbCsrKSB7IHZhciBmID0gdVtsXSwgYyA9IHNbZl0sIG0gPSBwYXJzZUZsb2F0KGMpOyBhW2ZdID0gaXNOYU4obSkgPyAwIDogbSB9IHZhciBwID0gYS5wYWRkaW5nTGVmdCArIGEucGFkZGluZ1JpZ2h0LCB5ID0gYS5wYWRkaW5nVG9wICsgYS5wYWRkaW5nQm90dG9tLCBnID0gYS5tYXJnaW5MZWZ0ICsgYS5tYXJnaW5SaWdodCwgdiA9IGEubWFyZ2luVG9wICsgYS5tYXJnaW5Cb3R0b20sIF8gPSBhLmJvcmRlckxlZnRXaWR0aCArIGEuYm9yZGVyUmlnaHRXaWR0aCwgeiA9IGEuYm9yZGVyVG9wV2lkdGggKyBhLmJvcmRlckJvdHRvbVdpZHRoLCBJID0gZCAmJiByLCB4ID0gdChzLndpZHRoKTsgeCAhPT0gITEgJiYgKGEud2lkdGggPSB4ICsgKEkgPyAwIDogcCArIF8pKTsgdmFyIFMgPSB0KHMuaGVpZ2h0KTsgcmV0dXJuIFMgIT09ICExICYmIChhLmhlaWdodCA9IFMgKyAoSSA/IDAgOiB5ICsgeikpLCBhLmlubmVyV2lkdGggPSBhLndpZHRoIC0gKHAgKyBfKSwgYS5pbm5lckhlaWdodCA9IGEuaGVpZ2h0IC0gKHkgKyB6KSwgYS5vdXRlcldpZHRoID0gYS53aWR0aCArIGcsIGEub3V0ZXJIZWlnaHQgPSBhLmhlaWdodCArIHYsIGEgfSB9IHZhciByLCBhID0gXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgY29uc29sZSA/IGUgOiBmdW5jdGlvbiAodCkgeyBjb25zb2xlLmVycm9yKHQpIH0sIHUgPSBbXCJwYWRkaW5nTGVmdFwiLCBcInBhZGRpbmdSaWdodFwiLCBcInBhZGRpbmdUb3BcIiwgXCJwYWRkaW5nQm90dG9tXCIsIFwibWFyZ2luTGVmdFwiLCBcIm1hcmdpblJpZ2h0XCIsIFwibWFyZ2luVG9wXCIsIFwibWFyZ2luQm90dG9tXCIsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIFwiYm9yZGVyUmlnaHRXaWR0aFwiLCBcImJvcmRlclRvcFdpZHRoXCIsIFwiYm9yZGVyQm90dG9tV2lkdGhcIl0sIGggPSB1Lmxlbmd0aCwgZCA9ICExOyByZXR1cm4gcyB9KSwgZnVuY3Rpb24gKHQsIGUpIHsgXCJ1c2Ugc3RyaWN0XCI7IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoXCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3JcIiwgZSkgOiBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMgPyBtb2R1bGUuZXhwb3J0cyA9IGUoKSA6IHQubWF0Y2hlc1NlbGVjdG9yID0gZSgpIH0od2luZG93LCBmdW5jdGlvbiAoKSB7IFwidXNlIHN0cmljdFwiOyB2YXIgdCA9IGZ1bmN0aW9uICgpIHsgdmFyIHQgPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7IGlmICh0Lm1hdGNoZXMpIHJldHVybiBcIm1hdGNoZXNcIjsgaWYgKHQubWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gXCJtYXRjaGVzU2VsZWN0b3JcIjsgZm9yICh2YXIgZSA9IFtcIndlYmtpdFwiLCBcIm1velwiLCBcIm1zXCIsIFwib1wiXSwgaSA9IDA7IGkgPCBlLmxlbmd0aDsgaSsrKSB7IHZhciBvID0gZVtpXSwgbiA9IG8gKyBcIk1hdGNoZXNTZWxlY3RvclwiOyBpZiAodFtuXSkgcmV0dXJuIG4gfSB9KCk7IHJldHVybiBmdW5jdGlvbiAoZSwgaSkgeyByZXR1cm4gZVt0XShpKSB9IH0pLCBmdW5jdGlvbiAodCwgZSkgeyBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFwiZml6enktdWktdXRpbHMvdXRpbHNcIiwgW1wiZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yXCJdLCBmdW5jdGlvbiAoaSkgeyByZXR1cm4gZSh0LCBpKSB9KSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzID0gZSh0LCByZXF1aXJlKFwiZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvclwiKSkgOiB0LmZpenp5VUlVdGlscyA9IGUodCwgdC5tYXRjaGVzU2VsZWN0b3IpIH0od2luZG93LCBmdW5jdGlvbiAodCwgZSkgeyB2YXIgaSA9IHt9OyBpLmV4dGVuZCA9IGZ1bmN0aW9uICh0LCBlKSB7IGZvciAodmFyIGkgaW4gZSkgdFtpXSA9IGVbaV07IHJldHVybiB0IH0sIGkubW9kdWxvID0gZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuICh0ICUgZSArIGUpICUgZSB9OyB2YXIgbyA9IEFycmF5LnByb3RvdHlwZS5zbGljZTsgaS5tYWtlQXJyYXkgPSBmdW5jdGlvbiAodCkgeyBpZiAoQXJyYXkuaXNBcnJheSh0KSkgcmV0dXJuIHQ7IGlmIChudWxsID09PSB0IHx8IHZvaWQgMCA9PT0gdCkgcmV0dXJuIFtdOyB2YXIgZSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgXCJudW1iZXJcIiA9PSB0eXBlb2YgdC5sZW5ndGg7IHJldHVybiBlID8gby5jYWxsKHQpIDogW3RdIH0sIGkucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uICh0LCBlKSB7IHZhciBpID0gdC5pbmRleE9mKGUpOyBpICE9IC0xICYmIHQuc3BsaWNlKGksIDEpIH0sIGkuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKHQsIGkpIHsgZm9yICg7IHQucGFyZW50Tm9kZSAmJiB0ICE9IGRvY3VtZW50LmJvZHk7KWlmICh0ID0gdC5wYXJlbnROb2RlLCBlKHQsIGkpKSByZXR1cm4gdCB9LCBpLmdldFF1ZXJ5RWxlbWVudCA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiB0ID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KSA6IHQgfSwgaS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gXCJvblwiICsgdC50eXBlOyB0aGlzW2VdICYmIHRoaXNbZV0odCkgfSwgaS5maWx0ZXJGaW5kRWxlbWVudHMgPSBmdW5jdGlvbiAodCwgbykgeyB0ID0gaS5tYWtlQXJyYXkodCk7IHZhciBuID0gW107IHJldHVybiB0LmZvckVhY2goZnVuY3Rpb24gKHQpIHsgaWYgKHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgeyBpZiAoIW8pIHJldHVybiB2b2lkIG4ucHVzaCh0KTsgZSh0LCBvKSAmJiBuLnB1c2godCk7IGZvciAodmFyIGkgPSB0LnF1ZXJ5U2VsZWN0b3JBbGwobyksIHMgPSAwOyBzIDwgaS5sZW5ndGg7IHMrKyluLnB1c2goaVtzXSkgfSB9KSwgbiB9LCBpLmRlYm91bmNlTWV0aG9kID0gZnVuY3Rpb24gKHQsIGUsIGkpIHsgaSA9IGkgfHwgMTAwOyB2YXIgbyA9IHQucHJvdG90eXBlW2VdLCBuID0gZSArIFwiVGltZW91dFwiOyB0LnByb3RvdHlwZVtlXSA9IGZ1bmN0aW9uICgpIHsgdmFyIHQgPSB0aGlzW25dOyBjbGVhclRpbWVvdXQodCk7IHZhciBlID0gYXJndW1lbnRzLCBzID0gdGhpczsgdGhpc1tuXSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBvLmFwcGx5KHMsIGUpLCBkZWxldGUgc1tuXSB9LCBpKSB9IH0sIGkuZG9jUmVhZHkgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IGRvY3VtZW50LnJlYWR5U3RhdGU7IFwiY29tcGxldGVcIiA9PSBlIHx8IFwiaW50ZXJhY3RpdmVcIiA9PSBlID8gc2V0VGltZW91dCh0KSA6IGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIHQpIH0sIGkudG9EYXNoZWQgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5yZXBsYWNlKC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uICh0LCBlLCBpKSB7IHJldHVybiBlICsgXCItXCIgKyBpIH0pLnRvTG93ZXJDYXNlKCkgfTsgdmFyIG4gPSB0LmNvbnNvbGU7IHJldHVybiBpLmh0bWxJbml0ID0gZnVuY3Rpb24gKGUsIG8pIHsgaS5kb2NSZWFkeShmdW5jdGlvbiAoKSB7IHZhciBzID0gaS50b0Rhc2hlZChvKSwgciA9IFwiZGF0YS1cIiArIHMsIGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW1wiICsgciArIFwiXVwiKSwgdSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtXCIgKyBzKSwgaCA9IGkubWFrZUFycmF5KGEpLmNvbmNhdChpLm1ha2VBcnJheSh1KSksIGQgPSByICsgXCItb3B0aW9uc1wiLCBsID0gdC5qUXVlcnk7IGguZm9yRWFjaChmdW5jdGlvbiAodCkgeyB2YXIgaSwgcyA9IHQuZ2V0QXR0cmlidXRlKHIpIHx8IHQuZ2V0QXR0cmlidXRlKGQpOyB0cnkgeyBpID0gcyAmJiBKU09OLnBhcnNlKHMpIH0gY2F0Y2ggKGEpIHsgcmV0dXJuIHZvaWQgKG4gJiYgbi5lcnJvcihcIkVycm9yIHBhcnNpbmcgXCIgKyByICsgXCIgb24gXCIgKyB0LmNsYXNzTmFtZSArIFwiOiBcIiArIGEpKSB9IHZhciB1ID0gbmV3IGUodCwgaSk7IGwgJiYgbC5kYXRhKHQsIG8sIHUpIH0pIH0pIH0sIGkgfSksIGZ1bmN0aW9uICh0LCBlKSB7IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoXCJvdXRsYXllci9pdGVtXCIsIFtcImV2LWVtaXR0ZXIvZXYtZW1pdHRlclwiLCBcImdldC1zaXplL2dldC1zaXplXCJdLCBlKSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzID0gZShyZXF1aXJlKFwiZXYtZW1pdHRlclwiKSwgcmVxdWlyZShcImdldC1zaXplXCIpKSA6ICh0Lk91dGxheWVyID0ge30sIHQuT3V0bGF5ZXIuSXRlbSA9IGUodC5FdkVtaXR0ZXIsIHQuZ2V0U2l6ZSkpIH0od2luZG93LCBmdW5jdGlvbiAodCwgZSkgeyBcInVzZSBzdHJpY3RcIjsgZnVuY3Rpb24gaSh0KSB7IGZvciAodmFyIGUgaW4gdCkgcmV0dXJuICExOyByZXR1cm4gZSA9IG51bGwsICEwIH0gZnVuY3Rpb24gbyh0LCBlKSB7IHQgJiYgKHRoaXMuZWxlbWVudCA9IHQsIHRoaXMubGF5b3V0ID0gZSwgdGhpcy5wb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9LCB0aGlzLl9jcmVhdGUoKSkgfSBmdW5jdGlvbiBuKHQpIHsgcmV0dXJuIHQucmVwbGFjZSgvKFtBLVpdKS9nLCBmdW5jdGlvbiAodCkgeyByZXR1cm4gXCItXCIgKyB0LnRvTG93ZXJDYXNlKCkgfSkgfSB2YXIgcyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSwgciA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIHMudHJhbnNpdGlvbiA/IFwidHJhbnNpdGlvblwiIDogXCJXZWJraXRUcmFuc2l0aW9uXCIsIGEgPSBcInN0cmluZ1wiID09IHR5cGVvZiBzLnRyYW5zZm9ybSA/IFwidHJhbnNmb3JtXCIgOiBcIldlYmtpdFRyYW5zZm9ybVwiLCB1ID0geyBXZWJraXRUcmFuc2l0aW9uOiBcIndlYmtpdFRyYW5zaXRpb25FbmRcIiwgdHJhbnNpdGlvbjogXCJ0cmFuc2l0aW9uZW5kXCIgfVtyXSwgaCA9IHsgdHJhbnNmb3JtOiBhLCB0cmFuc2l0aW9uOiByLCB0cmFuc2l0aW9uRHVyYXRpb246IHIgKyBcIkR1cmF0aW9uXCIsIHRyYW5zaXRpb25Qcm9wZXJ0eTogciArIFwiUHJvcGVydHlcIiwgdHJhbnNpdGlvbkRlbGF5OiByICsgXCJEZWxheVwiIH0sIGQgPSBvLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOyBkLmNvbnN0cnVjdG9yID0gbywgZC5fY3JlYXRlID0gZnVuY3Rpb24gKCkgeyB0aGlzLl90cmFuc24gPSB7IGluZ1Byb3BlcnRpZXM6IHt9LCBjbGVhbjoge30sIG9uRW5kOiB7fSB9LCB0aGlzLmNzcyh7IHBvc2l0aW9uOiBcImFic29sdXRlXCIgfSkgfSwgZC5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gXCJvblwiICsgdC50eXBlOyB0aGlzW2VdICYmIHRoaXNbZV0odCkgfSwgZC5nZXRTaXplID0gZnVuY3Rpb24gKCkgeyB0aGlzLnNpemUgPSBlKHRoaXMuZWxlbWVudCkgfSwgZC5jc3MgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHRoaXMuZWxlbWVudC5zdHlsZTsgZm9yICh2YXIgaSBpbiB0KSB7IHZhciBvID0gaFtpXSB8fCBpOyBlW29dID0gdFtpXSB9IH0sIGQuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7IHZhciB0ID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnQpLCBlID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbihcIm9yaWdpbkxlZnRcIiksIGkgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKFwib3JpZ2luVG9wXCIpLCBvID0gdFtlID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCJdLCBuID0gdFtpID8gXCJ0b3BcIiA6IFwiYm90dG9tXCJdLCBzID0gcGFyc2VGbG9hdChvKSwgciA9IHBhcnNlRmxvYXQobiksIGEgPSB0aGlzLmxheW91dC5zaXplOyBvLmluZGV4T2YoXCIlXCIpICE9IC0xICYmIChzID0gcyAvIDEwMCAqIGEud2lkdGgpLCBuLmluZGV4T2YoXCIlXCIpICE9IC0xICYmIChyID0gciAvIDEwMCAqIGEuaGVpZ2h0KSwgcyA9IGlzTmFOKHMpID8gMCA6IHMsIHIgPSBpc05hTihyKSA/IDAgOiByLCBzIC09IGUgPyBhLnBhZGRpbmdMZWZ0IDogYS5wYWRkaW5nUmlnaHQsIHIgLT0gaSA/IGEucGFkZGluZ1RvcCA6IGEucGFkZGluZ0JvdHRvbSwgdGhpcy5wb3NpdGlvbi54ID0gcywgdGhpcy5wb3NpdGlvbi55ID0gciB9LCBkLmxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24gKCkgeyB2YXIgdCA9IHRoaXMubGF5b3V0LnNpemUsIGUgPSB7fSwgaSA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJvcmlnaW5MZWZ0XCIpLCBvID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbihcIm9yaWdpblRvcFwiKSwgbiA9IGkgPyBcInBhZGRpbmdMZWZ0XCIgOiBcInBhZGRpbmdSaWdodFwiLCBzID0gaSA/IFwibGVmdFwiIDogXCJyaWdodFwiLCByID0gaSA/IFwicmlnaHRcIiA6IFwibGVmdFwiLCBhID0gdGhpcy5wb3NpdGlvbi54ICsgdFtuXTsgZVtzXSA9IHRoaXMuZ2V0WFZhbHVlKGEpLCBlW3JdID0gXCJcIjsgdmFyIHUgPSBvID8gXCJwYWRkaW5nVG9wXCIgOiBcInBhZGRpbmdCb3R0b21cIiwgaCA9IG8gPyBcInRvcFwiIDogXCJib3R0b21cIiwgZCA9IG8gPyBcImJvdHRvbVwiIDogXCJ0b3BcIiwgbCA9IHRoaXMucG9zaXRpb24ueSArIHRbdV07IGVbaF0gPSB0aGlzLmdldFlWYWx1ZShsKSwgZVtkXSA9IFwiXCIsIHRoaXMuY3NzKGUpLCB0aGlzLmVtaXRFdmVudChcImxheW91dFwiLCBbdGhpc10pIH0sIGQuZ2V0WFZhbHVlID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKFwiaG9yaXpvbnRhbFwiKTsgcmV0dXJuIHRoaXMubGF5b3V0Lm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICYmICFlID8gdCAvIHRoaXMubGF5b3V0LnNpemUud2lkdGggKiAxMDAgKyBcIiVcIiA6IHQgKyBcInB4XCIgfSwgZC5nZXRZVmFsdWUgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJob3Jpem9udGFsXCIpOyByZXR1cm4gdGhpcy5sYXlvdXQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gJiYgZSA/IHQgLyB0aGlzLmxheW91dC5zaXplLmhlaWdodCAqIDEwMCArIFwiJVwiIDogdCArIFwicHhcIiB9LCBkLl90cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiAodCwgZSkgeyB0aGlzLmdldFBvc2l0aW9uKCk7IHZhciBpID0gdGhpcy5wb3NpdGlvbi54LCBvID0gdGhpcy5wb3NpdGlvbi55LCBuID0gdCA9PSB0aGlzLnBvc2l0aW9uLnggJiYgZSA9PSB0aGlzLnBvc2l0aW9uLnk7IGlmICh0aGlzLnNldFBvc2l0aW9uKHQsIGUpLCBuICYmICF0aGlzLmlzVHJhbnNpdGlvbmluZykgcmV0dXJuIHZvaWQgdGhpcy5sYXlvdXRQb3NpdGlvbigpOyB2YXIgcyA9IHQgLSBpLCByID0gZSAtIG8sIGEgPSB7fTsgYS50cmFuc2Zvcm0gPSB0aGlzLmdldFRyYW5zbGF0ZShzLCByKSwgdGhpcy50cmFuc2l0aW9uKHsgdG86IGEsIG9uVHJhbnNpdGlvbkVuZDogeyB0cmFuc2Zvcm06IHRoaXMubGF5b3V0UG9zaXRpb24gfSwgaXNDbGVhbmluZzogITAgfSkgfSwgZC5nZXRUcmFuc2xhdGUgPSBmdW5jdGlvbiAodCwgZSkgeyB2YXIgaSA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJvcmlnaW5MZWZ0XCIpLCBvID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbihcIm9yaWdpblRvcFwiKTsgcmV0dXJuIHQgPSBpID8gdCA6IC10LCBlID0gbyA/IGUgOiAtZSwgXCJ0cmFuc2xhdGUzZChcIiArIHQgKyBcInB4LCBcIiArIGUgKyBcInB4LCAwKVwiIH0sIGQuZ29UbyA9IGZ1bmN0aW9uICh0LCBlKSB7IHRoaXMuc2V0UG9zaXRpb24odCwgZSksIHRoaXMubGF5b3V0UG9zaXRpb24oKSB9LCBkLm1vdmVUbyA9IGQuX3RyYW5zaXRpb25UbywgZC5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICh0LCBlKSB7IHRoaXMucG9zaXRpb24ueCA9IHBhcnNlRmxvYXQodCksIHRoaXMucG9zaXRpb24ueSA9IHBhcnNlRmxvYXQoZSkgfSwgZC5fbm9uVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICh0KSB7IHRoaXMuY3NzKHQudG8pLCB0LmlzQ2xlYW5pbmcgJiYgdGhpcy5fcmVtb3ZlU3R5bGVzKHQudG8pOyBmb3IgKHZhciBlIGluIHQub25UcmFuc2l0aW9uRW5kKSB0Lm9uVHJhbnNpdGlvbkVuZFtlXS5jYWxsKHRoaXMpIH0sIGQudHJhbnNpdGlvbiA9IGZ1bmN0aW9uICh0KSB7IGlmICghcGFyc2VGbG9hdCh0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbikpIHJldHVybiB2b2lkIHRoaXMuX25vblRyYW5zaXRpb24odCk7IHZhciBlID0gdGhpcy5fdHJhbnNuOyBmb3IgKHZhciBpIGluIHQub25UcmFuc2l0aW9uRW5kKSBlLm9uRW5kW2ldID0gdC5vblRyYW5zaXRpb25FbmRbaV07IGZvciAoaSBpbiB0LnRvKSBlLmluZ1Byb3BlcnRpZXNbaV0gPSAhMCwgdC5pc0NsZWFuaW5nICYmIChlLmNsZWFuW2ldID0gITApOyBpZiAodC5mcm9tKSB7IHRoaXMuY3NzKHQuZnJvbSk7IHZhciBvID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDsgbyA9IG51bGwgfSB0aGlzLmVuYWJsZVRyYW5zaXRpb24odC50byksIHRoaXMuY3NzKHQudG8pLCB0aGlzLmlzVHJhbnNpdGlvbmluZyA9ICEwIH07IHZhciBsID0gXCJvcGFjaXR5LFwiICsgbihhKTsgZC5lbmFibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24gKCkgeyBpZiAoIXRoaXMuaXNUcmFuc2l0aW9uaW5nKSB7IHZhciB0ID0gdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247IHQgPSBcIm51bWJlclwiID09IHR5cGVvZiB0ID8gdCArIFwibXNcIiA6IHQsIHRoaXMuY3NzKHsgdHJhbnNpdGlvblByb3BlcnR5OiBsLCB0cmFuc2l0aW9uRHVyYXRpb246IHQsIHRyYW5zaXRpb25EZWxheTogdGhpcy5zdGFnZ2VyRGVsYXkgfHwgMCB9KSwgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodSwgdGhpcywgITEpIH0gfSwgZC5vbndlYmtpdFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAodCkgeyB0aGlzLm9udHJhbnNpdGlvbmVuZCh0KSB9LCBkLm9ub3RyYW5zaXRpb25lbmQgPSBmdW5jdGlvbiAodCkgeyB0aGlzLm9udHJhbnNpdGlvbmVuZCh0KSB9OyB2YXIgZiA9IHsgXCItd2Via2l0LXRyYW5zZm9ybVwiOiBcInRyYW5zZm9ybVwiIH07IGQub250cmFuc2l0aW9uZW5kID0gZnVuY3Rpb24gKHQpIHsgaWYgKHQudGFyZ2V0ID09PSB0aGlzLmVsZW1lbnQpIHsgdmFyIGUgPSB0aGlzLl90cmFuc24sIG8gPSBmW3QucHJvcGVydHlOYW1lXSB8fCB0LnByb3BlcnR5TmFtZTsgaWYgKGRlbGV0ZSBlLmluZ1Byb3BlcnRpZXNbb10sIGkoZS5pbmdQcm9wZXJ0aWVzKSAmJiB0aGlzLmRpc2FibGVUcmFuc2l0aW9uKCksIG8gaW4gZS5jbGVhbiAmJiAodGhpcy5lbGVtZW50LnN0eWxlW3QucHJvcGVydHlOYW1lXSA9IFwiXCIsIGRlbGV0ZSBlLmNsZWFuW29dKSwgbyBpbiBlLm9uRW5kKSB7IHZhciBuID0gZS5vbkVuZFtvXTsgbi5jYWxsKHRoaXMpLCBkZWxldGUgZS5vbkVuZFtvXSB9IHRoaXMuZW1pdEV2ZW50KFwidHJhbnNpdGlvbkVuZFwiLCBbdGhpc10pIH0gfSwgZC5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHsgdGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCksIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHUsIHRoaXMsICExKSwgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSAhMSB9LCBkLl9yZW1vdmVTdHlsZXMgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHt9OyBmb3IgKHZhciBpIGluIHQpIGVbaV0gPSBcIlwiOyB0aGlzLmNzcyhlKSB9OyB2YXIgYyA9IHsgdHJhbnNpdGlvblByb3BlcnR5OiBcIlwiLCB0cmFuc2l0aW9uRHVyYXRpb246IFwiXCIsIHRyYW5zaXRpb25EZWxheTogXCJcIiB9OyByZXR1cm4gZC5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzID0gZnVuY3Rpb24gKCkgeyB0aGlzLmNzcyhjKSB9LCBkLnN0YWdnZXIgPSBmdW5jdGlvbiAodCkgeyB0ID0gaXNOYU4odCkgPyAwIDogdCwgdGhpcy5zdGFnZ2VyRGVsYXkgPSB0ICsgXCJtc1wiIH0sIGQucmVtb3ZlRWxlbSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KSwgdGhpcy5jc3MoeyBkaXNwbGF5OiBcIlwiIH0pLCB0aGlzLmVtaXRFdmVudChcInJlbW92ZVwiLCBbdGhpc10pIH0sIGQucmVtb3ZlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gciAmJiBwYXJzZUZsb2F0KHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uKSA/ICh0aGlzLm9uY2UoXCJ0cmFuc2l0aW9uRW5kXCIsIGZ1bmN0aW9uICgpIHsgdGhpcy5yZW1vdmVFbGVtKCkgfSksIHZvaWQgdGhpcy5oaWRlKCkpIDogdm9pZCB0aGlzLnJlbW92ZUVsZW0oKSB9LCBkLnJldmVhbCA9IGZ1bmN0aW9uICgpIHsgZGVsZXRlIHRoaXMuaXNIaWRkZW4sIHRoaXMuY3NzKHsgZGlzcGxheTogXCJcIiB9KTsgdmFyIHQgPSB0aGlzLmxheW91dC5vcHRpb25zLCBlID0ge30sIGkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoXCJ2aXNpYmxlU3R5bGVcIik7IGVbaV0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCwgdGhpcy50cmFuc2l0aW9uKHsgZnJvbTogdC5oaWRkZW5TdHlsZSwgdG86IHQudmlzaWJsZVN0eWxlLCBpc0NsZWFuaW5nOiAhMCwgb25UcmFuc2l0aW9uRW5kOiBlIH0pIH0sIGQub25SZXZlYWxUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKCkgeyB0aGlzLmlzSGlkZGVuIHx8IHRoaXMuZW1pdEV2ZW50KFwicmV2ZWFsXCIpIH0sIGQuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdGhpcy5sYXlvdXQub3B0aW9uc1t0XTsgaWYgKGUub3BhY2l0eSkgcmV0dXJuIFwib3BhY2l0eVwiOyBmb3IgKHZhciBpIGluIGUpIHJldHVybiBpIH0sIGQuaGlkZSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5pc0hpZGRlbiA9ICEwLCB0aGlzLmNzcyh7IGRpc3BsYXk6IFwiXCIgfSk7IHZhciB0ID0gdGhpcy5sYXlvdXQub3B0aW9ucywgZSA9IHt9LCBpID0gdGhpcy5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5KFwiaGlkZGVuU3R5bGVcIik7IGVbaV0gPSB0aGlzLm9uSGlkZVRyYW5zaXRpb25FbmQsIHRoaXMudHJhbnNpdGlvbih7IGZyb206IHQudmlzaWJsZVN0eWxlLCB0bzogdC5oaWRkZW5TdHlsZSwgaXNDbGVhbmluZzogITAsIG9uVHJhbnNpdGlvbkVuZDogZSB9KSB9LCBkLm9uSGlkZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoKSB7IHRoaXMuaXNIaWRkZW4gJiYgKHRoaXMuY3NzKHsgZGlzcGxheTogXCJub25lXCIgfSksIHRoaXMuZW1pdEV2ZW50KFwiaGlkZVwiKSkgfSwgZC5kZXN0cm95ID0gZnVuY3Rpb24gKCkgeyB0aGlzLmNzcyh7IHBvc2l0aW9uOiBcIlwiLCBsZWZ0OiBcIlwiLCByaWdodDogXCJcIiwgdG9wOiBcIlwiLCBib3R0b206IFwiXCIsIHRyYW5zaXRpb246IFwiXCIsIHRyYW5zZm9ybTogXCJcIiB9KSB9LCBvIH0pLCBmdW5jdGlvbiAodCwgZSkgeyBcInVzZSBzdHJpY3RcIjsgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShcIm91dGxheWVyL291dGxheWVyXCIsIFtcImV2LWVtaXR0ZXIvZXYtZW1pdHRlclwiLCBcImdldC1zaXplL2dldC1zaXplXCIsIFwiZml6enktdWktdXRpbHMvdXRpbHNcIiwgXCIuL2l0ZW1cIl0sIGZ1bmN0aW9uIChpLCBvLCBuLCBzKSB7IHJldHVybiBlKHQsIGksIG8sIG4sIHMpIH0pIDogXCJvYmplY3RcIiA9PSB0eXBlb2YgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzID8gbW9kdWxlLmV4cG9ydHMgPSBlKHQsIHJlcXVpcmUoXCJldi1lbWl0dGVyXCIpLCByZXF1aXJlKFwiZ2V0LXNpemVcIiksIHJlcXVpcmUoXCJmaXp6eS11aS11dGlsc1wiKSwgcmVxdWlyZShcIi4vaXRlbVwiKSkgOiB0Lk91dGxheWVyID0gZSh0LCB0LkV2RW1pdHRlciwgdC5nZXRTaXplLCB0LmZpenp5VUlVdGlscywgdC5PdXRsYXllci5JdGVtKSB9KHdpbmRvdywgZnVuY3Rpb24gKHQsIGUsIGksIG8sIG4pIHsgXCJ1c2Ugc3RyaWN0XCI7IGZ1bmN0aW9uIHModCwgZSkgeyB2YXIgaSA9IG8uZ2V0UXVlcnlFbGVtZW50KHQpOyBpZiAoIWkpIHJldHVybiB2b2lkICh1ICYmIHUuZXJyb3IoXCJCYWQgZWxlbWVudCBmb3IgXCIgKyB0aGlzLmNvbnN0cnVjdG9yLm5hbWVzcGFjZSArIFwiOiBcIiArIChpIHx8IHQpKSk7IHRoaXMuZWxlbWVudCA9IGksIGggJiYgKHRoaXMuJGVsZW1lbnQgPSBoKHRoaXMuZWxlbWVudCkpLCB0aGlzLm9wdGlvbnMgPSBvLmV4dGVuZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0cyksIHRoaXMub3B0aW9uKGUpOyB2YXIgbiA9ICsrbDsgdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRCA9IG4sIGZbbl0gPSB0aGlzLCB0aGlzLl9jcmVhdGUoKTsgdmFyIHMgPSB0aGlzLl9nZXRPcHRpb24oXCJpbml0TGF5b3V0XCIpOyBzICYmIHRoaXMubGF5b3V0KCkgfSBmdW5jdGlvbiByKHQpIHsgZnVuY3Rpb24gZSgpIHsgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIH0gcmV0dXJuIGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksIGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gZSwgZSB9IGZ1bmN0aW9uIGEodCkgeyBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdCkgcmV0dXJuIHQ7IHZhciBlID0gdC5tYXRjaCgvKF5cXGQqXFwuP1xcZCopKFxcdyopLyksIGkgPSBlICYmIGVbMV0sIG8gPSBlICYmIGVbMl07IGlmICghaS5sZW5ndGgpIHJldHVybiAwOyBpID0gcGFyc2VGbG9hdChpKTsgdmFyIG4gPSBtW29dIHx8IDE7IHJldHVybiBpICogbiB9IHZhciB1ID0gdC5jb25zb2xlLCBoID0gdC5qUXVlcnksIGQgPSBmdW5jdGlvbiAoKSB7IH0sIGwgPSAwLCBmID0ge307IHMubmFtZXNwYWNlID0gXCJvdXRsYXllclwiLCBzLkl0ZW0gPSBuLCBzLmRlZmF1bHRzID0geyBjb250YWluZXJTdHlsZTogeyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH0sIGluaXRMYXlvdXQ6ICEwLCBvcmlnaW5MZWZ0OiAhMCwgb3JpZ2luVG9wOiAhMCwgcmVzaXplOiAhMCwgcmVzaXplQ29udGFpbmVyOiAhMCwgdHJhbnNpdGlvbkR1cmF0aW9uOiBcIjAuNHNcIiwgaGlkZGVuU3R5bGU6IHsgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiBcInNjYWxlKDAuMDAxKVwiIH0sIHZpc2libGVTdHlsZTogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06IFwic2NhbGUoMSlcIiB9IH07IHZhciBjID0gcy5wcm90b3R5cGU7IG8uZXh0ZW5kKGMsIGUucHJvdG90eXBlKSwgYy5vcHRpb24gPSBmdW5jdGlvbiAodCkgeyBvLmV4dGVuZCh0aGlzLm9wdGlvbnMsIHQpIH0sIGMuX2dldE9wdGlvbiA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdGhpcy5jb25zdHJ1Y3Rvci5jb21wYXRPcHRpb25zW3RdOyByZXR1cm4gZSAmJiB2b2lkIDAgIT09IHRoaXMub3B0aW9uc1tlXSA/IHRoaXMub3B0aW9uc1tlXSA6IHRoaXMub3B0aW9uc1t0XSB9LCBzLmNvbXBhdE9wdGlvbnMgPSB7IGluaXRMYXlvdXQ6IFwiaXNJbml0TGF5b3V0XCIsIGhvcml6b250YWw6IFwiaXNIb3Jpem9udGFsXCIsIGxheW91dEluc3RhbnQ6IFwiaXNMYXlvdXRJbnN0YW50XCIsIG9yaWdpbkxlZnQ6IFwiaXNPcmlnaW5MZWZ0XCIsIG9yaWdpblRvcDogXCJpc09yaWdpblRvcFwiLCByZXNpemU6IFwiaXNSZXNpemVCb3VuZFwiLCByZXNpemVDb250YWluZXI6IFwiaXNSZXNpemluZ0NvbnRhaW5lclwiIH0sIGMuX2NyZWF0ZSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5yZWxvYWRJdGVtcygpLCB0aGlzLnN0YW1wcyA9IFtdLCB0aGlzLnN0YW1wKHRoaXMub3B0aW9ucy5zdGFtcCksIG8uZXh0ZW5kKHRoaXMuZWxlbWVudC5zdHlsZSwgdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlKTsgdmFyIHQgPSB0aGlzLl9nZXRPcHRpb24oXCJyZXNpemVcIik7IHQgJiYgdGhpcy5iaW5kUmVzaXplKCkgfSwgYy5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uICgpIHsgdGhpcy5pdGVtcyA9IHRoaXMuX2l0ZW1pemUodGhpcy5lbGVtZW50LmNoaWxkcmVuKSB9LCBjLl9pdGVtaXplID0gZnVuY3Rpb24gKHQpIHsgZm9yICh2YXIgZSA9IHRoaXMuX2ZpbHRlckZpbmRJdGVtRWxlbWVudHModCksIGkgPSB0aGlzLmNvbnN0cnVjdG9yLkl0ZW0sIG8gPSBbXSwgbiA9IDA7IG4gPCBlLmxlbmd0aDsgbisrKSB7IHZhciBzID0gZVtuXSwgciA9IG5ldyBpKHMsIHRoaXMpOyBvLnB1c2gocikgfSByZXR1cm4gbyB9LCBjLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIG8uZmlsdGVyRmluZEVsZW1lbnRzKHQsIHRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IpIH0sIGMuZ2V0SXRlbUVsZW1lbnRzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pdGVtcy5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuZWxlbWVudCB9KSB9LCBjLmxheW91dCA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fcmVzZXRMYXlvdXQoKSwgdGhpcy5fbWFuYWdlU3RhbXBzKCk7IHZhciB0ID0gdGhpcy5fZ2V0T3B0aW9uKFwibGF5b3V0SW5zdGFudFwiKSwgZSA9IHZvaWQgMCAhPT0gdCA/IHQgOiAhdGhpcy5faXNMYXlvdXRJbml0ZWQ7IHRoaXMubGF5b3V0SXRlbXModGhpcy5pdGVtcywgZSksIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gITAgfSwgYy5faW5pdCA9IGMubGF5b3V0LCBjLl9yZXNldExheW91dCA9IGZ1bmN0aW9uICgpIHsgdGhpcy5nZXRTaXplKCkgfSwgYy5nZXRTaXplID0gZnVuY3Rpb24gKCkgeyB0aGlzLnNpemUgPSBpKHRoaXMuZWxlbWVudCkgfSwgYy5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbiAodCwgZSkgeyB2YXIgbywgbiA9IHRoaXMub3B0aW9uc1t0XTsgbiA/IChcInN0cmluZ1wiID09IHR5cGVvZiBuID8gbyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKG4pIDogbiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIChvID0gbiksIHRoaXNbdF0gPSBvID8gaShvKVtlXSA6IG4pIDogdGhpc1t0XSA9IDAgfSwgYy5sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uICh0LCBlKSB7IHQgPSB0aGlzLl9nZXRJdGVtc0ZvckxheW91dCh0KSwgdGhpcy5fbGF5b3V0SXRlbXModCwgZSksIHRoaXMuX3Bvc3RMYXlvdXQoKSB9LCBjLl9nZXRJdGVtc0ZvckxheW91dCA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIXQuaXNJZ25vcmVkIH0pIH0sIGMuX2xheW91dEl0ZW1zID0gZnVuY3Rpb24gKHQsIGUpIHsgaWYgKHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoXCJsYXlvdXRcIiwgdCksIHQgJiYgdC5sZW5ndGgpIHsgdmFyIGkgPSBbXTsgdC5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7IHZhciBvID0gdGhpcy5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKHQpOyBvLml0ZW0gPSB0LCBvLmlzSW5zdGFudCA9IGUgfHwgdC5pc0xheW91dEluc3RhbnQsIGkucHVzaChvKSB9LCB0aGlzKSwgdGhpcy5fcHJvY2Vzc0xheW91dFF1ZXVlKGkpIH0gfSwgYy5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyB4OiAwLCB5OiAwIH0gfSwgYy5fcHJvY2Vzc0xheW91dFF1ZXVlID0gZnVuY3Rpb24gKHQpIHsgdGhpcy51cGRhdGVTdGFnZ2VyKCksIHQuZm9yRWFjaChmdW5jdGlvbiAodCwgZSkgeyB0aGlzLl9wb3NpdGlvbkl0ZW0odC5pdGVtLCB0LngsIHQueSwgdC5pc0luc3RhbnQsIGUpIH0sIHRoaXMpIH0sIGMudXBkYXRlU3RhZ2dlciA9IGZ1bmN0aW9uICgpIHsgdmFyIHQgPSB0aGlzLm9wdGlvbnMuc3RhZ2dlcjsgcmV0dXJuIG51bGwgPT09IHQgfHwgdm9pZCAwID09PSB0ID8gdm9pZCAodGhpcy5zdGFnZ2VyID0gMCkgOiAodGhpcy5zdGFnZ2VyID0gYSh0KSwgdGhpcy5zdGFnZ2VyKSB9LCBjLl9wb3NpdGlvbkl0ZW0gPSBmdW5jdGlvbiAodCwgZSwgaSwgbywgbikgeyBvID8gdC5nb1RvKGUsIGkpIDogKHQuc3RhZ2dlcihuICogdGhpcy5zdGFnZ2VyKSwgdC5tb3ZlVG8oZSwgaSkpIH0sIGMuX3Bvc3RMYXlvdXQgPSBmdW5jdGlvbiAoKSB7IHRoaXMucmVzaXplQ29udGFpbmVyKCkgfSwgYy5yZXNpemVDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7IHZhciB0ID0gdGhpcy5fZ2V0T3B0aW9uKFwicmVzaXplQ29udGFpbmVyXCIpOyBpZiAodCkgeyB2YXIgZSA9IHRoaXMuX2dldENvbnRhaW5lclNpemUoKTsgZSAmJiAodGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZShlLndpZHRoLCAhMCksIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoZS5oZWlnaHQsICExKSkgfSB9LCBjLl9nZXRDb250YWluZXJTaXplID0gZCwgYy5fc2V0Q29udGFpbmVyTWVhc3VyZSA9IGZ1bmN0aW9uICh0LCBlKSB7IGlmICh2b2lkIDAgIT09IHQpIHsgdmFyIGkgPSB0aGlzLnNpemU7IGkuaXNCb3JkZXJCb3ggJiYgKHQgKz0gZSA/IGkucGFkZGluZ0xlZnQgKyBpLnBhZGRpbmdSaWdodCArIGkuYm9yZGVyTGVmdFdpZHRoICsgaS5ib3JkZXJSaWdodFdpZHRoIDogaS5wYWRkaW5nQm90dG9tICsgaS5wYWRkaW5nVG9wICsgaS5ib3JkZXJUb3BXaWR0aCArIGkuYm9yZGVyQm90dG9tV2lkdGgpLCB0ID0gTWF0aC5tYXgodCwgMCksIHRoaXMuZWxlbWVudC5zdHlsZVtlID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSB0ICsgXCJweFwiIH0gfSwgYy5fZW1pdENvbXBsZXRlT25JdGVtcyA9IGZ1bmN0aW9uICh0LCBlKSB7IGZ1bmN0aW9uIGkoKSB7IG4uZGlzcGF0Y2hFdmVudCh0ICsgXCJDb21wbGV0ZVwiLCBudWxsLCBbZV0pIH0gZnVuY3Rpb24gbygpIHsgcisrLCByID09IHMgJiYgaSgpIH0gdmFyIG4gPSB0aGlzLCBzID0gZS5sZW5ndGg7IGlmICghZSB8fCAhcykgcmV0dXJuIHZvaWQgaSgpOyB2YXIgciA9IDA7IGUuZm9yRWFjaChmdW5jdGlvbiAoZSkgeyBlLm9uY2UodCwgbykgfSkgfSwgYy5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKHQsIGUsIGkpIHsgdmFyIG8gPSBlID8gW2VdLmNvbmNhdChpKSA6IGk7IGlmICh0aGlzLmVtaXRFdmVudCh0LCBvKSwgaCkgaWYgKHRoaXMuJGVsZW1lbnQgPSB0aGlzLiRlbGVtZW50IHx8IGgodGhpcy5lbGVtZW50KSwgZSkgeyB2YXIgbiA9IGguRXZlbnQoZSk7IG4udHlwZSA9IHQsIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihuLCBpKSB9IGVsc2UgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHQsIGkpIH0sIGMuaWdub3JlID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLmdldEl0ZW0odCk7IGUgJiYgKGUuaXNJZ25vcmVkID0gITApIH0sIGMudW5pZ25vcmUgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHRoaXMuZ2V0SXRlbSh0KTsgZSAmJiBkZWxldGUgZS5pc0lnbm9yZWQgfSwgYy5zdGFtcCA9IGZ1bmN0aW9uICh0KSB7IHQgPSB0aGlzLl9maW5kKHQpLCB0ICYmICh0aGlzLnN0YW1wcyA9IHRoaXMuc3RhbXBzLmNvbmNhdCh0KSwgdC5mb3JFYWNoKHRoaXMuaWdub3JlLCB0aGlzKSkgfSwgYy51bnN0YW1wID0gZnVuY3Rpb24gKHQpIHsgdCA9IHRoaXMuX2ZpbmQodCksIHQgJiYgdC5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7IG8ucmVtb3ZlRnJvbSh0aGlzLnN0YW1wcywgdCksIHRoaXMudW5pZ25vcmUodCkgfSwgdGhpcykgfSwgYy5fZmluZCA9IGZ1bmN0aW9uICh0KSB7IGlmICh0KSByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiAodCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHQpKSwgdCA9IG8ubWFrZUFycmF5KHQpIH0sIGMuX21hbmFnZVN0YW1wcyA9IGZ1bmN0aW9uICgpIHsgdGhpcy5zdGFtcHMgJiYgdGhpcy5zdGFtcHMubGVuZ3RoICYmICh0aGlzLl9nZXRCb3VuZGluZ1JlY3QoKSwgdGhpcy5zdGFtcHMuZm9yRWFjaCh0aGlzLl9tYW5hZ2VTdGFtcCwgdGhpcykpIH0sIGMuX2dldEJvdW5kaW5nUmVjdCA9IGZ1bmN0aW9uICgpIHsgdmFyIHQgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGUgPSB0aGlzLnNpemU7IHRoaXMuX2JvdW5kaW5nUmVjdCA9IHsgbGVmdDogdC5sZWZ0ICsgZS5wYWRkaW5nTGVmdCArIGUuYm9yZGVyTGVmdFdpZHRoLCB0b3A6IHQudG9wICsgZS5wYWRkaW5nVG9wICsgZS5ib3JkZXJUb3BXaWR0aCwgcmlnaHQ6IHQucmlnaHQgLSAoZS5wYWRkaW5nUmlnaHQgKyBlLmJvcmRlclJpZ2h0V2lkdGgpLCBib3R0b206IHQuYm90dG9tIC0gKGUucGFkZGluZ0JvdHRvbSArIGUuYm9yZGVyQm90dG9tV2lkdGgpIH0gfSwgYy5fbWFuYWdlU3RhbXAgPSBkLCBjLl9nZXRFbGVtZW50T2Zmc2V0ID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBvID0gdGhpcy5fYm91bmRpbmdSZWN0LCBuID0gaSh0KSwgcyA9IHsgbGVmdDogZS5sZWZ0IC0gby5sZWZ0IC0gbi5tYXJnaW5MZWZ0LCB0b3A6IGUudG9wIC0gby50b3AgLSBuLm1hcmdpblRvcCwgcmlnaHQ6IG8ucmlnaHQgLSBlLnJpZ2h0IC0gbi5tYXJnaW5SaWdodCwgYm90dG9tOiBvLmJvdHRvbSAtIGUuYm90dG9tIC0gbi5tYXJnaW5Cb3R0b20gfTsgcmV0dXJuIHMgfSwgYy5oYW5kbGVFdmVudCA9IG8uaGFuZGxlRXZlbnQsIGMuYmluZFJlc2l6ZSA9IGZ1bmN0aW9uICgpIHsgdC5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMpLCB0aGlzLmlzUmVzaXplQm91bmQgPSAhMCB9LCBjLnVuYmluZFJlc2l6ZSA9IGZ1bmN0aW9uICgpIHsgdC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMpLCB0aGlzLmlzUmVzaXplQm91bmQgPSAhMSB9LCBjLm9ucmVzaXplID0gZnVuY3Rpb24gKCkgeyB0aGlzLnJlc2l6ZSgpIH0sIG8uZGVib3VuY2VNZXRob2QocywgXCJvbnJlc2l6ZVwiLCAxMDApLCBjLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5pc1Jlc2l6ZUJvdW5kICYmIHRoaXMubmVlZHNSZXNpemVMYXlvdXQoKSAmJiB0aGlzLmxheW91dCgpIH0sIGMubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbiAoKSB7IHZhciB0ID0gaSh0aGlzLmVsZW1lbnQpLCBlID0gdGhpcy5zaXplICYmIHQ7IHJldHVybiBlICYmIHQuaW5uZXJXaWR0aCAhPT0gdGhpcy5zaXplLmlubmVyV2lkdGggfSwgYy5hZGRJdGVtcyA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdGhpcy5faXRlbWl6ZSh0KTsgcmV0dXJuIGUubGVuZ3RoICYmICh0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5jb25jYXQoZSkpLCBlIH0sIGMuYXBwZW5kZWQgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHRoaXMuYWRkSXRlbXModCk7IGUubGVuZ3RoICYmICh0aGlzLmxheW91dEl0ZW1zKGUsICEwKSwgdGhpcy5yZXZlYWwoZSkpIH0sIGMucHJlcGVuZGVkID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLl9pdGVtaXplKHQpOyBpZiAoZS5sZW5ndGgpIHsgdmFyIGkgPSB0aGlzLml0ZW1zLnNsaWNlKDApOyB0aGlzLml0ZW1zID0gZS5jb25jYXQoaSksIHRoaXMuX3Jlc2V0TGF5b3V0KCksIHRoaXMuX21hbmFnZVN0YW1wcygpLCB0aGlzLmxheW91dEl0ZW1zKGUsICEwKSwgdGhpcy5yZXZlYWwoZSksIHRoaXMubGF5b3V0SXRlbXMoaSkgfSB9LCBjLnJldmVhbCA9IGZ1bmN0aW9uICh0KSB7IGlmICh0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKFwicmV2ZWFsXCIsIHQpLCB0ICYmIHQubGVuZ3RoKSB7IHZhciBlID0gdGhpcy51cGRhdGVTdGFnZ2VyKCk7IHQuZm9yRWFjaChmdW5jdGlvbiAodCwgaSkgeyB0LnN0YWdnZXIoaSAqIGUpLCB0LnJldmVhbCgpIH0pIH0gfSwgYy5oaWRlID0gZnVuY3Rpb24gKHQpIHsgaWYgKHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoXCJoaWRlXCIsIHQpLCB0ICYmIHQubGVuZ3RoKSB7IHZhciBlID0gdGhpcy51cGRhdGVTdGFnZ2VyKCk7IHQuZm9yRWFjaChmdW5jdGlvbiAodCwgaSkgeyB0LnN0YWdnZXIoaSAqIGUpLCB0LmhpZGUoKSB9KSB9IH0sIGMucmV2ZWFsSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLmdldEl0ZW1zKHQpOyB0aGlzLnJldmVhbChlKSB9LCBjLmhpZGVJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHRoaXMuZ2V0SXRlbXModCk7IHRoaXMuaGlkZShlKSB9LCBjLmdldEl0ZW0gPSBmdW5jdGlvbiAodCkgeyBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBlKyspIHsgdmFyIGkgPSB0aGlzLml0ZW1zW2VdOyBpZiAoaS5lbGVtZW50ID09IHQpIHJldHVybiBpIH0gfSwgYy5nZXRJdGVtcyA9IGZ1bmN0aW9uICh0KSB7IHQgPSBvLm1ha2VBcnJheSh0KTsgdmFyIGUgPSBbXTsgcmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbiAodCkgeyB2YXIgaSA9IHRoaXMuZ2V0SXRlbSh0KTsgaSAmJiBlLnB1c2goaSkgfSwgdGhpcyksIGUgfSwgYy5yZW1vdmUgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHRoaXMuZ2V0SXRlbXModCk7IHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoXCJyZW1vdmVcIiwgZSksIGUgJiYgZS5sZW5ndGggJiYgZS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7IHQucmVtb3ZlKCksIG8ucmVtb3ZlRnJvbSh0aGlzLml0ZW1zLCB0KSB9LCB0aGlzKSB9LCBjLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7IHZhciB0ID0gdGhpcy5lbGVtZW50LnN0eWxlOyB0LmhlaWdodCA9IFwiXCIsIHQucG9zaXRpb24gPSBcIlwiLCB0LndpZHRoID0gXCJcIiwgdGhpcy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7IHQuZGVzdHJveSgpIH0pLCB0aGlzLnVuYmluZFJlc2l6ZSgpOyB2YXIgZSA9IHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7IGRlbGV0ZSBmW2VdLCBkZWxldGUgdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRCwgaCAmJiBoLnJlbW92ZURhdGEodGhpcy5lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLm5hbWVzcGFjZSkgfSwgcy5kYXRhID0gZnVuY3Rpb24gKHQpIHsgdCA9IG8uZ2V0UXVlcnlFbGVtZW50KHQpOyB2YXIgZSA9IHQgJiYgdC5vdXRsYXllckdVSUQ7IHJldHVybiBlICYmIGZbZV0gfSwgcy5jcmVhdGUgPSBmdW5jdGlvbiAodCwgZSkgeyB2YXIgaSA9IHIocyk7IHJldHVybiBpLmRlZmF1bHRzID0gby5leHRlbmQoe30sIHMuZGVmYXVsdHMpLCBvLmV4dGVuZChpLmRlZmF1bHRzLCBlKSwgaS5jb21wYXRPcHRpb25zID0gby5leHRlbmQoe30sIHMuY29tcGF0T3B0aW9ucyksIGkubmFtZXNwYWNlID0gdCwgaS5kYXRhID0gcy5kYXRhLCBpLkl0ZW0gPSByKG4pLCBvLmh0bWxJbml0KGksIHQpLCBoICYmIGguYnJpZGdldCAmJiBoLmJyaWRnZXQodCwgaSksIGkgfTsgdmFyIG0gPSB7IG1zOiAxLCBzOiAxZTMgfTsgcmV0dXJuIHMuSXRlbSA9IG4sIHMgfSksIGZ1bmN0aW9uICh0LCBlKSB7IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoXCJpc290b3BlLWxheW91dC9qcy9pdGVtXCIsIFtcIm91dGxheWVyL291dGxheWVyXCJdLCBlKSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzID0gZShyZXF1aXJlKFwib3V0bGF5ZXJcIikpIDogKHQuSXNvdG9wZSA9IHQuSXNvdG9wZSB8fCB7fSwgdC5Jc290b3BlLkl0ZW0gPSBlKHQuT3V0bGF5ZXIpKSB9KHdpbmRvdywgZnVuY3Rpb24gKHQpIHsgXCJ1c2Ugc3RyaWN0XCI7IGZ1bmN0aW9uIGUoKSB7IHQuSXRlbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIH0gdmFyIGkgPSBlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5JdGVtLnByb3RvdHlwZSksIG8gPSBpLl9jcmVhdGU7IGkuX2NyZWF0ZSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5pZCA9IHRoaXMubGF5b3V0Lml0ZW1HVUlEKyssIG8uY2FsbCh0aGlzKSwgdGhpcy5zb3J0RGF0YSA9IHt9IH0sIGkudXBkYXRlU29ydERhdGEgPSBmdW5jdGlvbiAoKSB7IGlmICghdGhpcy5pc0lnbm9yZWQpIHsgdGhpcy5zb3J0RGF0YS5pZCA9IHRoaXMuaWQsIHRoaXMuc29ydERhdGFbXCJvcmlnaW5hbC1vcmRlclwiXSA9IHRoaXMuaWQsIHRoaXMuc29ydERhdGEucmFuZG9tID0gTWF0aC5yYW5kb20oKTsgdmFyIHQgPSB0aGlzLmxheW91dC5vcHRpb25zLmdldFNvcnREYXRhLCBlID0gdGhpcy5sYXlvdXQuX3NvcnRlcnM7IGZvciAodmFyIGkgaW4gdCkgeyB2YXIgbyA9IGVbaV07IHRoaXMuc29ydERhdGFbaV0gPSBvKHRoaXMuZWxlbWVudCwgdGhpcykgfSB9IH07IHZhciBuID0gaS5kZXN0cm95OyByZXR1cm4gaS5kZXN0cm95ID0gZnVuY3Rpb24gKCkgeyBuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXMuY3NzKHsgZGlzcGxheTogXCJcIiB9KSB9LCBlIH0pLCBmdW5jdGlvbiAodCwgZSkgeyBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVcIiwgW1wiZ2V0LXNpemUvZ2V0LXNpemVcIiwgXCJvdXRsYXllci9vdXRsYXllclwiXSwgZSkgOiBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMgPyBtb2R1bGUuZXhwb3J0cyA9IGUocmVxdWlyZShcImdldC1zaXplXCIpLCByZXF1aXJlKFwib3V0bGF5ZXJcIikpIDogKHQuSXNvdG9wZSA9IHQuSXNvdG9wZSB8fCB7fSwgdC5Jc290b3BlLkxheW91dE1vZGUgPSBlKHQuZ2V0U2l6ZSwgdC5PdXRsYXllcikpIH0od2luZG93LCBmdW5jdGlvbiAodCwgZSkgeyBcInVzZSBzdHJpY3RcIjsgZnVuY3Rpb24gaSh0KSB7IHRoaXMuaXNvdG9wZSA9IHQsIHQgJiYgKHRoaXMub3B0aW9ucyA9IHQub3B0aW9uc1t0aGlzLm5hbWVzcGFjZV0sIHRoaXMuZWxlbWVudCA9IHQuZWxlbWVudCwgdGhpcy5pdGVtcyA9IHQuZmlsdGVyZWRJdGVtcywgdGhpcy5zaXplID0gdC5zaXplKSB9IHZhciBvID0gaS5wcm90b3R5cGUsIG4gPSBbXCJfcmVzZXRMYXlvdXRcIiwgXCJfZ2V0SXRlbUxheW91dFBvc2l0aW9uXCIsIFwiX21hbmFnZVN0YW1wXCIsIFwiX2dldENvbnRhaW5lclNpemVcIiwgXCJfZ2V0RWxlbWVudE9mZnNldFwiLCBcIm5lZWRzUmVzaXplTGF5b3V0XCIsIFwiX2dldE9wdGlvblwiXTsgcmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbiAodCkgeyBvW3RdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZS5wcm90b3R5cGVbdF0uYXBwbHkodGhpcy5pc290b3BlLCBhcmd1bWVudHMpIH0gfSksIG8ubmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCA9IGZ1bmN0aW9uICgpIHsgdmFyIGUgPSB0KHRoaXMuaXNvdG9wZS5lbGVtZW50KSwgaSA9IHRoaXMuaXNvdG9wZS5zaXplICYmIGU7IHJldHVybiBpICYmIGUuaW5uZXJIZWlnaHQgIT0gdGhpcy5pc290b3BlLnNpemUuaW5uZXJIZWlnaHQgfSwgby5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbiAoKSB7IHRoaXMuaXNvdG9wZS5fZ2V0TWVhc3VyZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB9LCBvLmdldENvbHVtbldpZHRoID0gZnVuY3Rpb24gKCkgeyB0aGlzLmdldFNlZ21lbnRTaXplKFwiY29sdW1uXCIsIFwiV2lkdGhcIikgfSwgby5nZXRSb3dIZWlnaHQgPSBmdW5jdGlvbiAoKSB7IHRoaXMuZ2V0U2VnbWVudFNpemUoXCJyb3dcIiwgXCJIZWlnaHRcIikgfSwgby5nZXRTZWdtZW50U2l6ZSA9IGZ1bmN0aW9uICh0LCBlKSB7IHZhciBpID0gdCArIGUsIG8gPSBcIm91dGVyXCIgKyBlOyBpZiAodGhpcy5fZ2V0TWVhc3VyZW1lbnQoaSwgbyksICF0aGlzW2ldKSB7IHZhciBuID0gdGhpcy5nZXRGaXJzdEl0ZW1TaXplKCk7IHRoaXNbaV0gPSBuICYmIG5bb10gfHwgdGhpcy5pc290b3BlLnNpemVbXCJpbm5lclwiICsgZV0gfSB9LCBvLmdldEZpcnN0SXRlbVNpemUgPSBmdW5jdGlvbiAoKSB7IHZhciBlID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXNbMF07IHJldHVybiBlICYmIGUuZWxlbWVudCAmJiB0KGUuZWxlbWVudCkgfSwgby5sYXlvdXQgPSBmdW5jdGlvbiAoKSB7IHRoaXMuaXNvdG9wZS5sYXlvdXQuYXBwbHkodGhpcy5pc290b3BlLCBhcmd1bWVudHMpIH0sIG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5pc290b3BlLmdldFNpemUoKSwgdGhpcy5zaXplID0gdGhpcy5pc290b3BlLnNpemUgfSwgaS5tb2RlcyA9IHt9LCBpLmNyZWF0ZSA9IGZ1bmN0aW9uICh0LCBlKSB7IGZ1bmN0aW9uIG4oKSB7IGkuYXBwbHkodGhpcywgYXJndW1lbnRzKSB9IHJldHVybiBuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobyksIG4ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbiwgZSAmJiAobi5vcHRpb25zID0gZSksIG4ucHJvdG90eXBlLm5hbWVzcGFjZSA9IHQsIGkubW9kZXNbdF0gPSBuLCBuIH0sIGkgfSksIGZ1bmN0aW9uICh0LCBlKSB7IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoXCJtYXNvbnJ5LWxheW91dC9tYXNvbnJ5XCIsIFtcIm91dGxheWVyL291dGxheWVyXCIsIFwiZ2V0LXNpemUvZ2V0LXNpemVcIl0sIGUpIDogXCJvYmplY3RcIiA9PSB0eXBlb2YgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzID8gbW9kdWxlLmV4cG9ydHMgPSBlKHJlcXVpcmUoXCJvdXRsYXllclwiKSwgcmVxdWlyZShcImdldC1zaXplXCIpKSA6IHQuTWFzb25yeSA9IGUodC5PdXRsYXllciwgdC5nZXRTaXplKSB9KHdpbmRvdywgZnVuY3Rpb24gKHQsIGUpIHsgdmFyIGkgPSB0LmNyZWF0ZShcIm1hc29ucnlcIik7IGkuY29tcGF0T3B0aW9ucy5maXRXaWR0aCA9IFwiaXNGaXRXaWR0aFwiOyB2YXIgbyA9IGkucHJvdG90eXBlOyByZXR1cm4gby5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbiAoKSB7IHRoaXMuZ2V0U2l6ZSgpLCB0aGlzLl9nZXRNZWFzdXJlbWVudChcImNvbHVtbldpZHRoXCIsIFwib3V0ZXJXaWR0aFwiKSwgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoXCJndXR0ZXJcIiwgXCJvdXRlcldpZHRoXCIpLCB0aGlzLm1lYXN1cmVDb2x1bW5zKCksIHRoaXMuY29sWXMgPSBbXTsgZm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLmNvbHM7IHQrKyl0aGlzLmNvbFlzLnB1c2goMCk7IHRoaXMubWF4WSA9IDAsIHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ID0gMCB9LCBvLm1lYXN1cmVDb2x1bW5zID0gZnVuY3Rpb24gKCkgeyBpZiAodGhpcy5nZXRDb250YWluZXJXaWR0aCgpLCAhdGhpcy5jb2x1bW5XaWR0aCkgeyB2YXIgdCA9IHRoaXMuaXRlbXNbMF0sIGkgPSB0ICYmIHQuZWxlbWVudDsgdGhpcy5jb2x1bW5XaWR0aCA9IGkgJiYgZShpKS5vdXRlcldpZHRoIHx8IHRoaXMuY29udGFpbmVyV2lkdGggfSB2YXIgbyA9IHRoaXMuY29sdW1uV2lkdGggKz0gdGhpcy5ndXR0ZXIsIG4gPSB0aGlzLmNvbnRhaW5lcldpZHRoICsgdGhpcy5ndXR0ZXIsIHMgPSBuIC8gbywgciA9IG8gLSBuICUgbywgYSA9IHIgJiYgciA8IDEgPyBcInJvdW5kXCIgOiBcImZsb29yXCI7IHMgPSBNYXRoW2FdKHMpLCB0aGlzLmNvbHMgPSBNYXRoLm1heChzLCAxKSB9LCBvLmdldENvbnRhaW5lcldpZHRoID0gZnVuY3Rpb24gKCkgeyB2YXIgdCA9IHRoaXMuX2dldE9wdGlvbihcImZpdFdpZHRoXCIpLCBpID0gdCA/IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIDogdGhpcy5lbGVtZW50LCBvID0gZShpKTsgdGhpcy5jb250YWluZXJXaWR0aCA9IG8gJiYgby5pbm5lcldpZHRoIH0sIG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uICh0KSB7IHQuZ2V0U2l6ZSgpOyB2YXIgZSA9IHQuc2l6ZS5vdXRlcldpZHRoICUgdGhpcy5jb2x1bW5XaWR0aCwgaSA9IGUgJiYgZSA8IDEgPyBcInJvdW5kXCIgOiBcImNlaWxcIiwgbyA9IE1hdGhbaV0odC5zaXplLm91dGVyV2lkdGggLyB0aGlzLmNvbHVtbldpZHRoKTsgbyA9IE1hdGgubWluKG8sIHRoaXMuY29scyk7IGZvciAodmFyIG4gPSB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbE9yZGVyID8gXCJfZ2V0SG9yaXpvbnRhbENvbFBvc2l0aW9uXCIgOiBcIl9nZXRUb3BDb2xQb3NpdGlvblwiLCBzID0gdGhpc1tuXShvLCB0KSwgciA9IHsgeDogdGhpcy5jb2x1bW5XaWR0aCAqIHMuY29sLCB5OiBzLnkgfSwgYSA9IHMueSArIHQuc2l6ZS5vdXRlckhlaWdodCwgdSA9IG8gKyBzLmNvbCwgaCA9IHMuY29sOyBoIDwgdTsgaCsrKXRoaXMuY29sWXNbaF0gPSBhOyByZXR1cm4gciB9LCBvLl9nZXRUb3BDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdGhpcy5fZ2V0VG9wQ29sR3JvdXAodCksIGkgPSBNYXRoLm1pbi5hcHBseShNYXRoLCBlKTsgcmV0dXJuIHsgY29sOiBlLmluZGV4T2YoaSksIHk6IGkgfSB9LCBvLl9nZXRUb3BDb2xHcm91cCA9IGZ1bmN0aW9uICh0KSB7IGlmICh0IDwgMikgcmV0dXJuIHRoaXMuY29sWXM7IGZvciAodmFyIGUgPSBbXSwgaSA9IHRoaXMuY29scyArIDEgLSB0LCBvID0gMDsgbyA8IGk7IG8rKyllW29dID0gdGhpcy5fZ2V0Q29sR3JvdXBZKG8sIHQpOyByZXR1cm4gZSB9LCBvLl9nZXRDb2xHcm91cFkgPSBmdW5jdGlvbiAodCwgZSkgeyBpZiAoZSA8IDIpIHJldHVybiB0aGlzLmNvbFlzW3RdOyB2YXIgaSA9IHRoaXMuY29sWXMuc2xpY2UodCwgdCArIGUpOyByZXR1cm4gTWF0aC5tYXguYXBwbHkoTWF0aCwgaSkgfSwgby5fZ2V0SG9yaXpvbnRhbENvbFBvc2l0aW9uID0gZnVuY3Rpb24gKHQsIGUpIHsgdmFyIGkgPSB0aGlzLmhvcml6b250YWxDb2xJbmRleCAlIHRoaXMuY29scywgbyA9IHQgPiAxICYmIGkgKyB0ID4gdGhpcy5jb2xzOyBpID0gbyA/IDAgOiBpOyB2YXIgbiA9IGUuc2l6ZS5vdXRlcldpZHRoICYmIGUuc2l6ZS5vdXRlckhlaWdodDsgcmV0dXJuIHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ID0gbiA/IGkgKyB0IDogdGhpcy5ob3Jpem9udGFsQ29sSW5kZXgsIHsgY29sOiBpLCB5OiB0aGlzLl9nZXRDb2xHcm91cFkoaSwgdCkgfSB9LCBvLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uICh0KSB7IHZhciBpID0gZSh0KSwgbyA9IHRoaXMuX2dldEVsZW1lbnRPZmZzZXQodCksIG4gPSB0aGlzLl9nZXRPcHRpb24oXCJvcmlnaW5MZWZ0XCIpLCBzID0gbiA/IG8ubGVmdCA6IG8ucmlnaHQsIHIgPSBzICsgaS5vdXRlcldpZHRoLCBhID0gTWF0aC5mbG9vcihzIC8gdGhpcy5jb2x1bW5XaWR0aCk7IGEgPSBNYXRoLm1heCgwLCBhKTsgdmFyIHUgPSBNYXRoLmZsb29yKHIgLyB0aGlzLmNvbHVtbldpZHRoKTsgdSAtPSByICUgdGhpcy5jb2x1bW5XaWR0aCA/IDAgOiAxLCB1ID0gTWF0aC5taW4odGhpcy5jb2xzIC0gMSwgdSk7IGZvciAodmFyIGggPSB0aGlzLl9nZXRPcHRpb24oXCJvcmlnaW5Ub3BcIiksIGQgPSAoaCA/IG8udG9wIDogby5ib3R0b20pICsgaS5vdXRlckhlaWdodCwgbCA9IGE7IGwgPD0gdTsgbCsrKXRoaXMuY29sWXNbbF0gPSBNYXRoLm1heChkLCB0aGlzLmNvbFlzW2xdKSB9LCBvLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24gKCkgeyB0aGlzLm1heFkgPSBNYXRoLm1heC5hcHBseShNYXRoLCB0aGlzLmNvbFlzKTsgdmFyIHQgPSB7IGhlaWdodDogdGhpcy5tYXhZIH07IHJldHVybiB0aGlzLl9nZXRPcHRpb24oXCJmaXRXaWR0aFwiKSAmJiAodC53aWR0aCA9IHRoaXMuX2dldENvbnRhaW5lckZpdFdpZHRoKCkpLCB0IH0sIG8uX2dldENvbnRhaW5lckZpdFdpZHRoID0gZnVuY3Rpb24gKCkgeyBmb3IgKHZhciB0ID0gMCwgZSA9IHRoaXMuY29sczsgLS1lICYmIDAgPT09IHRoaXMuY29sWXNbZV07KXQrKzsgcmV0dXJuICh0aGlzLmNvbHMgLSB0KSAqIHRoaXMuY29sdW1uV2lkdGggLSB0aGlzLmd1dHRlciB9LCBvLm5lZWRzUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24gKCkgeyB2YXIgdCA9IHRoaXMuY29udGFpbmVyV2lkdGg7IHJldHVybiB0aGlzLmdldENvbnRhaW5lcldpZHRoKCksIHQgIT0gdGhpcy5jb250YWluZXJXaWR0aCB9LCBpIH0pLCBmdW5jdGlvbiAodCwgZSkgeyBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL21hc29ucnlcIiwgW1wiLi4vbGF5b3V0LW1vZGVcIiwgXCJtYXNvbnJ5LWxheW91dC9tYXNvbnJ5XCJdLCBlKSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzID0gZShyZXF1aXJlKFwiLi4vbGF5b3V0LW1vZGVcIiksIHJlcXVpcmUoXCJtYXNvbnJ5LWxheW91dFwiKSkgOiBlKHQuSXNvdG9wZS5MYXlvdXRNb2RlLCB0Lk1hc29ucnkpIH0od2luZG93LCBmdW5jdGlvbiAodCwgZSkgeyBcInVzZSBzdHJpY3RcIjsgdmFyIGkgPSB0LmNyZWF0ZShcIm1hc29ucnlcIiksIG8gPSBpLnByb3RvdHlwZSwgbiA9IHsgX2dldEVsZW1lbnRPZmZzZXQ6ICEwLCBsYXlvdXQ6ICEwLCBfZ2V0TWVhc3VyZW1lbnQ6ICEwIH07IGZvciAodmFyIHMgaW4gZS5wcm90b3R5cGUpIG5bc10gfHwgKG9bc10gPSBlLnByb3RvdHlwZVtzXSk7IHZhciByID0gby5tZWFzdXJlQ29sdW1uczsgby5tZWFzdXJlQ29sdW1ucyA9IGZ1bmN0aW9uICgpIHsgdGhpcy5pdGVtcyA9IHRoaXMuaXNvdG9wZS5maWx0ZXJlZEl0ZW1zLCByLmNhbGwodGhpcykgfTsgdmFyIGEgPSBvLl9nZXRPcHRpb247IHJldHVybiBvLl9nZXRPcHRpb24gPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gXCJmaXRXaWR0aFwiID09IHQgPyB2b2lkIDAgIT09IHRoaXMub3B0aW9ucy5pc0ZpdFdpZHRoID8gdGhpcy5vcHRpb25zLmlzRml0V2lkdGggOiB0aGlzLm9wdGlvbnMuZml0V2lkdGggOiBhLmFwcGx5KHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzKSB9LCBpIH0pLCBmdW5jdGlvbiAodCwgZSkgeyBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzXCIsIFtcIi4uL2xheW91dC1tb2RlXCJdLCBlKSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgPyBtb2R1bGUuZXhwb3J0cyA9IGUocmVxdWlyZShcIi4uL2xheW91dC1tb2RlXCIpKSA6IGUodC5Jc290b3BlLkxheW91dE1vZGUpIH0od2luZG93LCBmdW5jdGlvbiAodCkgeyBcInVzZSBzdHJpY3RcIjsgdmFyIGUgPSB0LmNyZWF0ZShcImZpdFJvd3NcIiksIGkgPSBlLnByb3RvdHlwZTsgcmV0dXJuIGkuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24gKCkgeyB0aGlzLnggPSAwLCB0aGlzLnkgPSAwLCB0aGlzLm1heFkgPSAwLCB0aGlzLl9nZXRNZWFzdXJlbWVudChcImd1dHRlclwiLCBcIm91dGVyV2lkdGhcIikgfSwgaS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24gKHQpIHsgdC5nZXRTaXplKCk7IHZhciBlID0gdC5zaXplLm91dGVyV2lkdGggKyB0aGlzLmd1dHRlciwgaSA9IHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGggKyB0aGlzLmd1dHRlcjsgMCAhPT0gdGhpcy54ICYmIGUgKyB0aGlzLnggPiBpICYmICh0aGlzLnggPSAwLCB0aGlzLnkgPSB0aGlzLm1heFkpOyB2YXIgbyA9IHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfTsgcmV0dXJuIHRoaXMubWF4WSA9IE1hdGgubWF4KHRoaXMubWF4WSwgdGhpcy55ICsgdC5zaXplLm91dGVySGVpZ2h0KSwgdGhpcy54ICs9IGUsIG8gfSwgaS5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLm1heFkgfSB9LCBlIH0pLCBmdW5jdGlvbiAodCwgZSkgeyBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsXCIsIFtcIi4uL2xheW91dC1tb2RlXCJdLCBlKSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzID0gZShyZXF1aXJlKFwiLi4vbGF5b3V0LW1vZGVcIikpIDogZSh0Lklzb3RvcGUuTGF5b3V0TW9kZSkgfSh3aW5kb3csIGZ1bmN0aW9uICh0KSB7IFwidXNlIHN0cmljdFwiOyB2YXIgZSA9IHQuY3JlYXRlKFwidmVydGljYWxcIiwgeyBob3Jpem9udGFsQWxpZ25tZW50OiAwIH0pLCBpID0gZS5wcm90b3R5cGU7IHJldHVybiBpLl9yZXNldExheW91dCA9IGZ1bmN0aW9uICgpIHsgdGhpcy55ID0gMCB9LCBpLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiAodCkgeyB0LmdldFNpemUoKTsgdmFyIGUgPSAodGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aCAtIHQuc2l6ZS5vdXRlcldpZHRoKSAqIHRoaXMub3B0aW9ucy5ob3Jpem9udGFsQWxpZ25tZW50LCBpID0gdGhpcy55OyByZXR1cm4gdGhpcy55ICs9IHQuc2l6ZS5vdXRlckhlaWdodCwgeyB4OiBlLCB5OiBpIH0gfSwgaS5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLnkgfSB9LCBlIH0pLCBmdW5jdGlvbiAodCwgZSkgeyBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFtcIm91dGxheWVyL291dGxheWVyXCIsIFwiZ2V0LXNpemUvZ2V0LXNpemVcIiwgXCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3JcIiwgXCJmaXp6eS11aS11dGlscy91dGlsc1wiLCBcImlzb3RvcGUtbGF5b3V0L2pzL2l0ZW1cIiwgXCJpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZVwiLCBcImlzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5XCIsIFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzXCIsIFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsXCJdLCBmdW5jdGlvbiAoaSwgbywgbiwgcywgciwgYSkgeyByZXR1cm4gZSh0LCBpLCBvLCBuLCBzLCByLCBhKSB9KSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzID0gZSh0LCByZXF1aXJlKFwib3V0bGF5ZXJcIiksIHJlcXVpcmUoXCJnZXQtc2l6ZVwiKSwgcmVxdWlyZShcImRlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3JcIiksIHJlcXVpcmUoXCJmaXp6eS11aS11dGlsc1wiKSwgcmVxdWlyZShcImlzb3RvcGUtbGF5b3V0L2pzL2l0ZW1cIiksIHJlcXVpcmUoXCJpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZVwiKSwgcmVxdWlyZShcImlzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5XCIpLCByZXF1aXJlKFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzXCIpLCByZXF1aXJlKFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsXCIpKSA6IHQuSXNvdG9wZSA9IGUodCwgdC5PdXRsYXllciwgdC5nZXRTaXplLCB0Lm1hdGNoZXNTZWxlY3RvciwgdC5maXp6eVVJVXRpbHMsIHQuSXNvdG9wZS5JdGVtLCB0Lklzb3RvcGUuTGF5b3V0TW9kZSkgfSh3aW5kb3csIGZ1bmN0aW9uICh0LCBlLCBpLCBvLCBuLCBzLCByKSB7XHJcbiAgZnVuY3Rpb24gYSh0LCBlKSB7IHJldHVybiBmdW5jdGlvbiAoaSwgbykgeyBmb3IgKHZhciBuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspIHsgdmFyIHMgPSB0W25dLCByID0gaS5zb3J0RGF0YVtzXSwgYSA9IG8uc29ydERhdGFbc107IGlmIChyID4gYSB8fCByIDwgYSkgeyB2YXIgdSA9IHZvaWQgMCAhPT0gZVtzXSA/IGVbc10gOiBlLCBoID0gdSA/IDEgOiAtMTsgcmV0dXJuIChyID4gYSA/IDEgOiAtMSkgKiBoIH0gfSByZXR1cm4gMCB9IH0gdmFyIHUgPSB0LmpRdWVyeSwgaCA9IFN0cmluZy5wcm90b3R5cGUudHJpbSA/IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnRyaW0oKSB9IDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgXCJcIikgfSwgZCA9IGUuY3JlYXRlKFwiaXNvdG9wZVwiLCB7IGxheW91dE1vZGU6IFwibWFzb25yeVwiLCBpc0pRdWVyeUZpbHRlcmluZzogITAsIHNvcnRBc2NlbmRpbmc6ICEwIH0pOyBkLkl0ZW0gPSBzLCBkLkxheW91dE1vZGUgPSByOyB2YXIgbCA9IGQucHJvdG90eXBlOyBsLl9jcmVhdGUgPSBmdW5jdGlvbiAoKSB7IHRoaXMuaXRlbUdVSUQgPSAwLCB0aGlzLl9zb3J0ZXJzID0ge30sIHRoaXMuX2dldFNvcnRlcnMoKSwgZS5wcm90b3R5cGUuX2NyZWF0ZS5jYWxsKHRoaXMpLCB0aGlzLm1vZGVzID0ge30sIHRoaXMuZmlsdGVyZWRJdGVtcyA9IHRoaXMuaXRlbXMsIHRoaXMuc29ydEhpc3RvcnkgPSBbXCJvcmlnaW5hbC1vcmRlclwiXTsgZm9yICh2YXIgdCBpbiByLm1vZGVzKSB0aGlzLl9pbml0TGF5b3V0TW9kZSh0KSB9LCBsLnJlbG9hZEl0ZW1zID0gZnVuY3Rpb24gKCkgeyB0aGlzLml0ZW1HVUlEID0gMCwgZS5wcm90b3R5cGUucmVsb2FkSXRlbXMuY2FsbCh0aGlzKSB9LCBsLl9pdGVtaXplID0gZnVuY3Rpb24gKCkgeyBmb3IgKHZhciB0ID0gZS5wcm90b3R5cGUuX2l0ZW1pemUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSsrKSB7IHZhciBvID0gdFtpXTsgby5pZCA9IHRoaXMuaXRlbUdVSUQrKyB9IHJldHVybiB0aGlzLl91cGRhdGVJdGVtc1NvcnREYXRhKHQpLCB0IH0sIGwuX2luaXRMYXlvdXRNb2RlID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSByLm1vZGVzW3RdLCBpID0gdGhpcy5vcHRpb25zW3RdIHx8IHt9OyB0aGlzLm9wdGlvbnNbdF0gPSBlLm9wdGlvbnMgPyBuLmV4dGVuZChlLm9wdGlvbnMsIGkpIDogaSwgdGhpcy5tb2Rlc1t0XSA9IG5ldyBlKHRoaXMpIH0sIGwubGF5b3V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gIXRoaXMuX2lzTGF5b3V0SW5pdGVkICYmIHRoaXMuX2dldE9wdGlvbihcImluaXRMYXlvdXRcIikgPyB2b2lkIHRoaXMuYXJyYW5nZSgpIDogdm9pZCB0aGlzLl9sYXlvdXQoKSB9LCBsLl9sYXlvdXQgPSBmdW5jdGlvbiAoKSB7IHZhciB0ID0gdGhpcy5fZ2V0SXNJbnN0YW50KCk7IHRoaXMuX3Jlc2V0TGF5b3V0KCksIHRoaXMuX21hbmFnZVN0YW1wcygpLCB0aGlzLmxheW91dEl0ZW1zKHRoaXMuZmlsdGVyZWRJdGVtcywgdCksIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gITAgfSwgbC5hcnJhbmdlID0gZnVuY3Rpb24gKHQpIHsgdGhpcy5vcHRpb24odCksIHRoaXMuX2dldElzSW5zdGFudCgpOyB2YXIgZSA9IHRoaXMuX2ZpbHRlcih0aGlzLml0ZW1zKTsgdGhpcy5maWx0ZXJlZEl0ZW1zID0gZS5tYXRjaGVzLCB0aGlzLl9iaW5kQXJyYW5nZUNvbXBsZXRlKCksIHRoaXMuX2lzSW5zdGFudCA/IHRoaXMuX25vVHJhbnNpdGlvbih0aGlzLl9oaWRlUmV2ZWFsLCBbZV0pIDogdGhpcy5faGlkZVJldmVhbChlKSwgdGhpcy5fc29ydCgpLCB0aGlzLl9sYXlvdXQoKSB9LCBsLl9pbml0ID0gbC5hcnJhbmdlLCBsLl9oaWRlUmV2ZWFsID0gZnVuY3Rpb24gKHQpIHsgdGhpcy5yZXZlYWwodC5uZWVkUmV2ZWFsKSwgdGhpcy5oaWRlKHQubmVlZEhpZGUpIH0sIGwuX2dldElzSW5zdGFudCA9IGZ1bmN0aW9uICgpIHsgdmFyIHQgPSB0aGlzLl9nZXRPcHRpb24oXCJsYXlvdXRJbnN0YW50XCIpLCBlID0gdm9pZCAwICE9PSB0ID8gdCA6ICF0aGlzLl9pc0xheW91dEluaXRlZDsgcmV0dXJuIHRoaXMuX2lzSW5zdGFudCA9IGUsIGUgfSwgbC5fYmluZEFycmFuZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gdCgpIHsgZSAmJiBpICYmIG8gJiYgbi5kaXNwYXRjaEV2ZW50KFwiYXJyYW5nZUNvbXBsZXRlXCIsIG51bGwsIFtuLmZpbHRlcmVkSXRlbXNdKSB9IHZhciBlLCBpLCBvLCBuID0gdGhpczsgdGhpcy5vbmNlKFwibGF5b3V0Q29tcGxldGVcIiwgZnVuY3Rpb24gKCkgeyBlID0gITAsIHQoKSB9KSwgdGhpcy5vbmNlKFwiaGlkZUNvbXBsZXRlXCIsIGZ1bmN0aW9uICgpIHsgaSA9ICEwLCB0KCkgfSksIHRoaXMub25jZShcInJldmVhbENvbXBsZXRlXCIsIGZ1bmN0aW9uICgpIHsgbyA9ICEwLCB0KCkgfSkgfSwgbC5fZmlsdGVyID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLm9wdGlvbnMuZmlsdGVyOyBlID0gZSB8fCBcIipcIjsgZm9yICh2YXIgaSA9IFtdLCBvID0gW10sIG4gPSBbXSwgcyA9IHRoaXMuX2dldEZpbHRlclRlc3QoZSksIHIgPSAwOyByIDwgdC5sZW5ndGg7IHIrKykgeyB2YXIgYSA9IHRbcl07IGlmICghYS5pc0lnbm9yZWQpIHsgdmFyIHUgPSBzKGEpOyB1ICYmIGkucHVzaChhKSwgdSAmJiBhLmlzSGlkZGVuID8gby5wdXNoKGEpIDogdSB8fCBhLmlzSGlkZGVuIHx8IG4ucHVzaChhKSB9IH0gcmV0dXJuIHsgbWF0Y2hlczogaSwgbmVlZFJldmVhbDogbywgbmVlZEhpZGU6IG4gfSB9LCBsLl9nZXRGaWx0ZXJUZXN0ID0gZnVuY3Rpb24gKHQpIHtcclxuICAgIHJldHVybiB1ICYmIHRoaXMub3B0aW9ucy5pc0pRdWVyeUZpbHRlcmluZyA/IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIHJldHVybiB1KGUuZWxlbWVudCkuaXModCk7XHJcbiAgICB9IDogXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHQoZS5lbGVtZW50KSB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG8oZS5lbGVtZW50LCB0KSB9XHJcbiAgfSwgbC51cGRhdGVTb3J0RGF0YSA9IGZ1bmN0aW9uICh0KSB7IHZhciBlOyB0ID8gKHQgPSBuLm1ha2VBcnJheSh0KSwgZSA9IHRoaXMuZ2V0SXRlbXModCkpIDogZSA9IHRoaXMuaXRlbXMsIHRoaXMuX2dldFNvcnRlcnMoKSwgdGhpcy5fdXBkYXRlSXRlbXNTb3J0RGF0YShlKSB9LCBsLl9nZXRTb3J0ZXJzID0gZnVuY3Rpb24gKCkgeyB2YXIgdCA9IHRoaXMub3B0aW9ucy5nZXRTb3J0RGF0YTsgZm9yICh2YXIgZSBpbiB0KSB7IHZhciBpID0gdFtlXTsgdGhpcy5fc29ydGVyc1tlXSA9IGYoaSkgfSB9LCBsLl91cGRhdGVJdGVtc1NvcnREYXRhID0gZnVuY3Rpb24gKHQpIHsgZm9yICh2YXIgZSA9IHQgJiYgdC5sZW5ndGgsIGkgPSAwOyBlICYmIGkgPCBlOyBpKyspIHsgdmFyIG8gPSB0W2ldOyBvLnVwZGF0ZVNvcnREYXRhKCkgfSB9OyB2YXIgZiA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gdCh0KSB7IGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiB0KSByZXR1cm4gdDsgdmFyIGkgPSBoKHQpLnNwbGl0KFwiIFwiKSwgbyA9IGlbMF0sIG4gPSBvLm1hdGNoKC9eXFxbKC4rKVxcXSQvKSwgcyA9IG4gJiYgblsxXSwgciA9IGUocywgbyksIGEgPSBkLnNvcnREYXRhUGFyc2Vyc1tpWzFdXTsgcmV0dXJuIHQgPSBhID8gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQgJiYgYShyKHQpKSB9IDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQgJiYgcih0KSB9IH0gZnVuY3Rpb24gZSh0LCBlKSB7IHJldHVybiB0ID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQpIH0gOiBmdW5jdGlvbiAodCkgeyB2YXIgaSA9IHQucXVlcnlTZWxlY3RvcihlKTsgcmV0dXJuIGkgJiYgaS50ZXh0Q29udGVudCB9IH0gcmV0dXJuIHQgfSgpOyBkLnNvcnREYXRhUGFyc2VycyA9IHsgcGFyc2VJbnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiBwYXJzZUludCh0LCAxMCkgfSwgcGFyc2VGbG9hdDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHBhcnNlRmxvYXQodCkgfSB9LCBsLl9zb3J0ID0gZnVuY3Rpb24gKCkgeyBpZiAodGhpcy5vcHRpb25zLnNvcnRCeSkgeyB2YXIgdCA9IG4ubWFrZUFycmF5KHRoaXMub3B0aW9ucy5zb3J0QnkpOyB0aGlzLl9nZXRJc1NhbWVTb3J0QnkodCkgfHwgKHRoaXMuc29ydEhpc3RvcnkgPSB0LmNvbmNhdCh0aGlzLnNvcnRIaXN0b3J5KSk7IHZhciBlID0gYSh0aGlzLnNvcnRIaXN0b3J5LCB0aGlzLm9wdGlvbnMuc29ydEFzY2VuZGluZyk7IHRoaXMuZmlsdGVyZWRJdGVtcy5zb3J0KGUpIH0gfSwgbC5fZ2V0SXNTYW1lU29ydEJ5ID0gZnVuY3Rpb24gKHQpIHsgZm9yICh2YXIgZSA9IDA7IGUgPCB0Lmxlbmd0aDsgZSsrKWlmICh0W2VdICE9IHRoaXMuc29ydEhpc3RvcnlbZV0pIHJldHVybiAhMTsgcmV0dXJuICEwIH0sIGwuX21vZGUgPSBmdW5jdGlvbiAoKSB7IHZhciB0ID0gdGhpcy5vcHRpb25zLmxheW91dE1vZGUsIGUgPSB0aGlzLm1vZGVzW3RdOyBpZiAoIWUpIHRocm93IG5ldyBFcnJvcihcIk5vIGxheW91dCBtb2RlOiBcIiArIHQpOyByZXR1cm4gZS5vcHRpb25zID0gdGhpcy5vcHRpb25zW3RdLCBlIH0sIGwuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24gKCkgeyBlLnByb3RvdHlwZS5fcmVzZXRMYXlvdXQuY2FsbCh0aGlzKSwgdGhpcy5fbW9kZSgpLl9yZXNldExheW91dCgpIH0sIGwuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0aGlzLl9tb2RlKCkuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbih0KSB9LCBsLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uICh0KSB7IHRoaXMuX21vZGUoKS5fbWFuYWdlU3RhbXAodCkgfSwgbC5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0Q29udGFpbmVyU2l6ZSgpIH0sIGwubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tb2RlKCkubmVlZHNSZXNpemVMYXlvdXQoKSB9LCBsLmFwcGVuZGVkID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLmFkZEl0ZW1zKHQpOyBpZiAoZS5sZW5ndGgpIHsgdmFyIGkgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZChlKTsgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5maWx0ZXJlZEl0ZW1zLmNvbmNhdChpKSB9IH0sIGwucHJlcGVuZGVkID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLl9pdGVtaXplKHQpOyBpZiAoZS5sZW5ndGgpIHsgdGhpcy5fcmVzZXRMYXlvdXQoKSwgdGhpcy5fbWFuYWdlU3RhbXBzKCk7IHZhciBpID0gdGhpcy5fZmlsdGVyUmV2ZWFsQWRkZWQoZSk7IHRoaXMubGF5b3V0SXRlbXModGhpcy5maWx0ZXJlZEl0ZW1zKSwgdGhpcy5maWx0ZXJlZEl0ZW1zID0gaS5jb25jYXQodGhpcy5maWx0ZXJlZEl0ZW1zKSwgdGhpcy5pdGVtcyA9IGUuY29uY2F0KHRoaXMuaXRlbXMpIH0gfSwgbC5fZmlsdGVyUmV2ZWFsQWRkZWQgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHRoaXMuX2ZpbHRlcih0KTsgcmV0dXJuIHRoaXMuaGlkZShlLm5lZWRIaWRlKSwgdGhpcy5yZXZlYWwoZS5tYXRjaGVzKSwgdGhpcy5sYXlvdXRJdGVtcyhlLm1hdGNoZXMsICEwKSwgZS5tYXRjaGVzIH0sIGwuaW5zZXJ0ID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLmFkZEl0ZW1zKHQpOyBpZiAoZS5sZW5ndGgpIHsgdmFyIGksIG8sIG4gPSBlLmxlbmd0aDsgZm9yIChpID0gMDsgaSA8IG47IGkrKylvID0gZVtpXSwgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKG8uZWxlbWVudCk7IHZhciBzID0gdGhpcy5fZmlsdGVyKGUpLm1hdGNoZXM7IGZvciAoaSA9IDA7IGkgPCBuOyBpKyspZVtpXS5pc0xheW91dEluc3RhbnQgPSAhMDsgZm9yICh0aGlzLmFycmFuZ2UoKSwgaSA9IDA7IGkgPCBuOyBpKyspZGVsZXRlIGVbaV0uaXNMYXlvdXRJbnN0YW50OyB0aGlzLnJldmVhbChzKSB9IH07IHZhciBjID0gbC5yZW1vdmU7IHJldHVybiBsLnJlbW92ZSA9IGZ1bmN0aW9uICh0KSB7IHQgPSBuLm1ha2VBcnJheSh0KTsgdmFyIGUgPSB0aGlzLmdldEl0ZW1zKHQpOyBjLmNhbGwodGhpcywgdCk7IGZvciAodmFyIGkgPSBlICYmIGUubGVuZ3RoLCBvID0gMDsgaSAmJiBvIDwgaTsgbysrKSB7IHZhciBzID0gZVtvXTsgbi5yZW1vdmVGcm9tKHRoaXMuZmlsdGVyZWRJdGVtcywgcykgfSB9LCBsLnNodWZmbGUgPSBmdW5jdGlvbiAoKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5pdGVtcy5sZW5ndGg7IHQrKykgeyB2YXIgZSA9IHRoaXMuaXRlbXNbdF07IGUuc29ydERhdGEucmFuZG9tID0gTWF0aC5yYW5kb20oKSB9IHRoaXMub3B0aW9ucy5zb3J0QnkgPSBcInJhbmRvbVwiLCB0aGlzLl9zb3J0KCksIHRoaXMuX2xheW91dCgpIH0sIGwuX25vVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICh0LCBlKSB7IHZhciBpID0gdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbjsgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7IHZhciBvID0gdC5hcHBseSh0aGlzLCBlKTsgcmV0dXJuIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gPSBpLCBvIH0sIGwuZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZpbHRlcmVkSXRlbXMubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LmVsZW1lbnQgfSkgfSwgZFxyXG59KTsiLCIvKlxyXG5UZW1wbGF0ZSBOYW1lOiBNYXNzaXZlXHJcbkF1dGhvcjogR3JheUdyaWRzXHJcbiovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgLy89PT09PSBQcmVhbG9kZXJcclxuXHJcbiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZhZGVvdXQsIDUwMCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGZhZGVvdXQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZWxvYWRlcicpLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZWxvYWRlcicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcblxyXG4gICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICBTdGlja3lcclxuICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4gICAgd2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBoZWFkZXJfbmF2YmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItYXJlYVwiKTtcclxuICAgICAgICB2YXIgc3RpY2t5ID0gaGVhZGVyX25hdmJhci5vZmZzZXRUb3A7XHJcblxyXG4gICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiBzdGlja3kpIHtcclxuICAgICAgICAgICAgaGVhZGVyX25hdmJhci5jbGFzc0xpc3QuYWRkKFwic3RpY2t5XCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGhlYWRlcl9uYXZiYXIuY2xhc3NMaXN0LnJlbW92ZShcInN0aWNreVwiKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gc2hvdyBvciBoaWRlIHRoZSBiYWNrLXRvcC10b3AgYnV0dG9uXHJcbiAgICAgICAgdmFyIGJhY2tUb1RvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2Nyb2xsLXRvcFwiKTtcclxuICAgICAgICBpZiAoZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPiA1MCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID4gNTApIHtcclxuICAgICAgICAgICAgYmFja1RvVG9wLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBiYWNrVG9Ub3Auc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gZm9yIG1lbnUgc2Nyb2xsXHJcbiAgICB2YXIgcGFnZUxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGFnZS1zY3JvbGwnKTtcclxuXHJcbiAgICBwYWdlTGluay5mb3JFYWNoKGVsZW0gPT4ge1xyXG4gICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW0uZ2V0QXR0cmlidXRlKCdocmVmJykpLnNjcm9sbEludG9WaWV3KHtcclxuICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIG9mZnNldFRvcDogMSAtIDYwLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vPT09PT0gY2xvc2UgbmF2YmFyLWNvbGxhcHNlIHdoZW4gYSAgY2xpY2tlZFxyXG4gICAgLy8gbGV0IG5hdmJhclRvZ2dsZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdmJhci10b2dnbGVyXCIpO1xyXG4gICAgLy8gdmFyIG5hdmJhckNvbGxhcHNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb2xsYXBzZVwiKTtcclxuXHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBhZ2Utc2Nyb2xsXCIpLmZvckVhY2goZSA9PlxyXG4gICAgLy8gICAgIGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgIC8vICAgICAgICAgbmF2YmFyVG9nZ2xlci5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgLy8gICAgICAgICBuYXZiYXJDb2xsYXBzZS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcclxuICAgIC8vICAgICB9KVxyXG4gICAgLy8gKTtcclxuICAgIC8vIG5hdmJhclRvZ2dsZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyAgICAgbmF2YmFyVG9nZ2xlci5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZlXCIpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBXT1cgYWN0aXZlXHJcblxyXG4gICAgLy8gbmV3IFdPVygpLmluaXQoKTtcclxuICAgIGxldCBmaWx0ZXJCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bicpO1xyXG4gICAgZmlsdGVyQnV0dG9ucy5mb3JFYWNoKGUgPT5cclxuICAgICAgICBlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IGZpbHRlclZhbHVlID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1maWx0ZXInKTtcclxuICAgICAgICAgICAgaXNvLmFycmFuZ2Uoe1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXJWYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwicG9ydGZvbGlvLWJ0blwiKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBlbGVtZW50c1tpXS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZWwgPSBlbGVtZW50c1swXTtcclxuICAgICAgICAgICAgd2hpbGUgKGVsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwudGFnTmFtZSA9PT0gXCJCVVRUT05cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbCA9IGVsLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vPT09PT09IGNvdW50ZXIgdXBcclxuICAgIC8vIHZhciBjdSA9IG5ldyBjb3VudGVyVXAoe1xyXG4gICAgLy8gICAgIHN0YXJ0OiAwLFxyXG4gICAgLy8gICAgIGR1cmF0aW9uOiAyMDAwLFxyXG4gICAgLy8gICAgIGludHZhbHVlczogdHJ1ZSxcclxuICAgIC8vICAgICBpbnRlcnZhbDogMTAwLFxyXG4gICAgLy8gICAgIGFwcGVuZDogXCIgXCIsXHJcbiAgICAvLyB9KTtcclxuICAgIC8vIGN1LnN0YXJ0KCk7XHJcbn0pKCk7XHJcbiIsIi8qKlxuICogQHBvcHBlcmpzL2NvcmUgdjIuMTEuNSAtIE1JVCBMaWNlbnNlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5IVE1MRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGUpIHtcbiAgLy8gSUUgMTEgaGFzIG5vIFNoYWRvd1Jvb3RcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLlNoYWRvd1Jvb3Q7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgU2hhZG93Um9vdDtcbn1cblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IDE7XG4gIHZhciBzY2FsZVkgPSAxO1xuXG4gIGlmIChpc0hUTUxFbGVtZW50KGVsZW1lbnQpICYmIGluY2x1ZGVTY2FsZSkge1xuICAgIHZhciBvZmZzZXRIZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB2YXIgb2Zmc2V0V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoOyAvLyBEbyBub3QgYXR0ZW1wdCB0byBkaXZpZGUgYnkgMCwgb3RoZXJ3aXNlIHdlIGdldCBgSW5maW5pdHlgIGFzIHNjYWxlXG4gICAgLy8gRmFsbGJhY2sgdG8gMSBpbiBjYXNlIGJvdGggdmFsdWVzIGFyZSBgMGBcblxuICAgIGlmIChvZmZzZXRXaWR0aCA+IDApIHtcbiAgICAgIHNjYWxlWCA9IHJvdW5kKHJlY3Qud2lkdGgpIC8gb2Zmc2V0V2lkdGggfHwgMTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0SGVpZ2h0ID4gMCkge1xuICAgICAgc2NhbGVZID0gcm91bmQocmVjdC5oZWlnaHQpIC8gb2Zmc2V0SGVpZ2h0IHx8IDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCAvIHNjYWxlWCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0IC8gc2NhbGVZLFxuICAgIHRvcDogcmVjdC50b3AgLyBzY2FsZVksXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQgLyBzY2FsZVgsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSAvIHNjYWxlWSxcbiAgICBsZWZ0OiByZWN0LmxlZnQgLyBzY2FsZVgsXG4gICAgeDogcmVjdC5sZWZ0IC8gc2NhbGVYLFxuICAgIHk6IHJlY3QudG9wIC8gc2NhbGVZXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCkge1xuICAvLyBJZiA8aHRtbD4gaGFzIGEgQ1NTIHdpZHRoIGdyZWF0ZXIgdGhhbiB0aGUgdmlld3BvcnQsIHRoZW4gdGhpcyB3aWxsIGJlXG4gIC8vIGluY29ycmVjdCBmb3IgUlRMLlxuICAvLyBQb3BwZXIgMSBpcyBicm9rZW4gaW4gdGhpcyBjYXNlIGFuZCBuZXZlciBoYWQgYSBidWcgcmVwb3J0IHNvIGxldCdzIGFzc3VtZVxuICAvLyBpdCdzIG5vdCBhbiBpc3N1ZS4gSSBkb24ndCB0aGluayBhbnlvbmUgZXZlciBzcGVjaWZpZXMgd2lkdGggb24gPGh0bWw+XG4gIC8vIGFueXdheS5cbiAgLy8gQnJvd3NlcnMgd2hlcmUgdGhlIGxlZnQgc2Nyb2xsYmFyIGRvZXNuJ3QgY2F1c2UgYW4gaXNzdWUgcmVwb3J0IGAwYCBmb3JcbiAgLy8gdGhpcyAoZS5nLiBFZGdlIDIwMTksIElFMTEsIFNhZmFyaSlcbiAgcmV0dXJuIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgKyBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCkuc2Nyb2xsTGVmdDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBGaXJlZm94IHdhbnRzIHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dZO1xuXG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW4vLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnRTY2FsZWQoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSByb3VuZChyZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMTtcbiAgdmFyIHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDE7XG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufSAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBpc0VsZW1lbnRTY2FsZWQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50SXNTY2FsZWQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn1cblxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuXG5mdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7IC8vIFVzZSB0aGUgY2xpZW50UmVjdCBzaXplcyBpZiBpdCdzIG5vdCBiZWVuIHRyYW5zZm9ybWVkLlxuICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEyMjNcblxuICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3Qud2lkdGggLSB3aWR0aCkgPD0gMSkge1xuICAgIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LmhlaWdodCAtIGhlaWdodCkgPD0gMSkge1xuICAgIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICBlbGVtZW50LmFzc2lnbmVkU2xvdCB8fCAvLyBzdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZVxuICAgIGVsZW1lbnQucGFyZW50Tm9kZSB8fCAoIC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgaXNTaGFkb3dSb290KGVsZW1lbnQpID8gZWxlbWVudC5ob3N0IDogbnVsbCkgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcblxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn1cblxuLypcbmdpdmVuIGEgRE9NIGVsZW1lbnQsIHJldHVybiB0aGUgbGlzdCBvZiBhbGwgc2Nyb2xsIHBhcmVudHMsIHVwIHRoZSBsaXN0IG9mIGFuY2Vzb3JzXG51bnRpbCB3ZSBnZXQgdG8gdGhlIHRvcCB3aW5kb3cgb2JqZWN0LiBUaGlzIGxpc3QgaXMgd2hhdCB3ZSBhdHRhY2ggc2Nyb2xsIGxpc3RlbmVyc1xudG8sIGJlY2F1c2UgaWYgYW55IG9mIHRoZXNlIHBhcmVudCBlbGVtZW50cyBzY3JvbGwsIHdlJ2xsIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZVxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5cbmZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQsIGxpc3QpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudCA9PT0gKChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keSk7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IFt3aW5dLmNvbmNhdCh3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXSkgOiBzY3JvbGxQYXJlbnQ7XG4gIHZhciB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBpc0JvZHkgPyB1cGRhdGVkTGlzdCA6IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59XG5cbmZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBpc0ZpcmVmb3ggPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMTtcbiAgdmFyIGlzSUUgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSAhPT0gLTE7XG5cbiAgaWYgKGlzSUUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIC8vIEluIElFIDksIDEwIGFuZCAxMSBmaXhlZCBlbGVtZW50cyBjb250YWluaW5nIGJsb2NrIGlzIGFsd2F5cyBlc3RhYmxpc2hlZCBieSB0aGUgdmlld3BvcnRcbiAgICB2YXIgZWxlbWVudENzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudENzcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICBpZiAoaXNTaGFkb3dSb290KGN1cnJlbnROb2RlKSkge1xuICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuaG9zdDtcbiAgfVxuXG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDApIHtcbiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7IC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHwgaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJyB8fCBpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuXG5cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59XG5cbnZhciB0b3AgPSAndG9wJztcbnZhciBib3R0b20gPSAnYm90dG9tJztcbnZhciByaWdodCA9ICdyaWdodCc7XG52YXIgbGVmdCA9ICdsZWZ0JztcbnZhciBhdXRvID0gJ2F1dG8nO1xudmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG52YXIgc3RhcnQgPSAnc3RhcnQnO1xudmFyIGVuZCA9ICdlbmQnO1xudmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xudmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbnZhciBwb3BwZXIgPSAncG9wcGVyJztcbnZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbnZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG52YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG52YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbnZhciByZWFkID0gJ3JlYWQnO1xudmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG52YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbnZhciBtYWluID0gJ21haW4nO1xudmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbnZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG52YXIgd3JpdGUgPSAnd3JpdGUnO1xudmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG52YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0KHN0cikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gW10uY29uY2F0KGFyZ3MpLnJlZHVjZShmdW5jdGlvbiAocCwgYykge1xuICAgIHJldHVybiBwLnJlcGxhY2UoLyVzLywgYyk7XG4gIH0sIHN0cik7XG59XG5cbnZhciBJTlZBTElEX01PRElGSUVSX0VSUk9SID0gJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHByb3ZpZGVkIGFuIGludmFsaWQgJXMgcHJvcGVydHksIGV4cGVjdGVkICVzIGJ1dCBnb3QgJXMnO1xudmFyIE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiByZXF1aXJlcyBcIiVzXCIsIGJ1dCBcIiVzXCIgbW9kaWZpZXIgaXMgbm90IGF2YWlsYWJsZSc7XG52YXIgVkFMSURfUFJPUEVSVElFUyA9IFsnbmFtZScsICdlbmFibGVkJywgJ3BoYXNlJywgJ2ZuJywgJ2VmZmVjdCcsICdyZXF1aXJlcycsICdvcHRpb25zJ107XG5mdW5jdGlvbiB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgW10uY29uY2F0KE9iamVjdC5rZXlzKG1vZGlmaWVyKSwgVkFMSURfUFJPUEVSVElFUykgLy8gSUUxMS1jb21wYXRpYmxlIHJlcGxhY2VtZW50IGZvciBgbmV3IFNldChpdGVyYWJsZSlgXG4gICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7XG4gICAgICByZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBTdHJpbmcobW9kaWZpZXIubmFtZSksICdcIm5hbWVcIicsICdcInN0cmluZ1wiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIubmFtZSkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2VuYWJsZWQnOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZW5hYmxlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlbmFibGVkXCInLCAnXCJib29sZWFuXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5lbmFibGVkKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncGhhc2UnOlxuICAgICAgICAgIGlmIChtb2RpZmllclBoYXNlcy5pbmRleE9mKG1vZGlmaWVyLnBoYXNlKSA8IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInBoYXNlXCInLCBcImVpdGhlciBcIiArIG1vZGlmaWVyUGhhc2VzLmpvaW4oJywgJyksIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnBoYXNlKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZm4nOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImZuXCInLCAnXCJmdW5jdGlvblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZm4pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlZmZlY3QnOlxuICAgICAgICAgIGlmIChtb2RpZmllci5lZmZlY3QgIT0gbnVsbCAmJiB0eXBlb2YgbW9kaWZpZXIuZWZmZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlZmZlY3RcIicsICdcImZ1bmN0aW9uXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5mbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlcXVpcmVzJzpcbiAgICAgICAgICBpZiAobW9kaWZpZXIucmVxdWlyZXMgIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShtb2RpZmllci5yZXF1aXJlcykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXMpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlc0lmRXhpc3RzJzpcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzSWZFeGlzdHNcIicsICdcImFycmF5XCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3B0aW9ucyc6XG4gICAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlBvcHBlckpTOiBhbiBpbnZhbGlkIHByb3BlcnR5IGhhcyBiZWVuIHByb3ZpZGVkIHRvIHRoZSBcXFwiXCIgKyBtb2RpZmllci5uYW1lICsgXCJcXFwiIG1vZGlmaWVyLCB2YWxpZCBwcm9wZXJ0aWVzIGFyZSBcIiArIFZBTElEX1BST1BFUlRJRVMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcXFwiXCIgKyBzICsgXCJcXFwiXCI7XG4gICAgICAgICAgfSkuam9pbignLCAnKSArIFwiOyBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwcm92aWRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG1vZGlmaWVyLnJlcXVpcmVzICYmIG1vZGlmaWVyLnJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgIGlmIChtb2RpZmllcnMuZmluZChmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZC5uYW1lID09PSByZXF1aXJlbWVudDtcbiAgICAgICAgfSkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCByZXF1aXJlbWVudCwgcmVxdWlyZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIHZhciB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7IC8vIE5COiBUaGlzIGlzbid0IHN1cHBvcnRlZCBvbiBpT1MgPD0gMTIuIElmIHRoZSBrZXlib2FyZCBpcyBvcGVuLCB0aGUgcG9wcGVyXG4gIC8vIGNhbiBiZSBvYnNjdXJlZCB1bmRlcm5lYXRoIGl0LlxuICAvLyBBbHNvLCBgaHRtbC5jbGllbnRIZWlnaHRgIGFkZHMgdGhlIGJvdHRvbSBiYXIgaGVpZ2h0IGluIFNhZmFyaSBpT1MsIGV2ZW5cbiAgLy8gaWYgaXQgaXNuJ3Qgb3Blbiwgc28gaWYgdGhpcyBpc24ndCBhdmFpbGFibGUsIHRoZSBwb3BwZXIgd2lsbCBiZSBkZXRlY3RlZFxuICAvLyB0byBvdmVyZmxvdyB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gdG9vIGVhcmx5LlxuXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0OyAvLyBVc2VzIExheW91dCBWaWV3cG9ydCAobGlrZSBDaHJvbWU7IFNhZmFyaSBkb2VzIG5vdCBjdXJyZW50bHkpXG4gICAgLy8gSW4gQ2hyb21lLCBpdCByZXR1cm5zIGEgdmFsdWUgdmVyeSBjbG9zZSB0byAwICgrLy0pIGJ1dCBjb250YWlucyByb3VuZGluZ1xuICAgIC8vIGVycm9ycyBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgbnVtYmVycywgc28gd2UgbmVlZCB0byBjaGVjayBwcmVjaXNpb24uXG4gICAgLy8gU2FmYXJpIHJldHVybnMgYSBudW1iZXIgPD0gMCwgdXN1YWxseSA8IC0xIHdoZW4gcGluY2gtem9vbWVkXG4gICAgLy8gRmVhdHVyZSBkZXRlY3Rpb24gZmFpbHMgaW4gbW9iaWxlIGVtdWxhdGlvbiBtb2RlIGluIENocm9tZS5cbiAgICAvLyBNYXRoLmFicyh3aW4uaW5uZXJXaWR0aCAvIHZpc3VhbFZpZXdwb3J0LnNjYWxlIC0gdmlzdWFsVmlld3BvcnQud2lkdGgpIDxcbiAgICAvLyAwLjAwMVxuICAgIC8vIEZhbGxiYWNrIGhlcmU6IFwiTm90IFNhZmFyaVwiIHVzZXJBZ2VudFxuXG4gICAgaWYgKCEvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufVxuXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5cbmZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5O1xuICB2YXIgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuc2Nyb2xsV2lkdGggOiAwLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApO1xuICB2YXIgaGVpZ2h0ID0gbWF4KGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgYm9keSA/IGJvZHkuc2Nyb2xsSGVpZ2h0IDogMCwgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMCk7XG4gIHZhciB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50KSB7XG4gIHJldHVybiBjbGlwcGluZ1BhcmVudCA9PT0gdmlld3BvcnQgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSkgOiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpID8gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoY2xpcHBpbmdQYXJlbnQpIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59IC8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSB7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgdmFyIGNhbkVzY2FwZUNsaXBwaW5nID0gWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgdmFyIGNsaXBwZXJFbGVtZW50ID0gY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG5cblxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpcHBpbmdQYXJlbnQpIHtcbiAgICByZXR1cm4gaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJiBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknO1xuICB9KTtcbn0gLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChlbGVtZW50LCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5KSB7XG4gIHZhciBtYWluQ2xpcHBpbmdQYXJlbnRzID0gYm91bmRhcnkgPT09ICdjbGlwcGluZ1BhcmVudHMnID8gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIDogW10uY29uY2F0KGJvdW5kYXJ5KTtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IFtdLmNvbmNhdChtYWluQ2xpcHBpbmdQYXJlbnRzLCBbcm9vdEJvdW5kYXJ5XSk7XG4gIHZhciBmaXJzdENsaXBwaW5nUGFyZW50ID0gY2xpcHBpbmdQYXJlbnRzWzBdO1xuICB2YXIgY2xpcHBpbmdSZWN0ID0gY2xpcHBpbmdQYXJlbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjUmVjdCwgY2xpcHBpbmdQYXJlbnQpIHtcbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50KTtcbiAgICBhY2NSZWN0LnRvcCA9IG1heChyZWN0LnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBtaW4ocmVjdC5yaWdodCwgYWNjUmVjdC5yaWdodCk7XG4gICAgYWNjUmVjdC5ib3R0b20gPSBtaW4ocmVjdC5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcbiAgICBhY2NSZWN0LmxlZnQgPSBtYXgocmVjdC5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59XG5cbmZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRGcmVzaFNpZGVPYmplY3QoKSwgcGFkZGluZ09iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyUmVjdCwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59XG5cbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIGRlZmF1bHRPcHRpb25zKSxcbiAgICAgIG1vZGlmaWVyc0RhdGE6IHt9LFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlcjogcG9wcGVyXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBzdHlsZXM6IHt9XG4gICAgfTtcbiAgICB2YXIgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZhciBpbnN0YW5jZSA9IHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIHNldE9wdGlvbnMoc2V0T3B0aW9uc0FjdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzZXRPcHRpb25zQWN0aW9uID09PSAnZnVuY3Rpb24nID8gc2V0T3B0aW9uc0FjdGlvbihzdGF0ZS5vcHRpb25zKSA6IHNldE9wdGlvbnNBY3Rpb247XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBzdGF0ZS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIG1vZGlmaWVycyBpcyBpbnZhbGlkIGZvciBhbnkgcmVhc29uXG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHZhciBtb2RpZmllcnMgPSB1bmlxdWVCeShbXS5jb25jYXQob3JkZXJlZE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpO1xuXG4gICAgICAgICAgaWYgKGdldEJhc2VQbGFjZW1lbnQoc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgICAgICAgICB2YXIgZmxpcE1vZGlmaWVyID0gc3RhdGUub3JkZXJlZE1vZGlmaWVycy5maW5kKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgICAgICAgICAgIHJldHVybiBuYW1lID09PSAnZmxpcCc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFmbGlwTW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhdXRvXCIgcGxhY2VtZW50cyByZXF1aXJlIHRoZSBcImZsaXBcIiBtb2RpZmllciBiZScsICdwcmVzZW50IGFuZCBlbmFibGVkIHRvIHdvcmsuJ10uam9pbignICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBvcHBlciksXG4gICAgICAgICAgICAgIG1hcmdpblRvcCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luTGVmdDsgLy8gV2Ugbm8gbG9uZ2VyIHRha2UgaW50byBhY2NvdW50IGBtYXJnaW5zYCBvbiB0aGUgcG9wcGVyLCBhbmQgaXQgY2FuXG4gICAgICAgICAgLy8gY2F1c2UgYnVncyB3aXRoIHBvc2l0aW9uaW5nLCBzbyB3ZSdsbCB3YXJuIHRoZSBjb25zdW1lclxuXG5cbiAgICAgICAgICBpZiAoW21hcmdpblRvcCwgbWFyZ2luUmlnaHQsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdF0uc29tZShmdW5jdGlvbiAobWFyZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChtYXJnaW4pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IENTUyBcIm1hcmdpblwiIHN0eWxlcyBjYW5ub3QgYmUgdXNlZCB0byBhcHBseSBwYWRkaW5nJywgJ2JldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50IG9yIGJvdW5kYXJ5LicsICdUbyByZXBsaWNhdGUgbWFyZ2luLCB1c2UgdGhlIGBvZmZzZXRgIG1vZGlmaWVyLCBhcyB3ZWxsIGFzJywgJ3RoZSBgcGFkZGluZ2Agb3B0aW9uIGluIHRoZSBgcHJldmVudE92ZXJmbG93YCBhbmQgYGZsaXBgJywgJ21vZGlmaWVycy4nXS5qb2luKCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bk1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0YXRlJGVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMsXG4gICAgICAgICAgICByZWZlcmVuY2UgPSBfc3RhdGUkZWxlbWVudHMucmVmZXJlbmNlLFxuICAgICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjsgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcblxuICAgICAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fZGVidWdfbG9vcHNfXyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgX19kZWJ1Z19sb29wc19fICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChfX2RlYnVnX2xvb3BzX18gPiAxMDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTkZJTklURV9MT09QX0VSUk9SKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucykudGhlbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIGlmICghaXNEZXN0cm95ZWQgJiYgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIG9wdGlvbnMub25GaXJzdFVwZGF0ZShzdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJG9wdGlvbnMsXG4gICAgICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuXG52YXIgcGFzc2l2ZSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZWZmZWN0JDIoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBldmVudExpc3RlbmVycyA9IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCQyLFxuICBkYXRhOiB7fVxufTtcblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgcG9wcGVyT2Zmc2V0cyQxID0ge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTtcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHNCeURQUihfcmVmKSB7XG4gIHZhciB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueTtcbiAgdmFyIHdpbiA9IHdpbmRvdztcbiAgdmFyIGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHJldHVybiB7XG4gICAgeDogcm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiByb3VuZCh5ICogZHByKSAvIGRwciB8fCAwXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgdmFyaWF0aW9uID0gX3JlZjIudmFyaWF0aW9uLFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9yZWYyLnJvdW5kT2Zmc2V0cyxcbiAgICAgIGlzRml4ZWQgPSBfcmVmMi5pc0ZpeGVkO1xuICB2YXIgX29mZnNldHMkeCA9IG9mZnNldHMueCxcbiAgICAgIHggPSBfb2Zmc2V0cyR4ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeCxcbiAgICAgIF9vZmZzZXRzJHkgPSBvZmZzZXRzLnksXG4gICAgICB5ID0gX29mZnNldHMkeSA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHk7XG5cbiAgdmFyIF9yZWYzID0gdHlwZW9mIHJvdW5kT2Zmc2V0cyA9PT0gJ2Z1bmN0aW9uJyA/IHJvdW5kT2Zmc2V0cyh7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmMy54O1xuICB5ID0gX3JlZjMueTtcbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3AgfHwgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB2YXIgb2Zmc2V0WSA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LmhlaWdodCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdO1xuICAgICAgeSAtPSBvZmZzZXRZIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0IHx8IChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXTtcbiAgICAgIHggLT0gb2Zmc2V0WCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIHZhciBfcmVmNCA9IHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZSA/IHJvdW5kT2Zmc2V0c0J5RFBSKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWY0Lng7XG4gIHkgPSBfcmVmNC55O1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8PSAxID8gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIiA6IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgMClcIiwgX09iamVjdCRhc3NpZ24pKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWY1KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY1LnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWY1Lm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZSxcbiAgICAgIF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9IG9wdGlvbnMucm91bmRPZmZzZXRzLFxuICAgICAgcm91bmRPZmZzZXRzID0gX29wdGlvbnMkcm91bmRPZmZzZXRzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcm91bmRPZmZzZXRzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHZhcmlhdGlvbjogZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uLFxuICAgIGlzRml4ZWQ6IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCdcbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgY29tcHV0ZVN0eWxlcyQxID0ge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07XG5cbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdCQxKF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgYXBwbHlTdHlsZXMkMSA9IHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0OiBlZmZlY3QkMSxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddXG59O1xuXG5mdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHJlY3RzLCBvZmZzZXQpIHtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicgPyBvZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgcmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIG9mZnNldCQxID0ge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59O1xuXG52YXIgaGFzaCQxID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2gkMVttYXRjaGVkXTtcbiAgfSk7XG59XG5cbnZhciBoYXNoID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBwbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzJDEgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMkMS5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMkMTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFRoZSBgYWxsb3dlZEF1dG9QbGFjZW1lbnRzYCBvcHRpb24gZGlkIG5vdCBhbGxvdyBhbnknLCAncGxhY2VtZW50cy4gRW5zdXJlIHRoZSBgcGxhY2VtZW50YCBvcHRpb24gbWF0Y2hlcyB0aGUgdmFyaWF0aW9uJywgJ29mIHRoZSBhbGxvd2VkIHBsYWNlbWVudHMuJywgJ0ZvciBleGFtcGxlLCBcImF1dG9cIiBjYW5ub3QgYmUgdXNlZCB0byBhbGxvdyBcImJvdHRvbS1zdGFydFwiLicsICdVc2UgXCJhdXRvLXN0YXJ0XCIgaW5zdGVhZC4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBmbGlwJDEgPSB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59XG5cbmZ1bmN0aW9uIHdpdGhpbihtaW4kMSwgdmFsdWUsIG1heCQxKSB7XG4gIHJldHVybiBtYXgobWluJDEsIG1pbih2YWx1ZSwgbWF4JDEpKTtcbn1cbmZ1bmN0aW9uIHdpdGhpbk1heENsYW1wKG1pbiwgdmFsdWUsIG1heCkge1xuICB2YXIgdiA9IHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpO1xuICByZXR1cm4gdiA+IG1heCA/IG1heCA6IHY7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldFZhbHVlID09PSAnbnVtYmVyJyA/IHtcbiAgICBtYWluQXhpczogdGV0aGVyT2Zmc2V0VmFsdWUsXG4gICAgYWx0QXhpczogdGV0aGVyT2Zmc2V0VmFsdWVcbiAgfSA6IE9iamVjdC5hc3NpZ24oe1xuICAgIG1haW5BeGlzOiAwLFxuICAgIGFsdEF4aXM6IDBcbiAgfSwgdGV0aGVyT2Zmc2V0VmFsdWUpO1xuICB2YXIgb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XSA6IG51bGw7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDtcblxuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluJDEgPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCQxID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtaW5MZW4gLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gLXJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgKyBhZGRpdGl2ZSArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3cgJiYgZ2V0T2Zmc2V0UGFyZW50KHN0YXRlLmVsZW1lbnRzLmFycm93KTtcbiAgICB2YXIgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBtYWluQXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50VG9wIHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRMZWZ0IHx8IDAgOiAwO1xuICAgIHZhciBvZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJCA9IG9mZnNldE1vZGlmaWVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9mZnNldE1vZGlmaWVyU3RhdGVbbWFpbkF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gb2Zmc2V0ICsgbWluT2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIGNsaWVudE9mZnNldDtcbiAgICB2YXIgdGV0aGVyTWF4ID0gb2Zmc2V0ICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcbiAgICB2YXIgcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKHRldGhlciA/IG1pbihtaW4kMSwgdGV0aGVyTWluKSA6IG1pbiQxLCBvZmZzZXQsIHRldGhlciA/IG1heChtYXgkMSwgdGV0aGVyTWF4KSA6IG1heCQxKTtcbiAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldCAtIG9mZnNldDtcbiAgfVxuXG4gIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkMjtcblxuICAgIHZhciBfbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcblxuICAgIHZhciBfYWx0U2lkZSA9IG1haW5BeGlzID09PSAneCcgPyBib3R0b20gOiByaWdodDtcblxuICAgIHZhciBfb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1thbHRBeGlzXTtcblxuICAgIHZhciBfbGVuID0gYWx0QXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgdmFyIF9taW4gPSBfb2Zmc2V0ICsgb3ZlcmZsb3dbX21haW5TaWRlXTtcblxuICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgIHZhciBpc09yaWdpblNpZGUgPSBbdG9wLCBsZWZ0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IChfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVthbHRBeGlzXSkgIT0gbnVsbCA/IF9vZmZzZXRNb2RpZmllclN0YXRlJDIgOiAwO1xuXG4gICAgdmFyIF90ZXRoZXJNaW4gPSBpc09yaWdpblNpZGUgPyBfbWluIDogX29mZnNldCAtIHJlZmVyZW5jZVJlY3RbX2xlbl0gLSBwb3BwZXJSZWN0W19sZW5dIC0gX29mZnNldE1vZGlmaWVyVmFsdWUgKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcztcblxuICAgIHZhciBfdGV0aGVyTWF4ID0gaXNPcmlnaW5TaWRlID8gX29mZnNldCArIHJlZmVyZW5jZVJlY3RbX2xlbl0gKyBwb3BwZXJSZWN0W19sZW5dIC0gX29mZnNldE1vZGlmaWVyVmFsdWUgLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcyA6IF9tYXg7XG5cbiAgICB2YXIgX3ByZXZlbnRlZE9mZnNldCA9IHRldGhlciAmJiBpc09yaWdpblNpZGUgPyB3aXRoaW5NYXhDbGFtcChfdGV0aGVyTWluLCBfb2Zmc2V0LCBfdGV0aGVyTWF4KSA6IHdpdGhpbih0ZXRoZXIgPyBfdGV0aGVyTWluIDogX21pbiwgX29mZnNldCwgdGV0aGVyID8gX3RldGhlck1heCA6IF9tYXgpO1xuXG4gICAgcG9wcGVyT2Zmc2V0c1thbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVthbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQgLSBfb2Zmc2V0O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgcHJldmVudE92ZXJmbG93JDEgPSB7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddXG59O1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLCAnZWxlbWVudC4nXS5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGFycm93JDEgPSB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QsIHByZXZlbnRlZE9mZnNldHMpIHtcbiAgaWYgKHByZXZlbnRlZE9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgIHByZXZlbnRlZE9mZnNldHMgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvdmVyZmxvdykge1xuICByZXR1cm4gW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0uc29tZShmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBvdmVyZmxvd1tzaWRlXSA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGlkZShfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBwcmV2ZW50ZWRPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3c7XG4gIHZhciByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gIH0pO1xuICB2YXIgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gIH0pO1xuICB2YXIgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocmVmZXJlbmNlT3ZlcmZsb3csIHJlZmVyZW5jZVJlY3QpO1xuICB2YXIgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHBvcHBlckFsdE92ZXJmbG93LCBwb3BwZXJSZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKTtcbiAgdmFyIGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIHZhciBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHM6IHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW46IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgIGhhc1BvcHBlckVzY2FwZWQ6IGhhc1BvcHBlckVzY2FwZWRcbiAgfTtcbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGhpZGUkMSA9IHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZVxufTtcblxudmFyIGRlZmF1bHRNb2RpZmllcnMkMSA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cyQxLCBjb21wdXRlU3R5bGVzJDEsIGFwcGx5U3R5bGVzJDFdO1xudmFyIGNyZWF0ZVBvcHBlciQxID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnMkMVxufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMkMSwgY29tcHV0ZVN0eWxlcyQxLCBhcHBseVN0eWxlcyQxLCBvZmZzZXQkMSwgZmxpcCQxLCBwcmV2ZW50T3ZlcmZsb3ckMSwgYXJyb3ckMSwgaGlkZSQxXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0cy5hcHBseVN0eWxlcyA9IGFwcGx5U3R5bGVzJDE7XG5leHBvcnRzLmFycm93ID0gYXJyb3ckMTtcbmV4cG9ydHMuY29tcHV0ZVN0eWxlcyA9IGNvbXB1dGVTdHlsZXMkMTtcbmV4cG9ydHMuY3JlYXRlUG9wcGVyID0gY3JlYXRlUG9wcGVyO1xuZXhwb3J0cy5jcmVhdGVQb3BwZXJMaXRlID0gY3JlYXRlUG9wcGVyJDE7XG5leHBvcnRzLmRlZmF1bHRNb2RpZmllcnMgPSBkZWZhdWx0TW9kaWZpZXJzO1xuZXhwb3J0cy5kZXRlY3RPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93O1xuZXhwb3J0cy5ldmVudExpc3RlbmVycyA9IGV2ZW50TGlzdGVuZXJzO1xuZXhwb3J0cy5mbGlwID0gZmxpcCQxO1xuZXhwb3J0cy5oaWRlID0gaGlkZSQxO1xuZXhwb3J0cy5vZmZzZXQgPSBvZmZzZXQkMTtcbmV4cG9ydHMucG9wcGVyR2VuZXJhdG9yID0gcG9wcGVyR2VuZXJhdG9yO1xuZXhwb3J0cy5wb3BwZXJPZmZzZXRzID0gcG9wcGVyT2Zmc2V0cyQxO1xuZXhwb3J0cy5wcmV2ZW50T3ZlcmZsb3cgPSBwcmV2ZW50T3ZlcmZsb3ckMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsInZhciB0bnM9ZnVuY3Rpb24oKXt2YXIgdD13aW5kb3csQWk9dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx0Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC5tc1JlcXVlc3RBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24odCl7cmV0dXJuIHNldFRpbWVvdXQodCwxNil9LGU9d2luZG93LE5pPWUuY2FuY2VsQW5pbWF0aW9uRnJhbWV8fGUubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKHQpe2NsZWFyVGltZW91dCh0KX07ZnVuY3Rpb24gTGkoKXtmb3IodmFyIHQsZSxuLGk9YXJndW1lbnRzWzBdfHx7fSxhPTEscj1hcmd1bWVudHMubGVuZ3RoO2E8cjthKyspaWYobnVsbCE9PSh0PWFyZ3VtZW50c1thXSkpZm9yKGUgaW4gdClpIT09KG49dFtlXSkmJnZvaWQgMCE9PW4mJihpW2VdPW4pO3JldHVybiBpfWZ1bmN0aW9uIEJpKHQpe3JldHVybiAwPD1bXCJ0cnVlXCIsXCJmYWxzZVwiXS5pbmRleE9mKHQpP0pTT04ucGFyc2UodCk6dH1mdW5jdGlvbiBTaSh0LGUsbixpKXtpZihpKXRyeXt0LnNldEl0ZW0oZSxuKX1jYXRjaCh0KXt9cmV0dXJuIG59ZnVuY3Rpb24gSGkoKXt2YXIgdD1kb2N1bWVudCxlPXQuYm9keTtyZXR1cm4gZXx8KChlPXQuY3JlYXRlRWxlbWVudChcImJvZHlcIikpLmZha2U9ITApLGV9dmFyIG49ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O2Z1bmN0aW9uIE9pKHQpe3ZhciBlPVwiXCI7cmV0dXJuIHQuZmFrZSYmKGU9bi5zdHlsZS5vdmVyZmxvdyx0LnN0eWxlLmJhY2tncm91bmQ9XCJcIix0LnN0eWxlLm92ZXJmbG93PW4uc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIixuLmFwcGVuZENoaWxkKHQpKSxlfWZ1bmN0aW9uIERpKHQsZSl7dC5mYWtlJiYodC5yZW1vdmUoKSxuLnN0eWxlLm92ZXJmbG93PWUsbi5vZmZzZXRIZWlnaHQpfWZ1bmN0aW9uIGtpKHQsZSxuLGkpe1wiaW5zZXJ0UnVsZVwiaW4gdD90Lmluc2VydFJ1bGUoZStcIntcIituK1wifVwiLGkpOnQuYWRkUnVsZShlLG4saSl9ZnVuY3Rpb24gUmkodCl7cmV0dXJuKFwiaW5zZXJ0UnVsZVwiaW4gdD90LmNzc1J1bGVzOnQucnVsZXMpLmxlbmd0aH1mdW5jdGlvbiBJaSh0LGUsbil7Zm9yKHZhciBpPTAsYT10Lmxlbmd0aDtpPGE7aSsrKWUuY2FsbChuLHRbaV0saSl9dmFyIGk9XCJjbGFzc0xpc3RcImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJfXCIpLFBpPWk/ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoZSl9OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDA8PXQuY2xhc3NOYW1lLmluZGV4T2YoZSl9LHppPWk/ZnVuY3Rpb24odCxlKXtQaSh0LGUpfHx0LmNsYXNzTGlzdC5hZGQoZSl9OmZ1bmN0aW9uKHQsZSl7UGkodCxlKXx8KHQuY2xhc3NOYW1lKz1cIiBcIitlKX0sV2k9aT9mdW5jdGlvbih0LGUpe1BpKHQsZSkmJnQuY2xhc3NMaXN0LnJlbW92ZShlKX06ZnVuY3Rpb24odCxlKXtQaSh0LGUpJiYodC5jbGFzc05hbWU9dC5jbGFzc05hbWUucmVwbGFjZShlLFwiXCIpKX07ZnVuY3Rpb24gcWkodCxlKXtyZXR1cm4gdC5oYXNBdHRyaWJ1dGUoZSl9ZnVuY3Rpb24gRmkodCxlKXtyZXR1cm4gdC5nZXRBdHRyaWJ1dGUoZSl9ZnVuY3Rpb24gcih0KXtyZXR1cm4gdm9pZCAwIT09dC5pdGVtfWZ1bmN0aW9uIGppKHQsZSl7aWYodD1yKHQpfHx0IGluc3RhbmNlb2YgQXJyYXk/dDpbdF0sXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSlmb3IodmFyIG49dC5sZW5ndGg7bi0tOylmb3IodmFyIGkgaW4gZSl0W25dLnNldEF0dHJpYnV0ZShpLGVbaV0pfWZ1bmN0aW9uIFZpKHQsZSl7dD1yKHQpfHx0IGluc3RhbmNlb2YgQXJyYXk/dDpbdF07Zm9yKHZhciBuPShlPWUgaW5zdGFuY2VvZiBBcnJheT9lOltlXSkubGVuZ3RoLGk9dC5sZW5ndGg7aS0tOylmb3IodmFyIGE9bjthLS07KXRbaV0ucmVtb3ZlQXR0cmlidXRlKGVbYV0pfWZ1bmN0aW9uIEdpKHQpe2Zvcih2YXIgZT1bXSxuPTAsaT10Lmxlbmd0aDtuPGk7bisrKWUucHVzaCh0W25dKTtyZXR1cm4gZX1mdW5jdGlvbiBRaSh0LGUpe1wibm9uZVwiIT09dC5zdHlsZS5kaXNwbGF5JiYodC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiKX1mdW5jdGlvbiBYaSh0LGUpe1wibm9uZVwiPT09dC5zdHlsZS5kaXNwbGF5JiYodC5zdHlsZS5kaXNwbGF5PVwiXCIpfWZ1bmN0aW9uIFlpKHQpe3JldHVyblwibm9uZVwiIT09d2luZG93LmdldENvbXB1dGVkU3R5bGUodCkuZGlzcGxheX1mdW5jdGlvbiBLaShlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7dmFyIG49W2VdLGk9ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnN1YnN0cigxKTtbXCJXZWJraXRcIixcIk1velwiLFwibXNcIixcIk9cIl0uZm9yRWFjaChmdW5jdGlvbih0KXtcIm1zXCI9PT10JiZcInRyYW5zZm9ybVwiIT09ZXx8bi5wdXNoKHQraSl9KSxlPW59Zm9yKHZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmYWtlZWxlbWVudFwiKSxhPShlLmxlbmd0aCwwKTthPGUubGVuZ3RoO2ErKyl7dmFyIHI9ZVthXTtpZih2b2lkIDAhPT10LnN0eWxlW3JdKXJldHVybiByfXJldHVybiExfWZ1bmN0aW9uIEppKHQsZSl7dmFyIG49ITE7cmV0dXJuL15XZWJraXQvLnRlc3QodCk/bj1cIndlYmtpdFwiK2UrXCJFbmRcIjovXk8vLnRlc3QodCk/bj1cIm9cIitlK1wiRW5kXCI6dCYmKG49ZS50b0xvd2VyQ2FzZSgpK1wiZW5kXCIpLG59dmFyIGE9ITE7dHJ5e3ZhciBvPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7YT0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixudWxsLG8pfWNhdGNoKHQpe312YXIgdT0hIWEmJntwYXNzaXZlOiEwfTtmdW5jdGlvbiBVaSh0LGUsbil7Zm9yKHZhciBpIGluIGUpe3ZhciBhPTA8PVtcInRvdWNoc3RhcnRcIixcInRvdWNobW92ZVwiXS5pbmRleE9mKGkpJiYhbiYmdTt0LmFkZEV2ZW50TGlzdGVuZXIoaSxlW2ldLGEpfX1mdW5jdGlvbiBfaSh0LGUpe2Zvcih2YXIgbiBpbiBlKXt2YXIgaT0wPD1bXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaG1vdmVcIl0uaW5kZXhPZihuKSYmdTt0LnJlbW92ZUV2ZW50TGlzdGVuZXIobixlW25dLGkpfX1mdW5jdGlvbiBaaSgpe3JldHVybnt0b3BpY3M6e30sb246ZnVuY3Rpb24odCxlKXt0aGlzLnRvcGljc1t0XT10aGlzLnRvcGljc1t0XXx8W10sdGhpcy50b3BpY3NbdF0ucHVzaChlKX0sb2ZmOmZ1bmN0aW9uKHQsZSl7aWYodGhpcy50b3BpY3NbdF0pZm9yKHZhciBuPTA7bjx0aGlzLnRvcGljc1t0XS5sZW5ndGg7bisrKWlmKHRoaXMudG9waWNzW3RdW25dPT09ZSl7dGhpcy50b3BpY3NbdF0uc3BsaWNlKG4sMSk7YnJlYWt9fSxlbWl0OmZ1bmN0aW9uKGUsbil7bi50eXBlPWUsdGhpcy50b3BpY3NbZV0mJnRoaXMudG9waWNzW2VdLmZvckVhY2goZnVuY3Rpb24odCl7dChuLGUpfSl9fX1PYmplY3Qua2V5c3x8KE9iamVjdC5rZXlzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO2Zvcih2YXIgbiBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG4pJiZlLnB1c2gobik7cmV0dXJuIGV9KSxcInJlbW92ZVwiaW4gRWxlbWVudC5wcm90b3R5cGV8fChFbGVtZW50LnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKX0pO3ZhciAkaT1mdW5jdGlvbihIKXtIPUxpKHtjb250YWluZXI6XCIuc2xpZGVyXCIsbW9kZTpcImNhcm91c2VsXCIsYXhpczpcImhvcml6b250YWxcIixpdGVtczoxLGd1dHRlcjowLGVkZ2VQYWRkaW5nOjAsZml4ZWRXaWR0aDohMSxhdXRvV2lkdGg6ITEsdmlld3BvcnRNYXg6ITEsc2xpZGVCeToxLGNlbnRlcjohMSxjb250cm9sczohMCxjb250cm9sc1Bvc2l0aW9uOlwidG9wXCIsY29udHJvbHNUZXh0OltcInByZXZcIixcIm5leHRcIl0sY29udHJvbHNDb250YWluZXI6ITEscHJldkJ1dHRvbjohMSxuZXh0QnV0dG9uOiExLG5hdjohMCxuYXZQb3NpdGlvbjpcInRvcFwiLG5hdkNvbnRhaW5lcjohMSxuYXZBc1RodW1ibmFpbHM6ITEsYXJyb3dLZXlzOiExLHNwZWVkOjMwMCxhdXRvcGxheTohMSxhdXRvcGxheVBvc2l0aW9uOlwidG9wXCIsYXV0b3BsYXlUaW1lb3V0OjVlMyxhdXRvcGxheURpcmVjdGlvbjpcImZvcndhcmRcIixhdXRvcGxheVRleHQ6W1wic3RhcnRcIixcInN0b3BcIl0sYXV0b3BsYXlIb3ZlclBhdXNlOiExLGF1dG9wbGF5QnV0dG9uOiExLGF1dG9wbGF5QnV0dG9uT3V0cHV0OiEwLGF1dG9wbGF5UmVzZXRPblZpc2liaWxpdHk6ITAsYW5pbWF0ZUluOlwidG5zLWZhZGVJblwiLGFuaW1hdGVPdXQ6XCJ0bnMtZmFkZU91dFwiLGFuaW1hdGVOb3JtYWw6XCJ0bnMtbm9ybWFsXCIsYW5pbWF0ZURlbGF5OiExLGxvb3A6ITAscmV3aW5kOiExLGF1dG9IZWlnaHQ6ITEscmVzcG9uc2l2ZTohMSxsYXp5bG9hZDohMSxsYXp5bG9hZFNlbGVjdG9yOlwiLnRucy1sYXp5LWltZ1wiLHRvdWNoOiEwLG1vdXNlRHJhZzohMSxzd2lwZUFuZ2xlOjE1LG5lc3RlZDohMSxwcmV2ZW50QWN0aW9uV2hlblJ1bm5pbmc6ITEscHJldmVudFNjcm9sbE9uVG91Y2g6ITEsZnJlZXphYmxlOiEwLG9uSW5pdDohMSx1c2VMb2NhbFN0b3JhZ2U6ITAsbm9uY2U6ITF9LEh8fHt9KTt2YXIgTz1kb2N1bWVudCxtPXdpbmRvdyxhPXtFTlRFUjoxMyxTUEFDRTozMixMRUZUOjM3LFJJR0hUOjM5fSxlPXt9LG49SC51c2VMb2NhbFN0b3JhZ2U7aWYobil7dmFyIHQ9bmF2aWdhdG9yLnVzZXJBZ2VudCxpPW5ldyBEYXRlO3RyeXsoZT1tLmxvY2FsU3RvcmFnZSk/KGUuc2V0SXRlbShpLGkpLG49ZS5nZXRJdGVtKGkpPT1pLGUucmVtb3ZlSXRlbShpKSk6bj0hMSxufHwoZT17fSl9Y2F0Y2godCl7bj0hMX1uJiYoZS50bnNBcHAmJmUudG5zQXBwIT09dCYmW1widENcIixcInRQTFwiLFwidE1RXCIsXCJ0VGZcIixcInQzRFwiLFwidFREdVwiLFwidFREZVwiLFwidEFEdVwiLFwidEFEZVwiLFwidFRFXCIsXCJ0QUVcIl0uZm9yRWFjaChmdW5jdGlvbih0KXtlLnJlbW92ZUl0ZW0odCl9KSxsb2NhbFN0b3JhZ2UudG5zQXBwPXQpfXZhciB5PWUudEM/QmkoZS50Qyk6U2koZSxcInRDXCIsZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudCxlPUhpKCksbj1PaShlKSxpPXQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhPSExO2UuYXBwZW5kQ2hpbGQoaSk7dHJ5e2Zvcih2YXIgcixvPVwiKDEwcHggKiAxMClcIix1PVtcImNhbGNcIitvLFwiLW1vei1jYWxjXCIrbyxcIi13ZWJraXQtY2FsY1wiK29dLGw9MDtsPDM7bCsrKWlmKHI9dVtsXSxpLnN0eWxlLndpZHRoPXIsMTAwPT09aS5vZmZzZXRXaWR0aCl7YT1yLnJlcGxhY2UobyxcIlwiKTticmVha319Y2F0Y2godCl7fXJldHVybiBlLmZha2U/RGkoZSxuKTppLnJlbW92ZSgpLGF9KCksbiksZz1lLnRQTD9CaShlLnRQTCk6U2koZSxcInRQTFwiLGZ1bmN0aW9uKCl7dmFyIHQsZT1kb2N1bWVudCxuPUhpKCksaT1PaShuKSxhPWUuY3JlYXRlRWxlbWVudChcImRpdlwiKSxyPWUuY3JlYXRlRWxlbWVudChcImRpdlwiKSxvPVwiXCI7YS5jbGFzc05hbWU9XCJ0bnMtdC1zdWJwMlwiLHIuY2xhc3NOYW1lPVwidG5zLXQtY3RcIjtmb3IodmFyIHU9MDt1PDcwO3UrKylvKz1cIjxkaXY+PC9kaXY+XCI7cmV0dXJuIHIuaW5uZXJIVE1MPW8sYS5hcHBlbmRDaGlsZChyKSxuLmFwcGVuZENoaWxkKGEpLHQ9TWF0aC5hYnMoYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LXIuY2hpbGRyZW5bNjddLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpPDIsbi5mYWtlP0RpKG4saSk6YS5yZW1vdmUoKSx0fSgpLG4pLEQ9ZS50TVE/QmkoZS50TVEpOlNpKGUsXCJ0TVFcIixmdW5jdGlvbigpe2lmKHdpbmRvdy5tYXRjaE1lZGlhfHx3aW5kb3cubXNNYXRjaE1lZGlhKXJldHVybiEwO3ZhciB0LGU9ZG9jdW1lbnQsbj1IaSgpLGk9T2kobiksYT1lLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikscj1lLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPVwiQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDoxcHgpey50bnMtbXEtdGVzdHtwb3NpdGlvbjphYnNvbHV0ZX19XCI7cmV0dXJuIHIudHlwZT1cInRleHQvY3NzXCIsYS5jbGFzc05hbWU9XCJ0bnMtbXEtdGVzdFwiLG4uYXBwZW5kQ2hpbGQociksbi5hcHBlbmRDaGlsZChhKSxyLnN0eWxlU2hlZXQ/ci5zdHlsZVNoZWV0LmNzc1RleHQ9bzpyLmFwcGVuZENoaWxkKGUuY3JlYXRlVGV4dE5vZGUobykpLHQ9d2luZG93LmdldENvbXB1dGVkU3R5bGU/d2luZG93LmdldENvbXB1dGVkU3R5bGUoYSkucG9zaXRpb246YS5jdXJyZW50U3R5bGUucG9zaXRpb24sbi5mYWtlP0RpKG4saSk6YS5yZW1vdmUoKSxcImFic29sdXRlXCI9PT10fSgpLG4pLHI9ZS50VGY/QmkoZS50VGYpOlNpKGUsXCJ0VGZcIixLaShcInRyYW5zZm9ybVwiKSxuKSxvPWUudDNEP0JpKGUudDNEKTpTaShlLFwidDNEXCIsZnVuY3Rpb24odCl7aWYoIXQpcmV0dXJuITE7aWYoIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKXJldHVybiExO3ZhciBlLG49ZG9jdW1lbnQsaT1IaSgpLGE9T2koaSkscj1uLmNyZWF0ZUVsZW1lbnQoXCJwXCIpLG89OTx0Lmxlbmd0aD9cIi1cIit0LnNsaWNlKDAsLTkpLnRvTG93ZXJDYXNlKCkrXCItXCI6XCJcIjtyZXR1cm4gbys9XCJ0cmFuc2Zvcm1cIixpLmluc2VydEJlZm9yZShyLG51bGwpLHIuc3R5bGVbdF09XCJ0cmFuc2xhdGUzZCgxcHgsMXB4LDFweClcIixlPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHIpLmdldFByb3BlcnR5VmFsdWUobyksaS5mYWtlP0RpKGksYSk6ci5yZW1vdmUoKSx2b2lkIDAhPT1lJiYwPGUubGVuZ3RoJiZcIm5vbmVcIiE9PWV9KHIpLG4pLHg9ZS50VER1P0JpKGUudFREdSk6U2koZSxcInRURHVcIixLaShcInRyYW5zaXRpb25EdXJhdGlvblwiKSxuKSx1PWUudFREZT9CaShlLnRURGUpOlNpKGUsXCJ0VERlXCIsS2koXCJ0cmFuc2l0aW9uRGVsYXlcIiksbiksYj1lLnRBRHU/QmkoZS50QUR1KTpTaShlLFwidEFEdVwiLEtpKFwiYW5pbWF0aW9uRHVyYXRpb25cIiksbiksbD1lLnRBRGU/QmkoZS50QURlKTpTaShlLFwidEFEZVwiLEtpKFwiYW5pbWF0aW9uRGVsYXlcIiksbikscz1lLnRURT9CaShlLnRURSk6U2koZSxcInRURVwiLEppKHgsXCJUcmFuc2l0aW9uXCIpLG4pLGM9ZS50QUU/QmkoZS50QUUpOlNpKGUsXCJ0QUVcIixKaShiLFwiQW5pbWF0aW9uXCIpLG4pLGY9bS5jb25zb2xlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBtLmNvbnNvbGUud2FybixkPVtcImNvbnRhaW5lclwiLFwiY29udHJvbHNDb250YWluZXJcIixcInByZXZCdXR0b25cIixcIm5leHRCdXR0b25cIixcIm5hdkNvbnRhaW5lclwiLFwiYXV0b3BsYXlCdXR0b25cIl0sdj17fTtpZihkLmZvckVhY2goZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIEhbdF0pe3ZhciBlPUhbdF0sbj1PLnF1ZXJ5U2VsZWN0b3IoZSk7aWYodlt0XT1lLCFufHwhbi5ub2RlTmFtZSlyZXR1cm4gdm9pZChmJiZjb25zb2xlLndhcm4oXCJDYW4ndCBmaW5kXCIsSFt0XSkpO0hbdF09bn19KSwhKEguY29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aDwxKSl7dmFyIGs9SC5yZXNwb25zaXZlLFI9SC5uZXN0ZWQsST1cImNhcm91c2VsXCI9PT1ILm1vZGU7aWYoayl7MCBpbiBrJiYoSD1MaShILGtbMF0pLGRlbGV0ZSBrWzBdKTt2YXIgcD17fTtmb3IodmFyIGggaW4gayl7dmFyIHc9a1toXTt3PVwibnVtYmVyXCI9PXR5cGVvZiB3P3tpdGVtczp3fTp3LHBbaF09d31rPXAscD1udWxsfWlmKEl8fGZ1bmN0aW9uIHQoZSl7Zm9yKHZhciBuIGluIGUpSXx8KFwic2xpZGVCeVwiPT09biYmKGVbbl09XCJwYWdlXCIpLFwiZWRnZVBhZGRpbmdcIj09PW4mJihlW25dPSExKSxcImF1dG9IZWlnaHRcIj09PW4mJihlW25dPSExKSksXCJyZXNwb25zaXZlXCI9PT1uJiZ0KGVbbl0pfShIKSwhSSl7SC5heGlzPVwiaG9yaXpvbnRhbFwiLEguc2xpZGVCeT1cInBhZ2VcIixILmVkZ2VQYWRkaW5nPSExO3ZhciBQPUguYW5pbWF0ZUluLHo9SC5hbmltYXRlT3V0LEM9SC5hbmltYXRlRGVsYXksVz1ILmFuaW1hdGVOb3JtYWx9dmFyIE0scSxGPVwiaG9yaXpvbnRhbFwiPT09SC5heGlzLFQ9Ty5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGo9Ty5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFY9SC5jb250YWluZXIsRT1WLnBhcmVudE5vZGUsQT1WLm91dGVySFRNTCxHPVYuY2hpbGRyZW4sUT1HLmxlbmd0aCxYPXJuKCksWT0hMTtrJiZFbigpLEkmJihWLmNsYXNzTmFtZSs9XCIgdG5zLXZwZml4XCIpO3ZhciBOLEwsQixTLEssSixVLF8sWiwkPUguYXV0b1dpZHRoLHR0PXNuKFwiZml4ZWRXaWR0aFwiKSxldD1zbihcImVkZ2VQYWRkaW5nXCIpLG50PXNuKFwiZ3V0dGVyXCIpLGl0PXVuKCksYXQ9c24oXCJjZW50ZXJcIikscnQ9JD8xOk1hdGguZmxvb3Ioc24oXCJpdGVtc1wiKSksb3Q9c24oXCJzbGlkZUJ5XCIpLHV0PUgudmlld3BvcnRNYXh8fEguZml4ZWRXaWR0aFZpZXdwb3J0V2lkdGgsbHQ9c24oXCJhcnJvd0tleXNcIiksc3Q9c24oXCJzcGVlZFwiKSxjdD1ILnJld2luZCxmdD0hY3QmJkgubG9vcCxkdD1zbihcImF1dG9IZWlnaHRcIiksdnQ9c24oXCJjb250cm9sc1wiKSxwdD1zbihcImNvbnRyb2xzVGV4dFwiKSxodD1zbihcIm5hdlwiKSxtdD1zbihcInRvdWNoXCIpLHl0PXNuKFwibW91c2VEcmFnXCIpLGd0PXNuKFwiYXV0b3BsYXlcIikseHQ9c24oXCJhdXRvcGxheVRpbWVvdXRcIiksYnQ9c24oXCJhdXRvcGxheVRleHRcIiksd3Q9c24oXCJhdXRvcGxheUhvdmVyUGF1c2VcIiksQ3Q9c24oXCJhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5XCIpLE10PShVPW51bGwsXz1zbihcIm5vbmNlXCIpLFo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLFUmJlouc2V0QXR0cmlidXRlKFwibWVkaWFcIixVKSxfJiZaLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsXyksZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhlYWRcIikuYXBwZW5kQ2hpbGQoWiksWi5zaGVldD9aLnNoZWV0Olouc3R5bGVTaGVldCksVHQ9SC5sYXp5bG9hZCxFdD1ILmxhenlsb2FkU2VsZWN0b3IsQXQ9W10sTnQ9ZnQ/KEs9ZnVuY3Rpb24oKXt7aWYoJHx8dHQmJiF1dClyZXR1cm4gUS0xO3ZhciB0PXR0P1wiZml4ZWRXaWR0aFwiOlwiaXRlbXNcIixlPVtdO2lmKCh0dHx8SFt0XTxRKSYmZS5wdXNoKEhbdF0pLGspZm9yKHZhciBuIGluIGspe3ZhciBpPWtbbl1bdF07aSYmKHR0fHxpPFEpJiZlLnB1c2goaSl9cmV0dXJuIGUubGVuZ3RofHxlLnB1c2goMCksTWF0aC5jZWlsKHR0P3V0L01hdGgubWluLmFwcGx5KG51bGwsZSk6TWF0aC5tYXguYXBwbHkobnVsbCxlKSl9fSgpLEo9ST9NYXRoLmNlaWwoKDUqSy1RKS8yKTo0KkstUSxKPU1hdGgubWF4KEssSiksbG4oXCJlZGdlUGFkZGluZ1wiKT9KKzE6Sik6MCxMdD1JP1ErMipOdDpRK050LEJ0PSEoIXR0JiYhJHx8ZnQpLFN0PXR0P19uKCk6bnVsbCxIdD0hSXx8IWZ0LE90PUY/XCJsZWZ0XCI6XCJ0b3BcIixEdD1cIlwiLGt0PVwiXCIsUnQ9dHQ/ZnVuY3Rpb24oKXtyZXR1cm4gYXQmJiFmdD9RLTE6TWF0aC5jZWlsKC1TdC8odHQrbnQpKX06JD9mdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8THQ7dCsrKWlmKE5bdF0+PS1TdClyZXR1cm4gdH06ZnVuY3Rpb24oKXtyZXR1cm4gYXQmJkkmJiFmdD9RLTE6ZnR8fEk/TWF0aC5tYXgoMCxMdC1NYXRoLmNlaWwocnQpKTpMdC0xfSxJdD1lbihzbihcInN0YXJ0SW5kZXhcIikpLFB0PUl0LHp0PSh0bigpLDApLFd0PSQ/bnVsbDpSdCgpLHF0PUgucHJldmVudEFjdGlvbldoZW5SdW5uaW5nLEZ0PUguc3dpcGVBbmdsZSxqdD0hRnR8fFwiP1wiLFZ0PSExLEd0PUgub25Jbml0LFF0PW5ldyBaaSxYdD1cIiB0bnMtc2xpZGVyIHRucy1cIitILm1vZGUsWXQ9Vi5pZHx8KFM9d2luZG93LnRuc0lkLHdpbmRvdy50bnNJZD1TP1MrMToxLFwidG5zXCIrd2luZG93LnRuc0lkKSxLdD1zbihcImRpc2FibGVcIiksSnQ9ITEsVXQ9SC5mcmVlemFibGUsX3Q9ISghVXR8fCQpJiZUbigpLFp0PSExLCR0PXtjbGljazpvaSxrZXlkb3duOmZ1bmN0aW9uKHQpe3Q9cGkodCk7dmFyIGU9W2EuTEVGVCxhLlJJR0hUXS5pbmRleE9mKHQua2V5Q29kZSk7MDw9ZSYmKDA9PT1lP3dlLmRpc2FibGVkfHxvaSh0LC0xKTpDZS5kaXNhYmxlZHx8b2kodCwxKSl9fSx0ZT17Y2xpY2s6ZnVuY3Rpb24odCl7aWYoVnQpe2lmKHF0KXJldHVybjthaSgpfXZhciBlPWhpKHQ9cGkodCkpO2Zvcig7ZSE9PUFlJiYhcWkoZSxcImRhdGEtbmF2XCIpOyllPWUucGFyZW50Tm9kZTtpZihxaShlLFwiZGF0YS1uYXZcIikpe3ZhciBuPVNlPU51bWJlcihGaShlLFwiZGF0YS1uYXZcIikpLGk9dHR8fCQ/bipRL0xlOm4qcnQsYT1sZT9uOk1hdGgubWluKE1hdGguY2VpbChpKSxRLTEpO3JpKGEsdCksSGU9PT1uJiYoUGUmJmZpKCksU2U9LTEpfX0sa2V5ZG93bjpmdW5jdGlvbih0KXt0PXBpKHQpO3ZhciBlPU8uYWN0aXZlRWxlbWVudDtpZighcWkoZSxcImRhdGEtbmF2XCIpKXJldHVybjt2YXIgbj1bYS5MRUZULGEuUklHSFQsYS5FTlRFUixhLlNQQUNFXS5pbmRleE9mKHQua2V5Q29kZSksaT1OdW1iZXIoRmkoZSxcImRhdGEtbmF2XCIpKTswPD1uJiYoMD09PW4/MDxpJiZ2aShFZVtpLTFdKToxPT09bj9pPExlLTEmJnZpKEVlW2krMV0pOnJpKFNlPWksdCkpfX0sZWU9e21vdXNlb3ZlcjpmdW5jdGlvbigpe1BlJiYobGkoKSx6ZT0hMCl9LG1vdXNlb3V0OmZ1bmN0aW9uKCl7emUmJih1aSgpLHplPSExKX19LG5lPXt2aXNpYmlsaXR5Y2hhbmdlOmZ1bmN0aW9uKCl7Ty5oaWRkZW4/UGUmJihsaSgpLHFlPSEwKTpxZSYmKHVpKCkscWU9ITEpfX0saWU9e2tleWRvd246ZnVuY3Rpb24odCl7dD1waSh0KTt2YXIgZT1bYS5MRUZULGEuUklHSFRdLmluZGV4T2YodC5rZXlDb2RlKTswPD1lJiZvaSh0LDA9PT1lPy0xOjEpfX0sYWU9e3RvdWNoc3RhcnQ6eGksdG91Y2htb3ZlOmJpLHRvdWNoZW5kOndpLHRvdWNoY2FuY2VsOndpfSxyZT17bW91c2Vkb3duOnhpLG1vdXNlbW92ZTpiaSxtb3VzZXVwOndpLG1vdXNlbGVhdmU6d2l9LG9lPWxuKFwiY29udHJvbHNcIiksdWU9bG4oXCJuYXZcIiksbGU9ISEkfHxILm5hdkFzVGh1bWJuYWlscyxzZT1sbihcImF1dG9wbGF5XCIpLGNlPWxuKFwidG91Y2hcIiksZmU9bG4oXCJtb3VzZURyYWdcIiksZGU9XCJ0bnMtc2xpZGUtYWN0aXZlXCIsdmU9XCJ0bnMtc2xpZGUtY2xvbmVkXCIscGU9XCJ0bnMtY29tcGxldGVcIixoZT17bG9hZDpmdW5jdGlvbih0KXtrbihoaSh0KSl9LGVycm9yOmZ1bmN0aW9uKHQpe2U9aGkodCksemkoZSxcImZhaWxlZFwiKSxSbihlKTt2YXIgZX19LG1lPVwiZm9yY2VcIj09PUgucHJldmVudFNjcm9sbE9uVG91Y2g7aWYob2UpdmFyIHllLGdlLHhlPUguY29udHJvbHNDb250YWluZXIsYmU9SC5jb250cm9sc0NvbnRhaW5lcj9ILmNvbnRyb2xzQ29udGFpbmVyLm91dGVySFRNTDpcIlwiLHdlPUgucHJldkJ1dHRvbixDZT1ILm5leHRCdXR0b24sTWU9SC5wcmV2QnV0dG9uP0gucHJldkJ1dHRvbi5vdXRlckhUTUw6XCJcIixUZT1ILm5leHRCdXR0b24/SC5uZXh0QnV0dG9uLm91dGVySFRNTDpcIlwiO2lmKHVlKXZhciBFZSxBZT1ILm5hdkNvbnRhaW5lcixOZT1ILm5hdkNvbnRhaW5lcj9ILm5hdkNvbnRhaW5lci5vdXRlckhUTUw6XCJcIixMZT0kP1E6TWkoKSxCZT0wLFNlPS0xLEhlPWFuKCksT2U9SGUsRGU9XCJ0bnMtbmF2LWFjdGl2ZVwiLGtlPVwiQ2Fyb3VzZWwgUGFnZSBcIixSZT1cIiAoQ3VycmVudCBTbGlkZSlcIjtpZihzZSl2YXIgSWUsUGUsemUsV2UscWUsRmU9XCJmb3J3YXJkXCI9PT1ILmF1dG9wbGF5RGlyZWN0aW9uPzE6LTEsamU9SC5hdXRvcGxheUJ1dHRvbixWZT1ILmF1dG9wbGF5QnV0dG9uP0guYXV0b3BsYXlCdXR0b24ub3V0ZXJIVE1MOlwiXCIsR2U9W1wiPHNwYW4gY2xhc3M9J3Rucy12aXN1YWxseS1oaWRkZW4nPlwiLFwiIGFuaW1hdGlvbjwvc3Bhbj5cIl07aWYoY2V8fGZlKXZhciBRZSxYZSxZZT17fSxLZT17fSxKZT0hMSxVZT1GP2Z1bmN0aW9uKHQsZSl7cmV0dXJuIHQueC1lLnh9OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQueS1lLnl9OyR8fCRlKEt0fHxfdCksciYmKE90PXIsRHQ9XCJ0cmFuc2xhdGVcIixvPyhEdCs9Rj9cIjNkKFwiOlwiM2QoMHB4LCBcIixrdD1GP1wiLCAwcHgsIDBweClcIjpcIiwgMHB4KVwiKTooRHQrPUY/XCJYKFwiOlwiWShcIixrdD1cIilcIikpLEkmJihWLmNsYXNzTmFtZT1WLmNsYXNzTmFtZS5yZXBsYWNlKFwidG5zLXZwZml4XCIsXCJcIikpLGZ1bmN0aW9uKCl7bG4oXCJndXR0ZXJcIik7VC5jbGFzc05hbWU9XCJ0bnMtb3V0ZXJcIixqLmNsYXNzTmFtZT1cInRucy1pbm5lclwiLFQuaWQ9WXQrXCItb3dcIixqLmlkPVl0K1wiLWl3XCIsXCJcIj09PVYuaWQmJihWLmlkPVl0KTtYdCs9Z3x8JD9cIiB0bnMtc3VicGl4ZWxcIjpcIiB0bnMtbm8tc3VicGl4ZWxcIixYdCs9eT9cIiB0bnMtY2FsY1wiOlwiIHRucy1uby1jYWxjXCIsJCYmKFh0Kz1cIiB0bnMtYXV0b3dpZHRoXCIpO1h0Kz1cIiB0bnMtXCIrSC5heGlzLFYuY2xhc3NOYW1lKz1YdCxJPygoTT1PLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLmlkPVl0K1wiLW13XCIsTS5jbGFzc05hbWU9XCJ0bnMtb3ZoXCIsVC5hcHBlbmRDaGlsZChNKSxNLmFwcGVuZENoaWxkKGopKTpULmFwcGVuZENoaWxkKGopO2lmKGR0KXt2YXIgdD1NfHxqO3QuY2xhc3NOYW1lKz1cIiB0bnMtYWhcIn1pZihFLmluc2VydEJlZm9yZShULFYpLGouYXBwZW5kQ2hpbGQoViksSWkoRyxmdW5jdGlvbih0LGUpe3ppKHQsXCJ0bnMtaXRlbVwiKSx0LmlkfHwodC5pZD1ZdCtcIi1pdGVtXCIrZSksIUkmJlcmJnppKHQsVyksamkodCx7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwiLHRhYmluZGV4OlwiLTFcIn0pfSksTnQpe2Zvcih2YXIgZT1PLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxuPU8uY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGk9TnQ7aS0tOyl7dmFyIGE9aSVRLHI9R1thXS5jbG9uZU5vZGUoITApO2lmKHppKHIsdmUpLFZpKHIsXCJpZFwiKSxuLmluc2VydEJlZm9yZShyLG4uZmlyc3RDaGlsZCksSSl7dmFyIG89R1tRLTEtYV0uY2xvbmVOb2RlKCEwKTt6aShvLHZlKSxWaShvLFwiaWRcIiksZS5hcHBlbmRDaGlsZChvKX19Vi5pbnNlcnRCZWZvcmUoZSxWLmZpcnN0Q2hpbGQpLFYuYXBwZW5kQ2hpbGQobiksRz1WLmNoaWxkcmVufX0oKSxmdW5jdGlvbigpe2lmKCFJKWZvcih2YXIgdD1JdCxlPUl0K01hdGgubWluKFEscnQpO3Q8ZTt0Kyspe3ZhciBuPUdbdF07bi5zdHlsZS5sZWZ0PTEwMCoodC1JdCkvcnQrXCIlXCIsemkobixQKSxXaShuLFcpfUYmJihnfHwkPyhraShNdCxcIiNcIitZdCtcIiA+IC50bnMtaXRlbVwiLFwiZm9udC1zaXplOlwiK20uZ2V0Q29tcHV0ZWRTdHlsZShHWzBdKS5mb250U2l6ZStcIjtcIixSaShNdCkpLGtpKE10LFwiI1wiK1l0LFwiZm9udC1zaXplOjA7XCIsUmkoTXQpKSk6SSYmSWkoRyxmdW5jdGlvbih0LGUpe3ZhciBuO3Quc3R5bGUubWFyZ2luTGVmdD0obj1lLHk/eStcIihcIisxMDAqbitcIiUgLyBcIitMdCtcIilcIjoxMDAqbi9MdCtcIiVcIil9KSk7aWYoRCl7aWYoeCl7dmFyIGk9TSYmSC5hdXRvSGVpZ2h0P2huKEguc3BlZWQpOlwiXCI7a2koTXQsXCIjXCIrWXQrXCItbXdcIixpLFJpKE10KSl9aT1jbihILmVkZ2VQYWRkaW5nLEguZ3V0dGVyLEguZml4ZWRXaWR0aCxILnNwZWVkLEguYXV0b0hlaWdodCksa2koTXQsXCIjXCIrWXQrXCItaXdcIixpLFJpKE10KSksSSYmKGk9RiYmISQ/XCJ3aWR0aDpcIitmbihILmZpeGVkV2lkdGgsSC5ndXR0ZXIsSC5pdGVtcykrXCI7XCI6XCJcIix4JiYoaSs9aG4oc3QpKSxraShNdCxcIiNcIitZdCxpLFJpKE10KSkpLGk9RiYmISQ/ZG4oSC5maXhlZFdpZHRoLEguZ3V0dGVyLEguaXRlbXMpOlwiXCIsSC5ndXR0ZXImJihpKz12bihILmd1dHRlcikpLEl8fCh4JiYoaSs9aG4oc3QpKSxiJiYoaSs9bW4oc3QpKSksaSYma2koTXQsXCIjXCIrWXQrXCIgPiAudG5zLWl0ZW1cIixpLFJpKE10KSl9ZWxzZXtJJiZkdCYmKE0uc3R5bGVbeF09c3QvMWUzK1wic1wiKSxqLnN0eWxlLmNzc1RleHQ9Y24oZXQsbnQsdHQsZHQpLEkmJkYmJiEkJiYoVi5zdHlsZS53aWR0aD1mbih0dCxudCxydCkpO3ZhciBpPUYmJiEkP2RuKHR0LG50LHJ0KTpcIlwiO250JiYoaSs9dm4obnQpKSxpJiZraShNdCxcIiNcIitZdCtcIiA+IC50bnMtaXRlbVwiLGksUmkoTXQpKX1pZihrJiZEKWZvcih2YXIgYSBpbiBrKXthPXBhcnNlSW50KGEpO3ZhciByPWtbYV0saT1cIlwiLG89XCJcIix1PVwiXCIsbD1cIlwiLHM9XCJcIixjPSQ/bnVsbDpzbihcIml0ZW1zXCIsYSksZj1zbihcImZpeGVkV2lkdGhcIixhKSxkPXNuKFwic3BlZWRcIixhKSx2PXNuKFwiZWRnZVBhZGRpbmdcIixhKSxwPXNuKFwiYXV0b0hlaWdodFwiLGEpLGg9c24oXCJndXR0ZXJcIixhKTt4JiZNJiZzbihcImF1dG9IZWlnaHRcIixhKSYmXCJzcGVlZFwiaW4gciYmKG89XCIjXCIrWXQrXCItbXd7XCIraG4oZCkrXCJ9XCIpLChcImVkZ2VQYWRkaW5nXCJpbiByfHxcImd1dHRlclwiaW4gcikmJih1PVwiI1wiK1l0K1wiLWl3e1wiK2NuKHYsaCxmLGQscCkrXCJ9XCIpLEkmJkYmJiEkJiYoXCJmaXhlZFdpZHRoXCJpbiByfHxcIml0ZW1zXCJpbiByfHx0dCYmXCJndXR0ZXJcImluIHIpJiYobD1cIndpZHRoOlwiK2ZuKGYsaCxjKStcIjtcIikseCYmXCJzcGVlZFwiaW4gciYmKGwrPWhuKGQpKSxsJiYobD1cIiNcIitZdCtcIntcIitsK1wifVwiKSwoXCJmaXhlZFdpZHRoXCJpbiByfHx0dCYmXCJndXR0ZXJcImluIHJ8fCFJJiZcIml0ZW1zXCJpbiByKSYmKHMrPWRuKGYsaCxjKSksXCJndXR0ZXJcImluIHImJihzKz12bihoKSksIUkmJlwic3BlZWRcImluIHImJih4JiYocys9aG4oZCkpLGImJihzKz1tbihkKSkpLHMmJihzPVwiI1wiK1l0K1wiID4gLnRucy1pdGVte1wiK3MrXCJ9XCIpLChpPW8rdStsK3MpJiZNdC5pbnNlcnRSdWxlKFwiQG1lZGlhIChtaW4td2lkdGg6IFwiK2EvMTYrXCJlbSkge1wiK2krXCJ9XCIsTXQuY3NzUnVsZXMubGVuZ3RoKX19KCkseW4oKTt2YXIgX2U9ZnQ/ST9mdW5jdGlvbigpe3ZhciB0PXp0LGU9V3Q7dCs9b3QsZS09b3QsZXQ/KHQrPTEsZS09MSk6dHQmJihpdCtudCklKHR0K250KSYmKGUtPTEpLE50JiYoZTxJdD9JdC09UTpJdDx0JiYoSXQrPVEpKX06ZnVuY3Rpb24oKXtpZihXdDxJdClmb3IoO3p0K1E8PUl0OylJdC09UTtlbHNlIGlmKEl0PHp0KWZvcig7SXQ8PVd0LVE7KUl0Kz1RfTpmdW5jdGlvbigpe0l0PU1hdGgubWF4KHp0LE1hdGgubWluKFd0LEl0KSl9LFplPUk/ZnVuY3Rpb24oKXt2YXIgZSxuLGksYSx0LHIsbyx1LGwscyxjO0puKFYsXCJcIikseHx8IXN0Pyh0aSgpLHN0JiZZaShWKXx8YWkoKSk6KGU9VixuPU90LGk9RHQsYT1rdCx0PVpuKCkscj1zdCxvPWFpLHU9TWF0aC5taW4ociwxMCksbD0wPD10LmluZGV4T2YoXCIlXCIpP1wiJVwiOlwicHhcIix0PXQucmVwbGFjZShsLFwiXCIpLHM9TnVtYmVyKGUuc3R5bGVbbl0ucmVwbGFjZShpLFwiXCIpLnJlcGxhY2UoYSxcIlwiKS5yZXBsYWNlKGwsXCJcIikpLGM9KHQtcykvcip1LHNldFRpbWVvdXQoZnVuY3Rpb24gdCgpe3ItPXUscys9YyxlLnN0eWxlW25dPWkrcytsK2EsMDxyP3NldFRpbWVvdXQodCx1KTpvKCl9LHUpKSxGfHxDaSgpfTpmdW5jdGlvbigpe0F0PVtdO3ZhciB0PXt9O3Rbc109dFtjXT1haSxfaShHW1B0XSx0KSxVaShHW0l0XSx0KSxlaShQdCxQLHosITApLGVpKEl0LFcsUCkscyYmYyYmc3QmJllpKFYpfHxhaSgpfTtyZXR1cm57dmVyc2lvbjpcIjIuOS4yXCIsZ2V0SW5mbzpFaSxldmVudHM6UXQsZ29UbzpyaSxwbGF5OmZ1bmN0aW9uKCl7Z3QmJiFQZSYmKGNpKCksV2U9ITEpfSxwYXVzZTpmdW5jdGlvbigpe1BlJiYoZmkoKSxXZT0hMCl9LGlzT246WSx1cGRhdGVTbGlkZXJIZWlnaHQ6Rm4scmVmcmVzaDp5bixkZXN0cm95OmZ1bmN0aW9uKCl7aWYoTXQuZGlzYWJsZWQ9ITAsTXQub3duZXJOb2RlJiZNdC5vd25lck5vZGUucmVtb3ZlKCksX2kobSx7cmVzaXplOkNufSksbHQmJl9pKE8saWUpLHhlJiZfaSh4ZSwkdCksQWUmJl9pKEFlLHRlKSxfaShWLGVlKSxfaShWLG5lKSxqZSYmX2koamUse2NsaWNrOmRpfSksZ3QmJmNsZWFySW50ZXJ2YWwoSWUpLEkmJnMpe3ZhciB0PXt9O3Rbc109YWksX2koVix0KX1tdCYmX2koVixhZSkseXQmJl9pKFYscmUpO3ZhciByPVtBLGJlLE1lLFRlLE5lLFZlXTtmb3IodmFyIGUgaW4gZC5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7dmFyIG49XCJjb250YWluZXJcIj09PXQ/VDpIW3RdO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBuJiZuKXt2YXIgaT0hIW4ucHJldmlvdXNFbGVtZW50U2libGluZyYmbi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLGE9bi5wYXJlbnROb2RlO24ub3V0ZXJIVE1MPXJbZV0sSFt0XT1pP2kubmV4dEVsZW1lbnRTaWJsaW5nOmEuZmlyc3RFbGVtZW50Q2hpbGR9fSksZD1QPXo9Qz1XPUY9VD1qPVY9RT1BPUc9UT1xPVg9JD10dD1ldD1udD1pdD1ydD1vdD11dD1sdD1zdD1jdD1mdD1kdD1NdD1UdD1OPUF0PU50PUx0PUJ0PVN0PUh0PU90PUR0PWt0PVJ0PUl0PVB0PXp0PVd0PUZ0PWp0PVZ0PUd0PVF0PVh0PVl0PUt0PUp0PVV0PV90PVp0PSR0PXRlPWVlPW5lPWllPWFlPXJlPW9lPXVlPWxlPXNlPWNlPWZlPWRlPXBlPWhlPUw9dnQ9cHQ9eGU9YmU9d2U9Q2U9eWU9Z2U9aHQ9QWU9TmU9RWU9TGU9QmU9U2U9SGU9T2U9RGU9a2U9UmU9Z3Q9eHQ9RmU9YnQ9d3Q9amU9VmU9Q3Q9R2U9SWU9UGU9emU9V2U9cWU9WWU9S2U9UWU9SmU9WGU9VWU9bXQ9eXQ9bnVsbCx0aGlzKVwicmVidWlsZFwiIT09ZSYmKHRoaXNbZV09bnVsbCk7WT0hMX0scmVidWlsZDpmdW5jdGlvbigpe3JldHVybiAkaShMaShILHYpKX19fWZ1bmN0aW9uICRlKHQpe3QmJih2dD1odD1tdD15dD1sdD1ndD13dD1DdD0hMSl9ZnVuY3Rpb24gdG4oKXtmb3IodmFyIHQ9ST9JdC1OdDpJdDt0PDA7KXQrPVE7cmV0dXJuIHQlUSsxfWZ1bmN0aW9uIGVuKHQpe3JldHVybiB0PXQ/TWF0aC5tYXgoMCxNYXRoLm1pbihmdD9RLTE6US1ydCx0KSk6MCxJP3QrTnQ6dH1mdW5jdGlvbiBubih0KXtmb3IobnVsbD09dCYmKHQ9SXQpLEkmJih0LT1OdCk7dDwwOyl0Kz1RO3JldHVybiBNYXRoLmZsb29yKHQlUSl9ZnVuY3Rpb24gYW4oKXt2YXIgdCxlPW5uKCk7cmV0dXJuIHQ9bGU/ZTp0dHx8JD9NYXRoLmNlaWwoKGUrMSkqTGUvUS0xKTpNYXRoLmZsb29yKGUvcnQpLCFmdCYmSSYmSXQ9PT1XdCYmKHQ9TGUtMSksdH1mdW5jdGlvbiBybigpe3JldHVybiBtLmlubmVyV2lkdGh8fE8uZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRofHxPLmJvZHkuY2xpZW50V2lkdGh9ZnVuY3Rpb24gb24odCl7cmV0dXJuXCJ0b3BcIj09PXQ/XCJhZnRlcmJlZ2luXCI6XCJiZWZvcmVlbmRcIn1mdW5jdGlvbiB1bigpe3ZhciB0PWV0PzIqZXQtbnQ6MDtyZXR1cm4gZnVuY3Rpb24gdChlKXtpZihudWxsIT1lKXt2YXIgbixpLGE9Ty5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBlLmFwcGVuZENoaWxkKGEpLGk9KG49YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkucmlnaHQtbi5sZWZ0LGEucmVtb3ZlKCksaXx8dChlLnBhcmVudE5vZGUpfX0oRSktdH1mdW5jdGlvbiBsbih0KXtpZihIW3RdKXJldHVybiEwO2lmKGspZm9yKHZhciBlIGluIGspaWYoa1tlXVt0XSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBzbih0LGUpe2lmKG51bGw9PWUmJihlPVgpLFwiaXRlbXNcIj09PXQmJnR0KXJldHVybiBNYXRoLmZsb29yKChpdCtudCkvKHR0K250KSl8fDE7dmFyIG49SFt0XTtpZihrKWZvcih2YXIgaSBpbiBrKWU+PXBhcnNlSW50KGkpJiZ0IGluIGtbaV0mJihuPWtbaV1bdF0pO3JldHVyblwic2xpZGVCeVwiPT09dCYmXCJwYWdlXCI9PT1uJiYobj1zbihcIml0ZW1zXCIpKSxJfHxcInNsaWRlQnlcIiE9PXQmJlwiaXRlbXNcIiE9PXR8fChuPU1hdGguZmxvb3IobikpLG59ZnVuY3Rpb24gY24odCxlLG4saSxhKXt2YXIgcj1cIlwiO2lmKHZvaWQgMCE9PXQpe3ZhciBvPXQ7ZSYmKG8tPWUpLHI9Rj9cIm1hcmdpbjogMCBcIitvK1wicHggMCBcIit0K1wicHg7XCI6XCJtYXJnaW46IFwiK3QrXCJweCAwIFwiK28rXCJweCAwO1wifWVsc2UgaWYoZSYmIW4pe3ZhciB1PVwiLVwiK2UrXCJweFwiO3I9XCJtYXJnaW46IDAgXCIrKEY/dStcIiAwIDBcIjpcIjAgXCIrdStcIiAwXCIpK1wiO1wifXJldHVybiFJJiZhJiZ4JiZpJiYocis9aG4oaSkpLHJ9ZnVuY3Rpb24gZm4odCxlLG4pe3JldHVybiB0Pyh0K2UpKkx0K1wicHhcIjp5P3krXCIoXCIrMTAwKkx0K1wiJSAvIFwiK24rXCIpXCI6MTAwKkx0L24rXCIlXCJ9ZnVuY3Rpb24gZG4odCxlLG4pe3ZhciBpO2lmKHQpaT10K2UrXCJweFwiO2Vsc2V7SXx8KG49TWF0aC5mbG9vcihuKSk7dmFyIGE9ST9MdDpuO2k9eT95K1wiKDEwMCUgLyBcIithK1wiKVwiOjEwMC9hK1wiJVwifXJldHVybiBpPVwid2lkdGg6XCIraSxcImlubmVyXCIhPT1SP2krXCI7XCI6aStcIiAhaW1wb3J0YW50O1wifWZ1bmN0aW9uIHZuKHQpe3ZhciBlPVwiXCI7ITEhPT10JiYoZT0oRj9cInBhZGRpbmctXCI6XCJtYXJnaW4tXCIpKyhGP1wicmlnaHRcIjpcImJvdHRvbVwiKStcIjogXCIrdCtcInB4O1wiKTtyZXR1cm4gZX1mdW5jdGlvbiBwbih0LGUpe3ZhciBuPXQuc3Vic3RyaW5nKDAsdC5sZW5ndGgtZSkudG9Mb3dlckNhc2UoKTtyZXR1cm4gbiYmKG49XCItXCIrbitcIi1cIiksbn1mdW5jdGlvbiBobih0KXtyZXR1cm4gcG4oeCwxOCkrXCJ0cmFuc2l0aW9uLWR1cmF0aW9uOlwiK3QvMWUzK1wicztcIn1mdW5jdGlvbiBtbih0KXtyZXR1cm4gcG4oYiwxNykrXCJhbmltYXRpb24tZHVyYXRpb246XCIrdC8xZTMrXCJzO1wifWZ1bmN0aW9uIHluKCl7aWYobG4oXCJhdXRvSGVpZ2h0XCIpfHwkfHwhRil7dmFyIHQ9Vi5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nXCIpO0lpKHQsZnVuY3Rpb24odCl7dmFyIGU9dC5zcmM7VHR8fChlJiZlLmluZGV4T2YoXCJkYXRhOmltYWdlXCIpPDA/KHQuc3JjPVwiXCIsVWkodCxoZSksemkodCxcImxvYWRpbmdcIiksdC5zcmM9ZSk6a24odCkpfSksQWkoZnVuY3Rpb24oKXt6bihHaSh0KSxmdW5jdGlvbigpe0w9ITB9KX0pLGxuKFwiYXV0b0hlaWdodFwiKSYmKHQ9SW4oSXQsTWF0aC5taW4oSXQrcnQtMSxMdC0xKSkpLFR0P2duKCk6QWkoZnVuY3Rpb24oKXt6bihHaSh0KSxnbil9KX1lbHNlIEkmJiRuKCksYm4oKSx3bigpfWZ1bmN0aW9uIGduKCl7aWYoJCYmMTxRKXt2YXIgaT1mdD9JdDpRLTE7IWZ1bmN0aW9uIHQoKXt2YXIgZT1HW2ldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsbj1HW2ktMV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQ7TWF0aC5hYnMoZS1uKTw9MT94bigpOnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0KCl9LDE2KX0oKX1lbHNlIHhuKCl9ZnVuY3Rpb24geG4oKXtGJiYhJHx8KGpuKCksJD8oU3Q9X24oKSxVdCYmKF90PVRuKCkpLFd0PVJ0KCksJGUoS3R8fF90KSk6Q2koKSksSSYmJG4oKSxibigpLHduKCl9ZnVuY3Rpb24gYm4oKXtpZihWbigpLFQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLCc8ZGl2IGNsYXNzPVwidG5zLWxpdmVyZWdpb24gdG5zLXZpc3VhbGx5LWhpZGRlblwiIGFyaWEtbGl2ZT1cInBvbGl0ZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiPnNsaWRlIDxzcGFuIGNsYXNzPVwiY3VycmVudFwiPicrSG4oKStcIjwvc3Bhbj4gIG9mIFwiK1ErXCI8L2Rpdj5cIiksQj1ULnF1ZXJ5U2VsZWN0b3IoXCIudG5zLWxpdmVyZWdpb24gLmN1cnJlbnRcIiksc2Upe3ZhciB0PWd0P1wic3RvcFwiOlwic3RhcnRcIjtqZT9qaShqZSx7XCJkYXRhLWFjdGlvblwiOnR9KTpILmF1dG9wbGF5QnV0dG9uT3V0cHV0JiYoVC5pbnNlcnRBZGphY2VudEhUTUwob24oSC5hdXRvcGxheVBvc2l0aW9uKSwnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1hY3Rpb249XCInK3QrJ1wiPicrR2VbMF0rdCtHZVsxXStidFswXStcIjwvYnV0dG9uPlwiKSxqZT1ULnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1hY3Rpb25dXCIpKSxqZSYmVWkoamUse2NsaWNrOmRpfSksZ3QmJihjaSgpLHd0JiZVaShWLGVlKSxDdCYmVWkoVixuZSkpfWlmKHVlKXtpZihBZSlqaShBZSx7XCJhcmlhLWxhYmVsXCI6XCJDYXJvdXNlbCBQYWdpbmF0aW9uXCJ9KSxJaShFZT1BZS5jaGlsZHJlbixmdW5jdGlvbih0LGUpe2ppKHQse1wiZGF0YS1uYXZcIjplLHRhYmluZGV4OlwiLTFcIixcImFyaWEtbGFiZWxcIjprZSsoZSsxKSxcImFyaWEtY29udHJvbHNcIjpZdH0pfSk7ZWxzZXtmb3IodmFyIGU9XCJcIixuPWxlP1wiXCI6J3N0eWxlPVwiZGlzcGxheTpub25lXCInLGk9MDtpPFE7aSsrKWUrPSc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLW5hdj1cIicraSsnXCIgdGFiaW5kZXg9XCItMVwiIGFyaWEtY29udHJvbHM9XCInK1l0KydcIiAnK24rJyBhcmlhLWxhYmVsPVwiJytrZSsoaSsxKSsnXCI+PC9idXR0b24+JztlPSc8ZGl2IGNsYXNzPVwidG5zLW5hdlwiIGFyaWEtbGFiZWw9XCJDYXJvdXNlbCBQYWdpbmF0aW9uXCI+JytlK1wiPC9kaXY+XCIsVC5pbnNlcnRBZGphY2VudEhUTUwob24oSC5uYXZQb3NpdGlvbiksZSksQWU9VC5xdWVyeVNlbGVjdG9yKFwiLnRucy1uYXZcIiksRWU9QWUuY2hpbGRyZW59aWYoVGkoKSx4KXt2YXIgYT14LnN1YnN0cmluZygwLHgubGVuZ3RoLTE4KS50b0xvd2VyQ2FzZSgpLHI9XCJ0cmFuc2l0aW9uOiBhbGwgXCIrc3QvMWUzK1wic1wiO2EmJihyPVwiLVwiK2ErXCItXCIrciksa2koTXQsXCJbYXJpYS1jb250cm9sc149XCIrWXQrXCItaXRlbV1cIixyLFJpKE10KSl9amkoRWVbSGVdLHtcImFyaWEtbGFiZWxcIjprZSsoSGUrMSkrUmV9KSxWaShFZVtIZV0sXCJ0YWJpbmRleFwiKSx6aShFZVtIZV0sRGUpLFVpKEFlLHRlKX1vZSYmKHhlfHx3ZSYmQ2V8fChULmluc2VydEFkamFjZW50SFRNTChvbihILmNvbnRyb2xzUG9zaXRpb24pLCc8ZGl2IGNsYXNzPVwidG5zLWNvbnRyb2xzXCIgYXJpYS1sYWJlbD1cIkNhcm91c2VsIE5hdmlnYXRpb25cIiB0YWJpbmRleD1cIjBcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbnRyb2xzPVwicHJldlwiIHRhYmluZGV4PVwiLTFcIiBhcmlhLWNvbnRyb2xzPVwiJytZdCsnXCI+JytwdFswXSsnPC9idXR0b24+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb250cm9scz1cIm5leHRcIiB0YWJpbmRleD1cIi0xXCIgYXJpYS1jb250cm9scz1cIicrWXQrJ1wiPicrcHRbMV0rXCI8L2J1dHRvbj48L2Rpdj5cIikseGU9VC5xdWVyeVNlbGVjdG9yKFwiLnRucy1jb250cm9sc1wiKSksd2UmJkNlfHwod2U9eGUuY2hpbGRyZW5bMF0sQ2U9eGUuY2hpbGRyZW5bMV0pLEguY29udHJvbHNDb250YWluZXImJmppKHhlLHtcImFyaWEtbGFiZWxcIjpcIkNhcm91c2VsIE5hdmlnYXRpb25cIix0YWJpbmRleDpcIjBcIn0pLChILmNvbnRyb2xzQ29udGFpbmVyfHxILnByZXZCdXR0b24mJkgubmV4dEJ1dHRvbikmJmppKFt3ZSxDZV0se1wiYXJpYS1jb250cm9sc1wiOll0LHRhYmluZGV4OlwiLTFcIn0pLChILmNvbnRyb2xzQ29udGFpbmVyfHxILnByZXZCdXR0b24mJkgubmV4dEJ1dHRvbikmJihqaSh3ZSx7XCJkYXRhLWNvbnRyb2xzXCI6XCJwcmV2XCJ9KSxqaShDZSx7XCJkYXRhLWNvbnRyb2xzXCI6XCJuZXh0XCJ9KSkseWU9UW4od2UpLGdlPVFuKENlKSxLbigpLHhlP1VpKHhlLCR0KTooVWkod2UsJHQpLFVpKENlLCR0KSkpLEFuKCl9ZnVuY3Rpb24gd24oKXtpZihJJiZzKXt2YXIgdD17fTt0W3NdPWFpLFVpKFYsdCl9bXQmJlVpKFYsYWUsSC5wcmV2ZW50U2Nyb2xsT25Ub3VjaCkseXQmJlVpKFYscmUpLGx0JiZVaShPLGllKSxcImlubmVyXCI9PT1SP1F0Lm9uKFwib3V0ZXJSZXNpemVkXCIsZnVuY3Rpb24oKXtNbigpLFF0LmVtaXQoXCJpbm5lckxvYWRlZFwiLEVpKCkpfSk6KGt8fHR0fHwkfHxkdHx8IUYpJiZVaShtLHtyZXNpemU6Q259KSxkdCYmKFwib3V0ZXJcIj09PVI/UXQub24oXCJpbm5lckxvYWRlZFwiLFBuKTpLdHx8UG4oKSksRG4oKSxLdD9CbigpOl90JiZMbigpLFF0Lm9uKFwiaW5kZXhDaGFuZ2VkXCIsV24pLFwiaW5uZXJcIj09PVImJlF0LmVtaXQoXCJpbm5lckxvYWRlZFwiLEVpKCkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIEd0JiZHdChFaSgpKSxZPSEwfWZ1bmN0aW9uIENuKHQpe0FpKGZ1bmN0aW9uKCl7TW4ocGkodCkpfSl9ZnVuY3Rpb24gTW4odCl7aWYoWSl7XCJvdXRlclwiPT09UiYmUXQuZW1pdChcIm91dGVyUmVzaXplZFwiLEVpKHQpKSxYPXJuKCk7dmFyIGUsbj1xLGk9ITE7ayYmKEVuKCksKGU9biE9PXEpJiZRdC5lbWl0KFwibmV3QnJlYWtwb2ludFN0YXJ0XCIsRWkodCkpKTt2YXIgYSxyLG8sdSxsPXJ0LHM9S3QsYz1fdCxmPWx0LGQ9dnQsdj1odCxwPW10LGg9eXQsbT1ndCx5PXd0LGc9Q3QseD1JdDtpZihlKXt2YXIgYj10dCx3PWR0LEM9cHQsTT1hdCxUPWJ0O2lmKCFEKXZhciBFPW50LEE9ZXR9aWYobHQ9c24oXCJhcnJvd0tleXNcIiksdnQ9c24oXCJjb250cm9sc1wiKSxodD1zbihcIm5hdlwiKSxtdD1zbihcInRvdWNoXCIpLGF0PXNuKFwiY2VudGVyXCIpLHl0PXNuKFwibW91c2VEcmFnXCIpLGd0PXNuKFwiYXV0b3BsYXlcIiksd3Q9c24oXCJhdXRvcGxheUhvdmVyUGF1c2VcIiksQ3Q9c24oXCJhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5XCIpLGUmJihLdD1zbihcImRpc2FibGVcIiksdHQ9c24oXCJmaXhlZFdpZHRoXCIpLHN0PXNuKFwic3BlZWRcIiksZHQ9c24oXCJhdXRvSGVpZ2h0XCIpLHB0PXNuKFwiY29udHJvbHNUZXh0XCIpLGJ0PXNuKFwiYXV0b3BsYXlUZXh0XCIpLHh0PXNuKFwiYXV0b3BsYXlUaW1lb3V0XCIpLER8fChldD1zbihcImVkZ2VQYWRkaW5nXCIpLG50PXNuKFwiZ3V0dGVyXCIpKSksJGUoS3QpLGl0PXVuKCksRiYmISR8fEt0fHwoam4oKSxGfHwoQ2koKSxpPSEwKSksKHR0fHwkKSYmKFN0PV9uKCksV3Q9UnQoKSksKGV8fHR0KSYmKHJ0PXNuKFwiaXRlbXNcIiksb3Q9c24oXCJzbGlkZUJ5XCIpLChyPXJ0IT09bCkmJih0dHx8JHx8KFd0PVJ0KCkpLF9lKCkpKSxlJiZLdCE9PXMmJihLdD9CbigpOmZ1bmN0aW9uKCl7aWYoIUp0KXJldHVybjtpZihNdC5kaXNhYmxlZD0hMSxWLmNsYXNzTmFtZSs9WHQsJG4oKSxmdClmb3IodmFyIHQ9TnQ7dC0tOylJJiZYaShHW3RdKSxYaShHW0x0LXQtMV0pO2lmKCFJKWZvcih2YXIgZT1JdCxuPUl0K1E7ZTxuO2UrKyl7dmFyIGk9R1tlXSxhPWU8SXQrcnQ/UDpXO2kuc3R5bGUubGVmdD0xMDAqKGUtSXQpL3J0K1wiJVwiLHppKGksYSl9Tm4oKSxKdD0hMX0oKSksVXQmJihlfHx0dHx8JCkmJihfdD1UbigpKSE9PWMmJihfdD8odGkoWm4oZW4oMCkpKSxMbigpKTooIWZ1bmN0aW9uKCl7aWYoIVp0KXJldHVybjtldCYmRCYmKGouc3R5bGUubWFyZ2luPVwiXCIpO2lmKE50KWZvcih2YXIgdD1cInRucy10cmFuc3BhcmVudFwiLGU9TnQ7ZS0tOylJJiZXaShHW2VdLHQpLFdpKEdbTHQtZS0xXSx0KTtObigpLFp0PSExfSgpLGk9ITApKSwkZShLdHx8X3QpLGd0fHwod3Q9Q3Q9ITEpLGx0IT09ZiYmKGx0P1VpKE8saWUpOl9pKE8saWUpKSx2dCE9PWQmJih2dD94ZT9YaSh4ZSk6KHdlJiZYaSh3ZSksQ2UmJlhpKENlKSk6eGU/UWkoeGUpOih3ZSYmUWkod2UpLENlJiZRaShDZSkpKSxodCE9PXYmJihodD8oWGkoQWUpLFRpKCkpOlFpKEFlKSksbXQhPT1wJiYobXQ/VWkoVixhZSxILnByZXZlbnRTY3JvbGxPblRvdWNoKTpfaShWLGFlKSkseXQhPT1oJiYoeXQ/VWkoVixyZSk6X2koVixyZSkpLGd0IT09bSYmKGd0PyhqZSYmWGkoamUpLFBlfHxXZXx8Y2koKSk6KGplJiZRaShqZSksUGUmJmZpKCkpKSx3dCE9PXkmJih3dD9VaShWLGVlKTpfaShWLGVlKSksQ3QhPT1nJiYoQ3Q/VWkoTyxuZSk6X2koTyxuZSkpLGUpe2lmKHR0PT09YiYmYXQ9PT1NfHwoaT0hMCksZHQhPT13JiYoZHR8fChqLnN0eWxlLmhlaWdodD1cIlwiKSksdnQmJnB0IT09QyYmKHdlLmlubmVySFRNTD1wdFswXSxDZS5pbm5lckhUTUw9cHRbMV0pLGplJiZidCE9PVQpe3ZhciBOPWd0PzE6MCxMPWplLmlubmVySFRNTCxCPUwubGVuZ3RoLVRbTl0ubGVuZ3RoO0wuc3Vic3RyaW5nKEIpPT09VFtOXSYmKGplLmlubmVySFRNTD1MLnN1YnN0cmluZygwLEIpK2J0W05dKX19ZWxzZSBhdCYmKHR0fHwkKSYmKGk9ITApO2lmKChyfHx0dCYmISQpJiYoTGU9TWkoKSxUaSgpKSwoYT1JdCE9PXgpPyhRdC5lbWl0KFwiaW5kZXhDaGFuZ2VkXCIsRWkoKSksaT0hMCk6cj9hfHxXbigpOih0dHx8JCkmJihEbigpLFZuKCksU24oKSksciYmIUkmJmZ1bmN0aW9uKCl7Zm9yKHZhciB0PUl0K01hdGgubWluKFEscnQpLGU9THQ7ZS0tOyl7dmFyIG49R1tlXTtJdDw9ZSYmZTx0Pyh6aShuLFwidG5zLW1vdmluZ1wiKSxuLnN0eWxlLmxlZnQ9MTAwKihlLUl0KS9ydCtcIiVcIix6aShuLFApLFdpKG4sVykpOm4uc3R5bGUubGVmdCYmKG4uc3R5bGUubGVmdD1cIlwiLHppKG4sVyksV2kobixQKSksV2kobix6KX1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7SWkoRyxmdW5jdGlvbih0KXtXaSh0LFwidG5zLW1vdmluZ1wiKX0pfSwzMDApfSgpLCFLdCYmIV90KXtpZihlJiYhRCYmKGV0PT09QSYmbnQ9PT1FfHwoai5zdHlsZS5jc3NUZXh0PWNuKGV0LG50LHR0LHN0LGR0KSksRikpe0kmJihWLnN0eWxlLndpZHRoPWZuKHR0LG50LHJ0KSk7dmFyIFM9ZG4odHQsbnQscnQpK3ZuKG50KTt1PVJpKG89TXQpLTEsXCJkZWxldGVSdWxlXCJpbiBvP28uZGVsZXRlUnVsZSh1KTpvLnJlbW92ZVJ1bGUodSksa2koTXQsXCIjXCIrWXQrXCIgPiAudG5zLWl0ZW1cIixTLFJpKE10KSl9ZHQmJlBuKCksaSYmKCRuKCksUHQ9SXQpfWUmJlF0LmVtaXQoXCJuZXdCcmVha3BvaW50RW5kXCIsRWkodCkpfX1mdW5jdGlvbiBUbigpe2lmKCF0dCYmISQpcmV0dXJuIFE8PShhdD9ydC0ocnQtMSkvMjpydCk7dmFyIHQ9dHQ/KHR0K250KSpROk5bUV0sZT1ldD9pdCsyKmV0Oml0K250O3JldHVybiBhdCYmKGUtPXR0PyhpdC10dCkvMjooaXQtKE5bSXQrMV0tTltJdF0tbnQpKS8yKSx0PD1lfWZ1bmN0aW9uIEVuKCl7Zm9yKHZhciB0IGluIHE9MCxrKSh0PXBhcnNlSW50KHQpKTw9WCYmKHE9dCl9ZnVuY3Rpb24gQW4oKXshZ3QmJmplJiZRaShqZSksIWh0JiZBZSYmUWkoQWUpLHZ0fHwoeGU/UWkoeGUpOih3ZSYmUWkod2UpLENlJiZRaShDZSkpKX1mdW5jdGlvbiBObigpe2d0JiZqZSYmWGkoamUpLGh0JiZBZSYmWGkoQWUpLHZ0JiYoeGU/WGkoeGUpOih3ZSYmWGkod2UpLENlJiZYaShDZSkpKX1mdW5jdGlvbiBMbigpe2lmKCFadCl7aWYoZXQmJihqLnN0eWxlLm1hcmdpbj1cIjBweFwiKSxOdClmb3IodmFyIHQ9XCJ0bnMtdHJhbnNwYXJlbnRcIixlPU50O2UtLTspSSYmemkoR1tlXSx0KSx6aShHW0x0LWUtMV0sdCk7QW4oKSxadD0hMH19ZnVuY3Rpb24gQm4oKXtpZighSnQpe2lmKE10LmRpc2FibGVkPSEwLFYuY2xhc3NOYW1lPVYuY2xhc3NOYW1lLnJlcGxhY2UoWHQuc3Vic3RyaW5nKDEpLFwiXCIpLFZpKFYsW1wic3R5bGVcIl0pLGZ0KWZvcih2YXIgdD1OdDt0LS07KUkmJlFpKEdbdF0pLFFpKEdbTHQtdC0xXSk7aWYoRiYmSXx8VmkoaixbXCJzdHlsZVwiXSksIUkpZm9yKHZhciBlPUl0LG49SXQrUTtlPG47ZSsrKXt2YXIgaT1HW2VdO1ZpKGksW1wic3R5bGVcIl0pLFdpKGksUCksV2koaSxXKX1BbigpLEp0PSEwfX1mdW5jdGlvbiBTbigpe3ZhciB0PUhuKCk7Qi5pbm5lckhUTUwhPT10JiYoQi5pbm5lckhUTUw9dCl9ZnVuY3Rpb24gSG4oKXt2YXIgdD1PbigpLGU9dFswXSsxLG49dFsxXSsxO3JldHVybiBlPT09bj9lK1wiXCI6ZStcIiB0byBcIitufWZ1bmN0aW9uIE9uKHQpe251bGw9PXQmJih0PVpuKCkpO3ZhciBuLGksYSxyPUl0O2lmKGF0fHxldD8oJHx8dHQpJiYoaT0tKHBhcnNlRmxvYXQodCkrZXQpLGE9aStpdCsyKmV0KTokJiYoaT1OW0l0XSxhPWkraXQpLCQpTi5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7ZTxMdCYmKChhdHx8ZXQpJiZ0PD1pKy41JiYocj1lKSwuNTw9YS10JiYobj1lKSl9KTtlbHNle2lmKHR0KXt2YXIgZT10dCtudDthdHx8ZXQ/KHI9TWF0aC5mbG9vcihpL2UpLG49TWF0aC5jZWlsKGEvZS0xKSk6bj1yK01hdGguY2VpbChpdC9lKS0xfWVsc2UgaWYoYXR8fGV0KXt2YXIgbz1ydC0xO2lmKGF0PyhyLT1vLzIsbj1JdCtvLzIpOm49SXQrbyxldCl7dmFyIHU9ZXQqcnQvaXQ7ci09dSxuKz11fXI9TWF0aC5mbG9vcihyKSxuPU1hdGguY2VpbChuKX1lbHNlIG49citydC0xO3I9TWF0aC5tYXgociwwKSxuPU1hdGgubWluKG4sTHQtMSl9cmV0dXJuW3Isbl19ZnVuY3Rpb24gRG4oKXtpZihUdCYmIUt0KXt2YXIgdD1PbigpO3QucHVzaChFdCksSW4uYXBwbHkobnVsbCx0KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKCFQaSh0LHBlKSl7dmFyIGU9e307ZVtzXT1mdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpfSxVaSh0LGUpLFVpKHQsaGUpLHQuc3JjPUZpKHQsXCJkYXRhLXNyY1wiKTt2YXIgbj1GaSh0LFwiZGF0YS1zcmNzZXRcIik7biYmKHQuc3Jjc2V0PW4pLHppKHQsXCJsb2FkaW5nXCIpfX0pfX1mdW5jdGlvbiBrbih0KXt6aSh0LFwibG9hZGVkXCIpLFJuKHQpfWZ1bmN0aW9uIFJuKHQpe3ppKHQscGUpLFdpKHQsXCJsb2FkaW5nXCIpLF9pKHQsaGUpfWZ1bmN0aW9uIEluKHQsZSxuKXt2YXIgaT1bXTtmb3Iobnx8KG49XCJpbWdcIik7dDw9ZTspSWkoR1t0XS5xdWVyeVNlbGVjdG9yQWxsKG4pLGZ1bmN0aW9uKHQpe2kucHVzaCh0KX0pLHQrKztyZXR1cm4gaX1mdW5jdGlvbiBQbigpe3ZhciB0PUluLmFwcGx5KG51bGwsT24oKSk7QWkoZnVuY3Rpb24oKXt6bih0LEZuKX0pfWZ1bmN0aW9uIHpuKG4sdCl7cmV0dXJuIEw/dCgpOihuLmZvckVhY2goZnVuY3Rpb24odCxlKXshVHQmJnQuY29tcGxldGUmJlJuKHQpLFBpKHQscGUpJiZuLnNwbGljZShlLDEpfSksbi5sZW5ndGg/dm9pZCBBaShmdW5jdGlvbigpe3puKG4sdCl9KTp0KCkpfWZ1bmN0aW9uIFduKCl7RG4oKSxWbigpLFNuKCksS24oKSxmdW5jdGlvbigpe2lmKGh0JiYoSGU9MDw9U2U/U2U6YW4oKSxTZT0tMSxIZSE9PU9lKSl7dmFyIHQ9RWVbT2VdLGU9RWVbSGVdO2ppKHQse3RhYmluZGV4OlwiLTFcIixcImFyaWEtbGFiZWxcIjprZSsoT2UrMSl9KSxXaSh0LERlKSxqaShlLHtcImFyaWEtbGFiZWxcIjprZSsoSGUrMSkrUmV9KSxWaShlLFwidGFiaW5kZXhcIiksemkoZSxEZSksT2U9SGV9fSgpfWZ1bmN0aW9uIHFuKHQsZSl7Zm9yKHZhciBuPVtdLGk9dCxhPU1hdGgubWluKHQrZSxMdCk7aTxhO2krKyluLnB1c2goR1tpXS5vZmZzZXRIZWlnaHQpO3JldHVybiBNYXRoLm1heC5hcHBseShudWxsLG4pfWZ1bmN0aW9uIEZuKCl7dmFyIHQ9ZHQ/cW4oSXQscnQpOnFuKE50LFEpLGU9TXx8ajtlLnN0eWxlLmhlaWdodCE9PXQmJihlLnN0eWxlLmhlaWdodD10K1wicHhcIil9ZnVuY3Rpb24gam4oKXtOPVswXTt2YXIgbj1GP1wibGVmdFwiOlwidG9wXCIsaT1GP1wicmlnaHRcIjpcImJvdHRvbVwiLGE9R1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtuXTtJaShHLGZ1bmN0aW9uKHQsZSl7ZSYmTi5wdXNoKHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbbl0tYSksZT09PUx0LTEmJk4ucHVzaCh0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2ldLWEpfSl9ZnVuY3Rpb24gVm4oKXt2YXIgdD1PbigpLG49dFswXSxpPXRbMV07SWkoRyxmdW5jdGlvbih0LGUpe248PWUmJmU8PWk/cWkodCxcImFyaWEtaGlkZGVuXCIpJiYoVmkodCxbXCJhcmlhLWhpZGRlblwiLFwidGFiaW5kZXhcIl0pLHppKHQsZGUpKTpxaSh0LFwiYXJpYS1oaWRkZW5cIil8fChqaSh0LHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsdGFiaW5kZXg6XCItMVwifSksV2kodCxkZSkpfSl9ZnVuY3Rpb24gR24odCl7cmV0dXJuIHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBRbih0KXtyZXR1cm5cImJ1dHRvblwiPT09R24odCl9ZnVuY3Rpb24gWG4odCl7cmV0dXJuXCJ0cnVlXCI9PT10LmdldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIil9ZnVuY3Rpb24gWW4odCxlLG4pe3Q/ZS5kaXNhYmxlZD1uOmUuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLG4udG9TdHJpbmcoKSl9ZnVuY3Rpb24gS24oKXtpZih2dCYmIWN0JiYhZnQpe3ZhciB0PXllP3dlLmRpc2FibGVkOlhuKHdlKSxlPWdlP0NlLmRpc2FibGVkOlhuKENlKSxuPUl0PD16dCxpPSFjdCYmV3Q8PUl0O24mJiF0JiZZbih5ZSx3ZSwhMCksIW4mJnQmJlluKHllLHdlLCExKSxpJiYhZSYmWW4oZ2UsQ2UsITApLCFpJiZlJiZZbihnZSxDZSwhMSl9fWZ1bmN0aW9uIEpuKHQsZSl7eCYmKHQuc3R5bGVbeF09ZSl9ZnVuY3Rpb24gVW4odCl7cmV0dXJuIG51bGw9PXQmJih0PUl0KSwkPyhpdC0oZXQ/bnQ6MCktKE5bdCsxXS1OW3RdLW50KSkvMjp0dD8oaXQtdHQpLzI6KHJ0LTEpLzJ9ZnVuY3Rpb24gX24oKXt2YXIgdD1pdCsoZXQ/bnQ6MCktKHR0Pyh0dCtudCkqTHQ6TltMdF0pO3JldHVybiBhdCYmIWZ0JiYodD10dD8tKHR0K250KSooTHQtMSktVW4oKTpVbihMdC0xKS1OW0x0LTFdKSwwPHQmJih0PTApLHR9ZnVuY3Rpb24gWm4odCl7dmFyIGU7aWYobnVsbD09dCYmKHQ9SXQpLEYmJiEkKWlmKHR0KWU9LSh0dCtudCkqdCxhdCYmKGUrPVVuKCkpO2Vsc2V7dmFyIG49cj9MdDpydDthdCYmKHQtPVVuKCkpLGU9MTAwKi10L259ZWxzZSBlPS1OW3RdLGF0JiYkJiYoZSs9VW4oKSk7cmV0dXJuIEJ0JiYoZT1NYXRoLm1heChlLFN0KSksZSs9IUZ8fCR8fHR0P1wicHhcIjpcIiVcIn1mdW5jdGlvbiAkbih0KXtKbihWLFwiMHNcIiksdGkodCl9ZnVuY3Rpb24gdGkodCl7bnVsbD09dCYmKHQ9Wm4oKSksVi5zdHlsZVtPdF09RHQrdCtrdH1mdW5jdGlvbiBlaSh0LGUsbixpKXt2YXIgYT10K3J0O2Z0fHwoYT1NYXRoLm1pbihhLEx0KSk7Zm9yKHZhciByPXQ7cjxhO3IrKyl7dmFyIG89R1tyXTtpfHwoby5zdHlsZS5sZWZ0PTEwMCooci1JdCkvcnQrXCIlXCIpLEMmJnUmJihvLnN0eWxlW3VdPW8uc3R5bGVbbF09Qyooci10KS8xZTMrXCJzXCIpLFdpKG8sZSksemkobyxuKSxpJiZBdC5wdXNoKG8pfX1mdW5jdGlvbiBuaSh0LGUpe0h0JiZfZSgpLChJdCE9PVB0fHxlKSYmKFF0LmVtaXQoXCJpbmRleENoYW5nZWRcIixFaSgpKSxRdC5lbWl0KFwidHJhbnNpdGlvblN0YXJ0XCIsRWkoKSksZHQmJlBuKCksUGUmJnQmJjA8PVtcImNsaWNrXCIsXCJrZXlkb3duXCJdLmluZGV4T2YodC50eXBlKSYmZmkoKSxWdD0hMCxaZSgpKX1mdW5jdGlvbiBpaSh0KXtyZXR1cm4gdC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0vZyxcIlwiKX1mdW5jdGlvbiBhaSh0KXtpZihJfHxWdCl7aWYoUXQuZW1pdChcInRyYW5zaXRpb25FbmRcIixFaSh0KSksIUkmJjA8QXQubGVuZ3RoKWZvcih2YXIgZT0wO2U8QXQubGVuZ3RoO2UrKyl7dmFyIG49QXRbZV07bi5zdHlsZS5sZWZ0PVwiXCIsbCYmdSYmKG4uc3R5bGVbbF09XCJcIixuLnN0eWxlW3VdPVwiXCIpLFdpKG4seiksemkobixXKX1pZighdHx8IUkmJnQudGFyZ2V0LnBhcmVudE5vZGU9PT1WfHx0LnRhcmdldD09PVYmJmlpKHQucHJvcGVydHlOYW1lKT09PWlpKE90KSl7aWYoIUh0KXt2YXIgaT1JdDtfZSgpLEl0IT09aSYmKFF0LmVtaXQoXCJpbmRleENoYW5nZWRcIixFaSgpKSwkbigpKX1cImlubmVyXCI9PT1SJiZRdC5lbWl0KFwiaW5uZXJMb2FkZWRcIixFaSgpKSxWdD0hMSxQdD1JdH19fWZ1bmN0aW9uIHJpKHQsZSl7aWYoIV90KWlmKFwicHJldlwiPT09dClvaShlLC0xKTtlbHNlIGlmKFwibmV4dFwiPT09dClvaShlLDEpO2Vsc2V7aWYoVnQpe2lmKHF0KXJldHVybjthaSgpfXZhciBuPW5uKCksaT0wO2lmKFwiZmlyc3RcIj09PXQ/aT0tbjpcImxhc3RcIj09PXQ/aT1JP1EtcnQtbjpRLTEtbjooXCJudW1iZXJcIiE9dHlwZW9mIHQmJih0PXBhcnNlSW50KHQpKSxpc05hTih0KXx8KGV8fCh0PU1hdGgubWF4KDAsTWF0aC5taW4oUS0xLHQpKSksaT10LW4pKSwhSSYmaSYmTWF0aC5hYnMoaSk8cnQpe3ZhciBhPTA8aT8xOi0xO2krPXp0PD1JdCtpLVE/USphOjIqUSphKi0xfUl0Kz1pLEkmJmZ0JiYoSXQ8enQmJihJdCs9USksV3Q8SXQmJihJdC09USkpLG5uKEl0KSE9PW5uKFB0KSYmbmkoZSl9fWZ1bmN0aW9uIG9pKHQsZSl7aWYoVnQpe2lmKHF0KXJldHVybjthaSgpfXZhciBuO2lmKCFlKXtmb3IodmFyIGk9aGkodD1waSh0KSk7aSE9PXhlJiZbd2UsQ2VdLmluZGV4T2YoaSk8MDspaT1pLnBhcmVudE5vZGU7dmFyIGE9W3dlLENlXS5pbmRleE9mKGkpOzA8PWEmJihuPSEwLGU9MD09PWE/LTE6MSl9aWYoY3Qpe2lmKEl0PT09enQmJi0xPT09ZSlyZXR1cm4gdm9pZCByaShcImxhc3RcIix0KTtpZihJdD09PVd0JiYxPT09ZSlyZXR1cm4gdm9pZCByaShcImZpcnN0XCIsdCl9ZSYmKEl0Kz1vdCplLCQmJihJdD1NYXRoLmZsb29yKEl0KSksbmkobnx8dCYmXCJrZXlkb3duXCI9PT10LnR5cGU/dDpudWxsKSl9ZnVuY3Rpb24gdWkoKXtJZT1zZXRJbnRlcnZhbChmdW5jdGlvbigpe29pKG51bGwsRmUpfSx4dCksUGU9ITB9ZnVuY3Rpb24gbGkoKXtjbGVhckludGVydmFsKEllKSxQZT0hMX1mdW5jdGlvbiBzaSh0LGUpe2ppKGplLHtcImRhdGEtYWN0aW9uXCI6dH0pLGplLmlubmVySFRNTD1HZVswXSt0K0dlWzFdK2V9ZnVuY3Rpb24gY2koKXt1aSgpLGplJiZzaShcInN0b3BcIixidFsxXSl9ZnVuY3Rpb24gZmkoKXtsaSgpLGplJiZzaShcInN0YXJ0XCIsYnRbMF0pfWZ1bmN0aW9uIGRpKCl7UGU/KGZpKCksV2U9ITApOihjaSgpLFdlPSExKX1mdW5jdGlvbiB2aSh0KXt0LmZvY3VzKCl9ZnVuY3Rpb24gcGkodCl7cmV0dXJuIG1pKHQ9dHx8bS5ldmVudCk/dC5jaGFuZ2VkVG91Y2hlc1swXTp0fWZ1bmN0aW9uIGhpKHQpe3JldHVybiB0LnRhcmdldHx8bS5ldmVudC5zcmNFbGVtZW50fWZ1bmN0aW9uIG1pKHQpe3JldHVybiAwPD10LnR5cGUuaW5kZXhPZihcInRvdWNoXCIpfWZ1bmN0aW9uIHlpKHQpe3QucHJldmVudERlZmF1bHQ/dC5wcmV2ZW50RGVmYXVsdCgpOnQucmV0dXJuVmFsdWU9ITF9ZnVuY3Rpb24gZ2koKXtyZXR1cm4gYT1LZS55LVllLnkscj1LZS54LVllLngsdD1NYXRoLmF0YW4yKGEscikqKDE4MC9NYXRoLlBJKSxlPUZ0LG49ITEsaT1NYXRoLmFicyg5MC1NYXRoLmFicyh0KSksOTAtZTw9aT9uPVwiaG9yaXpvbnRhbFwiOmk8PWUmJihuPVwidmVydGljYWxcIiksbj09PUguYXhpczt2YXIgdCxlLG4saSxhLHJ9ZnVuY3Rpb24geGkodCl7aWYoVnQpe2lmKHF0KXJldHVybjthaSgpfWd0JiZQZSYmbGkoKSxKZT0hMCxYZSYmKE5pKFhlKSxYZT1udWxsKTt2YXIgZT1waSh0KTtRdC5lbWl0KG1pKHQpP1widG91Y2hTdGFydFwiOlwiZHJhZ1N0YXJ0XCIsRWkodCkpLCFtaSh0KSYmMDw9W1wiaW1nXCIsXCJhXCJdLmluZGV4T2YoR24oaGkodCkpKSYmeWkodCksS2UueD1ZZS54PWUuY2xpZW50WCxLZS55PVllLnk9ZS5jbGllbnRZLEkmJihRZT1wYXJzZUZsb2F0KFYuc3R5bGVbT3RdLnJlcGxhY2UoRHQsXCJcIikpLEpuKFYsXCIwc1wiKSl9ZnVuY3Rpb24gYmkodCl7aWYoSmUpe3ZhciBlPXBpKHQpO0tlLng9ZS5jbGllbnRYLEtlLnk9ZS5jbGllbnRZLEk/WGV8fChYZT1BaShmdW5jdGlvbigpeyFmdW5jdGlvbiB0KGUpe2lmKCFqdClyZXR1cm4gdm9pZChKZT0hMSk7TmkoWGUpO0plJiYoWGU9QWkoZnVuY3Rpb24oKXt0KGUpfSkpO1wiP1wiPT09anQmJihqdD1naSgpKTtpZihqdCl7IW1lJiZtaShlKSYmKG1lPSEwKTt0cnl7ZS50eXBlJiZRdC5lbWl0KG1pKGUpP1widG91Y2hNb3ZlXCI6XCJkcmFnTW92ZVwiLEVpKGUpKX1jYXRjaCh0KXt9dmFyIG49UWUsaT1VZShLZSxZZSk7aWYoIUZ8fHR0fHwkKW4rPWksbis9XCJweFwiO2Vsc2V7dmFyIGE9cj9pKnJ0KjEwMC8oKGl0K250KSpMdCk6MTAwKmkvKGl0K250KTtuKz1hLG4rPVwiJVwifVYuc3R5bGVbT3RdPUR0K24ra3R9fSh0KX0pKTooXCI/XCI9PT1qdCYmKGp0PWdpKCkpLGp0JiYobWU9ITApKSwoXCJib29sZWFuXCIhPXR5cGVvZiB0LmNhbmNlbGFibGV8fHQuY2FuY2VsYWJsZSkmJm1lJiZ0LnByZXZlbnREZWZhdWx0KCl9fWZ1bmN0aW9uIHdpKGkpe2lmKEplKXtYZSYmKE5pKFhlKSxYZT1udWxsKSxJJiZKbihWLFwiXCIpLEplPSExO3ZhciB0PXBpKGkpO0tlLng9dC5jbGllbnRYLEtlLnk9dC5jbGllbnRZO3ZhciBhPVVlKEtlLFllKTtpZihNYXRoLmFicyhhKSl7aWYoIW1pKGkpKXt2YXIgbj1oaShpKTtVaShuLHtjbGljazpmdW5jdGlvbiB0KGUpe3lpKGUpLF9pKG4se2NsaWNrOnR9KX19KX1JP1hlPUFpKGZ1bmN0aW9uKCl7aWYoRiYmISQpe3ZhciB0PS1hKnJ0LyhpdCtudCk7dD0wPGE/TWF0aC5mbG9vcih0KTpNYXRoLmNlaWwodCksSXQrPXR9ZWxzZXt2YXIgZT0tKFFlK2EpO2lmKGU8PTApSXQ9enQ7ZWxzZSBpZihlPj1OW0x0LTFdKUl0PVd0O2Vsc2UgZm9yKHZhciBuPTA7bjxMdCYmZT49TltuXTspZT5OW0l0PW5dJiZhPDAmJihJdCs9MSksbisrfW5pKGksYSksUXQuZW1pdChtaShpKT9cInRvdWNoRW5kXCI6XCJkcmFnRW5kXCIsRWkoaSkpfSk6anQmJm9pKGksMDxhPy0xOjEpfX1cImF1dG9cIj09PUgucHJldmVudFNjcm9sbE9uVG91Y2gmJihtZT0hMSksRnQmJihqdD1cIj9cIiksZ3QmJiFQZSYmdWkoKX1mdW5jdGlvbiBDaSgpeyhNfHxqKS5zdHlsZS5oZWlnaHQ9TltJdCtydF0tTltJdF0rXCJweFwifWZ1bmN0aW9uIE1pKCl7dmFyIHQ9dHQ/KHR0K250KSpRL2l0OlEvcnQ7cmV0dXJuIE1hdGgubWluKE1hdGguY2VpbCh0KSxRKX1mdW5jdGlvbiBUaSgpe2lmKGh0JiYhbGUmJkxlIT09QmUpe3ZhciB0PUJlLGU9TGUsbj1YaTtmb3IoTGU8QmUmJih0PUxlLGU9QmUsbj1RaSk7dDxlOyluKEVlW3RdKSx0Kys7QmU9TGV9fWZ1bmN0aW9uIEVpKHQpe3JldHVybntjb250YWluZXI6VixzbGlkZUl0ZW1zOkcsbmF2Q29udGFpbmVyOkFlLG5hdkl0ZW1zOkVlLGNvbnRyb2xzQ29udGFpbmVyOnhlLGhhc0NvbnRyb2xzOm9lLHByZXZCdXR0b246d2UsbmV4dEJ1dHRvbjpDZSxpdGVtczpydCxzbGlkZUJ5Om90LGNsb25lQ291bnQ6TnQsc2xpZGVDb3VudDpRLHNsaWRlQ291bnROZXc6THQsaW5kZXg6SXQsaW5kZXhDYWNoZWQ6UHQsZGlzcGxheUluZGV4OnRuKCksbmF2Q3VycmVudEluZGV4OkhlLG5hdkN1cnJlbnRJbmRleENhY2hlZDpPZSxwYWdlczpMZSxwYWdlc0NhY2hlZDpCZSxzaGVldDpNdCxpc09uOlksZXZlbnQ6dHx8e319fWYmJmNvbnNvbGUud2FybihcIk5vIHNsaWRlcyBmb3VuZCBpblwiLEguY29udGFpbmVyKX07cmV0dXJuICRpfSgpOyIsIi8vIENvcHlyaWdodCAyMDE0IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vICAgICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vICAgICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIWZ1bmN0aW9uKGEsYil7dmFyIGM9e30sZD17fSxlPXt9LGY9bnVsbDshZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhKXJldHVybiBhO3ZhciBiPXt9O2Zvcih2YXIgYyBpbiBhKWJbY109YVtjXTtyZXR1cm4gYn1mdW5jdGlvbiBkKCl7dGhpcy5fZGVsYXk9MCx0aGlzLl9lbmREZWxheT0wLHRoaXMuX2ZpbGw9XCJub25lXCIsdGhpcy5faXRlcmF0aW9uU3RhcnQ9MCx0aGlzLl9pdGVyYXRpb25zPTEsdGhpcy5fZHVyYXRpb249MCx0aGlzLl9wbGF5YmFja1JhdGU9MSx0aGlzLl9kaXJlY3Rpb249XCJub3JtYWxcIix0aGlzLl9lYXNpbmc9XCJsaW5lYXJcIix0aGlzLl9lYXNpbmdGdW5jdGlvbj14fWZ1bmN0aW9uIGUoKXtyZXR1cm4gYS5pc0RlcHJlY2F0ZWQoXCJJbnZhbGlkIHRpbWluZyBpbnB1dHNcIixcIjIwMTYtMDMtMDJcIixcIlR5cGVFcnJvciBleGNlcHRpb25zIHdpbGwgYmUgdGhyb3duIGluc3RlYWQuXCIsITApfWZ1bmN0aW9uIGYoYixjLGUpe3ZhciBmPW5ldyBkO3JldHVybiBjJiYoZi5maWxsPVwiYm90aFwiLGYuZHVyYXRpb249XCJhdXRvXCIpLFwibnVtYmVyXCIhPXR5cGVvZiBifHxpc05hTihiKT92b2lkIDAhPT1iJiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiKS5mb3JFYWNoKGZ1bmN0aW9uKGMpe2lmKFwiYXV0b1wiIT1iW2NdKXtpZigoXCJudW1iZXJcIj09dHlwZW9mIGZbY118fFwiZHVyYXRpb25cIj09YykmJihcIm51bWJlclwiIT10eXBlb2YgYltjXXx8aXNOYU4oYltjXSkpKXJldHVybjtpZihcImZpbGxcIj09YyYmdi5pbmRleE9mKGJbY10pPT0tMSlyZXR1cm47aWYoXCJkaXJlY3Rpb25cIj09YyYmdy5pbmRleE9mKGJbY10pPT0tMSlyZXR1cm47aWYoXCJwbGF5YmFja1JhdGVcIj09YyYmMSE9PWJbY10mJmEuaXNEZXByZWNhdGVkKFwiQW5pbWF0aW9uRWZmZWN0VGltaW5nLnBsYXliYWNrUmF0ZVwiLFwiMjAxNC0xMS0yOFwiLFwiVXNlIEFuaW1hdGlvbi5wbGF5YmFja1JhdGUgaW5zdGVhZC5cIikpcmV0dXJuO2ZbY109YltjXX19KTpmLmR1cmF0aW9uPWIsZn1mdW5jdGlvbiBnKGEpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBhJiYoYT1pc05hTihhKT97ZHVyYXRpb246MH06e2R1cmF0aW9uOmF9KSxhfWZ1bmN0aW9uIGgoYixjKXtyZXR1cm4gYj1hLm51bWVyaWNUaW1pbmdUb09iamVjdChiKSxmKGIsYyl9ZnVuY3Rpb24gaShhLGIsYyxkKXtyZXR1cm4gYTwwfHxhPjF8fGM8MHx8Yz4xP3g6ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gZihhLGIsYyl7cmV0dXJuIDMqYSooMS1jKSooMS1jKSpjKzMqYiooMS1jKSpjKmMrYypjKmN9aWYoZTw9MCl7dmFyIGc9MDtyZXR1cm4gYT4wP2c9Yi9hOiFiJiZjPjAmJihnPWQvYyksZyplfWlmKGU+PTEpe3ZhciBoPTA7cmV0dXJuIGM8MT9oPShkLTEpLyhjLTEpOjE9PWMmJmE8MSYmKGg9KGItMSkvKGEtMSkpLDEraCooZS0xKX1mb3IodmFyIGk9MCxqPTE7aTxqOyl7dmFyIGs9KGkraikvMixsPWYoYSxjLGspO2lmKE1hdGguYWJzKGUtbCk8MWUtNSlyZXR1cm4gZihiLGQsayk7bDxlP2k9azpqPWt9cmV0dXJuIGYoYixkLGspfX1mdW5jdGlvbiBqKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGMpe2lmKGM+PTEpcmV0dXJuIDE7dmFyIGQ9MS9hO3JldHVybiBjKz1iKmQsYy1jJWR9fWZ1bmN0aW9uIGsoYSl7Q3x8KEM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSksQy5hbmltYXRpb25UaW1pbmdGdW5jdGlvbj1cIlwiLEMuYW5pbWF0aW9uVGltaW5nRnVuY3Rpb249YTt2YXIgYj1DLmFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uO2lmKFwiXCI9PWImJmUoKSl0aHJvdyBuZXcgVHlwZUVycm9yKGErXCIgaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIGVhc2luZ1wiKTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEpe2lmKFwibGluZWFyXCI9PWEpcmV0dXJuIHg7dmFyIGI9RS5leGVjKGEpO2lmKGIpcmV0dXJuIGkuYXBwbHkodGhpcyxiLnNsaWNlKDEpLm1hcChOdW1iZXIpKTt2YXIgYz1GLmV4ZWMoYSk7aWYoYylyZXR1cm4gaihOdW1iZXIoY1sxXSkse3N0YXJ0OnksbWlkZGxlOnosZW5kOkF9W2NbMl1dKTt2YXIgZD1CW2FdO3JldHVybiBkP2Q6eH1mdW5jdGlvbiBtKGEpe3JldHVybiBNYXRoLmFicyhuKGEpL2EucGxheWJhY2tSYXRlKX1mdW5jdGlvbiBuKGEpe3JldHVybiAwPT09YS5kdXJhdGlvbnx8MD09PWEuaXRlcmF0aW9ucz8wOmEuZHVyYXRpb24qYS5pdGVyYXRpb25zfWZ1bmN0aW9uIG8oYSxiLGMpe2lmKG51bGw9PWIpcmV0dXJuIEc7dmFyIGQ9Yy5kZWxheSthK2MuZW5kRGVsYXk7cmV0dXJuIGI8TWF0aC5taW4oYy5kZWxheSxkKT9IOmI+PU1hdGgubWluKGMuZGVsYXkrYSxkKT9JOkp9ZnVuY3Rpb24gcChhLGIsYyxkLGUpe3N3aXRjaChkKXtjYXNlIEg6cmV0dXJuXCJiYWNrd2FyZHNcIj09Ynx8XCJib3RoXCI9PWI/MDpudWxsO2Nhc2UgSjpyZXR1cm4gYy1lO2Nhc2UgSTpyZXR1cm5cImZvcndhcmRzXCI9PWJ8fFwiYm90aFwiPT1iP2E6bnVsbDtjYXNlIEc6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIHEoYSxiLGMsZCxlKXt2YXIgZj1lO3JldHVybiAwPT09YT9iIT09SCYmKGYrPWMpOmYrPWQvYSxmfWZ1bmN0aW9uIHIoYSxiLGMsZCxlLGYpe3ZhciBnPWE9PT0xLzA/YiUxOmElMTtyZXR1cm4gMCE9PWd8fGMhPT1JfHwwPT09ZHx8MD09PWUmJjAhPT1mfHwoZz0xKSxnfWZ1bmN0aW9uIHMoYSxiLGMsZCl7cmV0dXJuIGE9PT1JJiZiPT09MS8wPzEvMDoxPT09Yz9NYXRoLmZsb29yKGQpLTE6TWF0aC5mbG9vcihkKX1mdW5jdGlvbiB0KGEsYixjKXt2YXIgZD1hO2lmKFwibm9ybWFsXCIhPT1hJiZcInJldmVyc2VcIiE9PWEpe3ZhciBlPWI7XCJhbHRlcm5hdGUtcmV2ZXJzZVwiPT09YSYmKGUrPTEpLGQ9XCJub3JtYWxcIixlIT09MS8wJiZlJTIhPT0wJiYoZD1cInJldmVyc2VcIil9cmV0dXJuXCJub3JtYWxcIj09PWQ/YzoxLWN9ZnVuY3Rpb24gdShhLGIsYyl7dmFyIGQ9byhhLGIsYyksZT1wKGEsYy5maWxsLGIsZCxjLmRlbGF5KTtpZihudWxsPT09ZSlyZXR1cm4gbnVsbDt2YXIgZj1xKGMuZHVyYXRpb24sZCxjLml0ZXJhdGlvbnMsZSxjLml0ZXJhdGlvblN0YXJ0KSxnPXIoZixjLml0ZXJhdGlvblN0YXJ0LGQsYy5pdGVyYXRpb25zLGUsYy5kdXJhdGlvbiksaD1zKGQsYy5pdGVyYXRpb25zLGcsZiksaT10KGMuZGlyZWN0aW9uLGgsZyk7cmV0dXJuIGMuX2Vhc2luZ0Z1bmN0aW9uKGkpfXZhciB2PVwiYmFja3dhcmRzfGZvcndhcmRzfGJvdGh8bm9uZVwiLnNwbGl0KFwifFwiKSx3PVwicmV2ZXJzZXxhbHRlcm5hdGV8YWx0ZXJuYXRlLXJldmVyc2VcIi5zcGxpdChcInxcIikseD1mdW5jdGlvbihhKXtyZXR1cm4gYX07ZC5wcm90b3R5cGU9e19zZXRNZW1iZXI6ZnVuY3Rpb24oYixjKXt0aGlzW1wiX1wiK2JdPWMsdGhpcy5fZWZmZWN0JiYodGhpcy5fZWZmZWN0Ll90aW1pbmdJbnB1dFtiXT1jLHRoaXMuX2VmZmVjdC5fdGltaW5nPWEubm9ybWFsaXplVGltaW5nSW5wdXQodGhpcy5fZWZmZWN0Ll90aW1pbmdJbnB1dCksdGhpcy5fZWZmZWN0LmFjdGl2ZUR1cmF0aW9uPWEuY2FsY3VsYXRlQWN0aXZlRHVyYXRpb24odGhpcy5fZWZmZWN0Ll90aW1pbmcpLHRoaXMuX2VmZmVjdC5fYW5pbWF0aW9uJiZ0aGlzLl9lZmZlY3QuX2FuaW1hdGlvbi5fcmVidWlsZFVuZGVybHlpbmdBbmltYXRpb24oKSl9LGdldCBwbGF5YmFja1JhdGUoKXtyZXR1cm4gdGhpcy5fcGxheWJhY2tSYXRlfSxzZXQgZGVsYXkoYSl7dGhpcy5fc2V0TWVtYmVyKFwiZGVsYXlcIixhKX0sZ2V0IGRlbGF5KCl7cmV0dXJuIHRoaXMuX2RlbGF5fSxzZXQgZW5kRGVsYXkoYSl7dGhpcy5fc2V0TWVtYmVyKFwiZW5kRGVsYXlcIixhKX0sZ2V0IGVuZERlbGF5KCl7cmV0dXJuIHRoaXMuX2VuZERlbGF5fSxzZXQgZmlsbChhKXt0aGlzLl9zZXRNZW1iZXIoXCJmaWxsXCIsYSl9LGdldCBmaWxsKCl7cmV0dXJuIHRoaXMuX2ZpbGx9LHNldCBpdGVyYXRpb25TdGFydChhKXtpZigoaXNOYU4oYSl8fGE8MCkmJmUoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaXRlcmF0aW9uU3RhcnQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIsIHJlY2VpdmVkOiBcIit0aW1pbmcuaXRlcmF0aW9uU3RhcnQpO3RoaXMuX3NldE1lbWJlcihcIml0ZXJhdGlvblN0YXJ0XCIsYSl9LGdldCBpdGVyYXRpb25TdGFydCgpe3JldHVybiB0aGlzLl9pdGVyYXRpb25TdGFydH0sc2V0IGR1cmF0aW9uKGEpe2lmKFwiYXV0b1wiIT1hJiYoaXNOYU4oYSl8fGE8MCkmJmUoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZHVyYXRpb24gbXVzdCBiZSBub24tbmVnYXRpdmUgb3IgYXV0bywgcmVjZWl2ZWQ6IFwiK2EpO3RoaXMuX3NldE1lbWJlcihcImR1cmF0aW9uXCIsYSl9LGdldCBkdXJhdGlvbigpe3JldHVybiB0aGlzLl9kdXJhdGlvbn0sc2V0IGRpcmVjdGlvbihhKXt0aGlzLl9zZXRNZW1iZXIoXCJkaXJlY3Rpb25cIixhKX0sZ2V0IGRpcmVjdGlvbigpe3JldHVybiB0aGlzLl9kaXJlY3Rpb259LHNldCBlYXNpbmcoYSl7dGhpcy5fZWFzaW5nRnVuY3Rpb249bChrKGEpKSx0aGlzLl9zZXRNZW1iZXIoXCJlYXNpbmdcIixhKX0sZ2V0IGVhc2luZygpe3JldHVybiB0aGlzLl9lYXNpbmd9LHNldCBpdGVyYXRpb25zKGEpe2lmKChpc05hTihhKXx8YTwwKSYmZSgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRpb25zIG11c3QgYmUgbm9uLW5lZ2F0aXZlLCByZWNlaXZlZDogXCIrYSk7dGhpcy5fc2V0TWVtYmVyKFwiaXRlcmF0aW9uc1wiLGEpfSxnZXQgaXRlcmF0aW9ucygpe3JldHVybiB0aGlzLl9pdGVyYXRpb25zfX07dmFyIHk9MSx6PS41LEE9MCxCPXtlYXNlOmkoLjI1LC4xLC4yNSwxKSxcImVhc2UtaW5cIjppKC40MiwwLDEsMSksXCJlYXNlLW91dFwiOmkoMCwwLC41OCwxKSxcImVhc2UtaW4tb3V0XCI6aSguNDIsMCwuNTgsMSksXCJzdGVwLXN0YXJ0XCI6aigxLHkpLFwic3RlcC1taWRkbGVcIjpqKDEseiksXCJzdGVwLWVuZFwiOmooMSxBKX0sQz1udWxsLEQ9XCJcXFxccyooLT9cXFxcZCtcXFxcLj9cXFxcZCp8LT9cXFxcLlxcXFxkKylcXFxccypcIixFPW5ldyBSZWdFeHAoXCJjdWJpYy1iZXppZXJcXFxcKFwiK0QrXCIsXCIrRCtcIixcIitEK1wiLFwiK0QrXCJcXFxcKVwiKSxGPS9zdGVwc1xcKFxccyooXFxkKylcXHMqLFxccyooc3RhcnR8bWlkZGxlfGVuZClcXHMqXFwpLyxHPTAsSD0xLEk9MixKPTM7YS5jbG9uZVRpbWluZ0lucHV0PWMsYS5tYWtlVGltaW5nPWYsYS5udW1lcmljVGltaW5nVG9PYmplY3Q9ZyxhLm5vcm1hbGl6ZVRpbWluZ0lucHV0PWgsYS5jYWxjdWxhdGVBY3RpdmVEdXJhdGlvbj1tLGEuY2FsY3VsYXRlSXRlcmF0aW9uUHJvZ3Jlc3M9dSxhLmNhbGN1bGF0ZVBoYXNlPW8sYS5ub3JtYWxpemVFYXNpbmc9ayxhLnBhcnNlRWFzaW5nRnVuY3Rpb249bH0oYyxmKSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSxiKXtyZXR1cm4gYSBpbiBrP2tbYV1bYl18fGI6Yn1mdW5jdGlvbiBkKGEpe3JldHVyblwiZGlzcGxheVwiPT09YXx8MD09PWEubGFzdEluZGV4T2YoXCJhbmltYXRpb25cIiwwKXx8MD09PWEubGFzdEluZGV4T2YoXCJ0cmFuc2l0aW9uXCIsMCl9ZnVuY3Rpb24gZShhLGIsZSl7aWYoIWQoYSkpe3ZhciBmPWhbYV07aWYoZil7aS5zdHlsZVthXT1iO2Zvcih2YXIgZyBpbiBmKXt2YXIgaj1mW2ddLGs9aS5zdHlsZVtqXTtlW2pdPWMoaixrKX19ZWxzZSBlW2FdPWMoYSxiKX19ZnVuY3Rpb24gZihhKXt2YXIgYj1bXTtmb3IodmFyIGMgaW4gYSlpZighKGMgaW5bXCJlYXNpbmdcIixcIm9mZnNldFwiLFwiY29tcG9zaXRlXCJdKSl7dmFyIGQ9YVtjXTtBcnJheS5pc0FycmF5KGQpfHwoZD1bZF0pO2Zvcih2YXIgZSxmPWQubGVuZ3RoLGc9MDtnPGY7ZysrKWU9e30sXCJvZmZzZXRcImluIGE/ZS5vZmZzZXQ9YS5vZmZzZXQ6MT09Zj9lLm9mZnNldD0xOmUub2Zmc2V0PWcvKGYtMSksXCJlYXNpbmdcImluIGEmJihlLmVhc2luZz1hLmVhc2luZyksXCJjb21wb3NpdGVcImluIGEmJihlLmNvbXBvc2l0ZT1hLmNvbXBvc2l0ZSksZVtjXT1kW2ddLGIucHVzaChlKX1yZXR1cm4gYi5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEub2Zmc2V0LWIub2Zmc2V0fSksYn1mdW5jdGlvbiBnKGIpe2Z1bmN0aW9uIGMoKXt2YXIgYT1kLmxlbmd0aDtudWxsPT1kW2EtMV0ub2Zmc2V0JiYoZFthLTFdLm9mZnNldD0xKSxhPjEmJm51bGw9PWRbMF0ub2Zmc2V0JiYoZFswXS5vZmZzZXQ9MCk7Zm9yKHZhciBiPTAsYz1kWzBdLm9mZnNldCxlPTE7ZTxhO2UrKyl7dmFyIGY9ZFtlXS5vZmZzZXQ7aWYobnVsbCE9Zil7Zm9yKHZhciBnPTE7ZzxlLWI7ZysrKWRbYitnXS5vZmZzZXQ9YysoZi1jKSpnLyhlLWIpO2I9ZSxjPWZ9fX1pZihudWxsPT1iKXJldHVybltdO3dpbmRvdy5TeW1ib2wmJlN5bWJvbC5pdGVyYXRvciYmQXJyYXkucHJvdG90eXBlLmZyb20mJmJbU3ltYm9sLml0ZXJhdG9yXSYmKGI9QXJyYXkuZnJvbShiKSksQXJyYXkuaXNBcnJheShiKXx8KGI9ZihiKSk7Zm9yKHZhciBkPWIubWFwKGZ1bmN0aW9uKGIpe3ZhciBjPXt9O2Zvcih2YXIgZCBpbiBiKXt2YXIgZj1iW2RdO2lmKFwib2Zmc2V0XCI9PWQpe2lmKG51bGwhPWYpe2lmKGY9TnVtYmVyKGYpLCFpc0Zpbml0ZShmKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiS2V5ZnJhbWUgb2Zmc2V0cyBtdXN0IGJlIG51bWJlcnMuXCIpO2lmKGY8MHx8Zj4xKXRocm93IG5ldyBUeXBlRXJyb3IoXCJLZXlmcmFtZSBvZmZzZXRzIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxLlwiKX19ZWxzZSBpZihcImNvbXBvc2l0ZVwiPT1kKXtpZihcImFkZFwiPT1mfHxcImFjY3VtdWxhdGVcIj09Zil0aHJvd3t0eXBlOkRPTUV4Y2VwdGlvbi5OT1RfU1VQUE9SVEVEX0VSUixuYW1lOlwiTm90U3VwcG9ydGVkRXJyb3JcIixtZXNzYWdlOlwiYWRkIGNvbXBvc2l0aW5nIGlzIG5vdCBzdXBwb3J0ZWRcIn07aWYoXCJyZXBsYWNlXCIhPWYpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgY29tcG9zaXRlIG1vZGUgXCIrZitcIi5cIil9ZWxzZSBmPVwiZWFzaW5nXCI9PWQ/YS5ub3JtYWxpemVFYXNpbmcoZik6XCJcIitmO2UoZCxmLGMpfXJldHVybiB2b2lkIDA9PWMub2Zmc2V0JiYoYy5vZmZzZXQ9bnVsbCksdm9pZCAwPT1jLmVhc2luZyYmKGMuZWFzaW5nPVwibGluZWFyXCIpLGN9KSxnPSEwLGg9LSgxLzApLGk9MDtpPGQubGVuZ3RoO2krKyl7dmFyIGo9ZFtpXS5vZmZzZXQ7aWYobnVsbCE9ail7aWYoajxoKXRocm93IG5ldyBUeXBlRXJyb3IoXCJLZXlmcmFtZXMgYXJlIG5vdCBsb29zZWx5IHNvcnRlZCBieSBvZmZzZXQuIFNvcnQgb3Igc3BlY2lmeSBvZmZzZXRzLlwiKTtoPWp9ZWxzZSBnPSExfXJldHVybiBkPWQuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLm9mZnNldD49MCYmYS5vZmZzZXQ8PTF9KSxnfHxjKCksZH12YXIgaD17YmFja2dyb3VuZDpbXCJiYWNrZ3JvdW5kSW1hZ2VcIixcImJhY2tncm91bmRQb3NpdGlvblwiLFwiYmFja2dyb3VuZFNpemVcIixcImJhY2tncm91bmRSZXBlYXRcIixcImJhY2tncm91bmRBdHRhY2htZW50XCIsXCJiYWNrZ3JvdW5kT3JpZ2luXCIsXCJiYWNrZ3JvdW5kQ2xpcFwiLFwiYmFja2dyb3VuZENvbG9yXCJdLGJvcmRlcjpbXCJib3JkZXJUb3BDb2xvclwiLFwiYm9yZGVyVG9wU3R5bGVcIixcImJvcmRlclRvcFdpZHRoXCIsXCJib3JkZXJSaWdodENvbG9yXCIsXCJib3JkZXJSaWdodFN0eWxlXCIsXCJib3JkZXJSaWdodFdpZHRoXCIsXCJib3JkZXJCb3R0b21Db2xvclwiLFwiYm9yZGVyQm90dG9tU3R5bGVcIixcImJvcmRlckJvdHRvbVdpZHRoXCIsXCJib3JkZXJMZWZ0Q29sb3JcIixcImJvcmRlckxlZnRTdHlsZVwiLFwiYm9yZGVyTGVmdFdpZHRoXCJdLGJvcmRlckJvdHRvbTpbXCJib3JkZXJCb3R0b21XaWR0aFwiLFwiYm9yZGVyQm90dG9tU3R5bGVcIixcImJvcmRlckJvdHRvbUNvbG9yXCJdLGJvcmRlckNvbG9yOltcImJvcmRlclRvcENvbG9yXCIsXCJib3JkZXJSaWdodENvbG9yXCIsXCJib3JkZXJCb3R0b21Db2xvclwiLFwiYm9yZGVyTGVmdENvbG9yXCJdLGJvcmRlckxlZnQ6W1wiYm9yZGVyTGVmdFdpZHRoXCIsXCJib3JkZXJMZWZ0U3R5bGVcIixcImJvcmRlckxlZnRDb2xvclwiXSxib3JkZXJSYWRpdXM6W1wiYm9yZGVyVG9wTGVmdFJhZGl1c1wiLFwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIixcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsXCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzXCJdLGJvcmRlclJpZ2h0OltcImJvcmRlclJpZ2h0V2lkdGhcIixcImJvcmRlclJpZ2h0U3R5bGVcIixcImJvcmRlclJpZ2h0Q29sb3JcIl0sYm9yZGVyVG9wOltcImJvcmRlclRvcFdpZHRoXCIsXCJib3JkZXJUb3BTdHlsZVwiLFwiYm9yZGVyVG9wQ29sb3JcIl0sYm9yZGVyV2lkdGg6W1wiYm9yZGVyVG9wV2lkdGhcIixcImJvcmRlclJpZ2h0V2lkdGhcIixcImJvcmRlckJvdHRvbVdpZHRoXCIsXCJib3JkZXJMZWZ0V2lkdGhcIl0sZmxleDpbXCJmbGV4R3Jvd1wiLFwiZmxleFNocmlua1wiLFwiZmxleEJhc2lzXCJdLGZvbnQ6W1wiZm9udEZhbWlseVwiLFwiZm9udFNpemVcIixcImZvbnRTdHlsZVwiLFwiZm9udFZhcmlhbnRcIixcImZvbnRXZWlnaHRcIixcImxpbmVIZWlnaHRcIl0sbWFyZ2luOltcIm1hcmdpblRvcFwiLFwibWFyZ2luUmlnaHRcIixcIm1hcmdpbkJvdHRvbVwiLFwibWFyZ2luTGVmdFwiXSxvdXRsaW5lOltcIm91dGxpbmVDb2xvclwiLFwib3V0bGluZVN0eWxlXCIsXCJvdXRsaW5lV2lkdGhcIl0scGFkZGluZzpbXCJwYWRkaW5nVG9wXCIsXCJwYWRkaW5nUmlnaHRcIixcInBhZGRpbmdCb3R0b21cIixcInBhZGRpbmdMZWZ0XCJdfSxpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcImRpdlwiKSxqPXt0aGluOlwiMXB4XCIsbWVkaXVtOlwiM3B4XCIsdGhpY2s6XCI1cHhcIn0saz17Ym9yZGVyQm90dG9tV2lkdGg6aixib3JkZXJMZWZ0V2lkdGg6aixib3JkZXJSaWdodFdpZHRoOmosYm9yZGVyVG9wV2lkdGg6aixmb250U2l6ZTp7XCJ4eC1zbWFsbFwiOlwiNjAlXCIsXCJ4LXNtYWxsXCI6XCI3NSVcIixzbWFsbDpcIjg5JVwiLG1lZGl1bTpcIjEwMCVcIixsYXJnZTpcIjEyMCVcIixcIngtbGFyZ2VcIjpcIjE1MCVcIixcInh4LWxhcmdlXCI6XCIyMDAlXCJ9LGZvbnRXZWlnaHQ6e25vcm1hbDpcIjQwMFwiLGJvbGQ6XCI3MDBcIn0sb3V0bGluZVdpZHRoOmosdGV4dFNoYWRvdzp7bm9uZTpcIjBweCAwcHggMHB4IHRyYW5zcGFyZW50XCJ9LGJveFNoYWRvdzp7bm9uZTpcIjBweCAwcHggMHB4IDBweCB0cmFuc3BhcmVudFwifX07YS5jb252ZXJ0VG9BcnJheUZvcm09ZixhLm5vcm1hbGl6ZUtleWZyYW1lcz1nfShjLGYpLGZ1bmN0aW9uKGEpe3ZhciBiPXt9O2EuaXNEZXByZWNhdGVkPWZ1bmN0aW9uKGEsYyxkLGUpe3ZhciBmPWU/XCJhcmVcIjpcImlzXCIsZz1uZXcgRGF0ZSxoPW5ldyBEYXRlKGMpO3JldHVybiBoLnNldE1vbnRoKGguZ2V0TW9udGgoKSszKSwhKGc8aCYmKGEgaW4gYnx8Y29uc29sZS53YXJuKFwiV2ViIEFuaW1hdGlvbnM6IFwiK2ErXCIgXCIrZitcIiBkZXByZWNhdGVkIGFuZCB3aWxsIHN0b3Agd29ya2luZyBvbiBcIitoLnRvRGF0ZVN0cmluZygpK1wiLiBcIitkKSxiW2FdPSEwLDEpKX0sYS5kZXByZWNhdGVkPWZ1bmN0aW9uKGIsYyxkLGUpe3ZhciBmPWU/XCJhcmVcIjpcImlzXCI7aWYoYS5pc0RlcHJlY2F0ZWQoYixjLGQsZSkpdGhyb3cgbmV3IEVycm9yKGIrXCIgXCIrZitcIiBubyBsb25nZXIgc3VwcG9ydGVkLiBcIitkKX19KGMpLGZ1bmN0aW9uKCl7aWYoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFuaW1hdGUpe3ZhciBhPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hbmltYXRlKFtdLDApLGI9ITA7aWYoYSYmKGI9ITEsXCJwbGF5fGN1cnJlbnRUaW1lfHBhdXNlfHJldmVyc2V8cGxheWJhY2tSYXRlfGNhbmNlbHxmaW5pc2h8c3RhcnRUaW1lfHBsYXlTdGF0ZVwiLnNwbGl0KFwifFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ZvaWQgMD09PWFbY10mJihiPSEwKX0pKSwhYilyZXR1cm59IWZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKGEpe2Zvcih2YXIgYj17fSxjPTA7YzxhLmxlbmd0aDtjKyspZm9yKHZhciBkIGluIGFbY10paWYoXCJvZmZzZXRcIiE9ZCYmXCJlYXNpbmdcIiE9ZCYmXCJjb21wb3NpdGVcIiE9ZCl7dmFyIGU9e29mZnNldDphW2NdLm9mZnNldCxlYXNpbmc6YVtjXS5lYXNpbmcsdmFsdWU6YVtjXVtkXX07YltkXT1iW2RdfHxbXSxiW2RdLnB1c2goZSl9Zm9yKHZhciBmIGluIGIpe3ZhciBnPWJbZl07aWYoMCE9Z1swXS5vZmZzZXR8fDEhPWdbZy5sZW5ndGgtMV0ub2Zmc2V0KXRocm93e3R5cGU6RE9NRXhjZXB0aW9uLk5PVF9TVVBQT1JURURfRVJSLG5hbWU6XCJOb3RTdXBwb3J0ZWRFcnJvclwiLG1lc3NhZ2U6XCJQYXJ0aWFsIGtleWZyYW1lcyBhcmUgbm90IHN1cHBvcnRlZFwifX1yZXR1cm4gYn1mdW5jdGlvbiBlKGMpe3ZhciBkPVtdO2Zvcih2YXIgZSBpbiBjKWZvcih2YXIgZj1jW2VdLGc9MDtnPGYubGVuZ3RoLTE7ZysrKXt2YXIgaD1nLGk9ZysxLGo9ZltoXS5vZmZzZXQsaz1mW2ldLm9mZnNldCxsPWosbT1rOzA9PWcmJihsPS0oMS8wKSwwPT1rJiYoaT1oKSksZz09Zi5sZW5ndGgtMiYmKG09MS8wLDE9PWomJihoPWkpKSxkLnB1c2goe2FwcGx5RnJvbTpsLGFwcGx5VG86bSxzdGFydE9mZnNldDpmW2hdLm9mZnNldCxlbmRPZmZzZXQ6ZltpXS5vZmZzZXQsZWFzaW5nRnVuY3Rpb246YS5wYXJzZUVhc2luZ0Z1bmN0aW9uKGZbaF0uZWFzaW5nKSxwcm9wZXJ0eTplLGludGVycG9sYXRpb246Yi5wcm9wZXJ0eUludGVycG9sYXRpb24oZSxmW2hdLnZhbHVlLGZbaV0udmFsdWUpfSl9cmV0dXJuIGQuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBhLnN0YXJ0T2Zmc2V0LWIuc3RhcnRPZmZzZXR9KSxkfWIuY29udmVydEVmZmVjdElucHV0PWZ1bmN0aW9uKGMpe3ZhciBmPWEubm9ybWFsaXplS2V5ZnJhbWVzKGMpLGc9ZChmKSxoPWUoZyk7cmV0dXJuIGZ1bmN0aW9uKGEsYyl7aWYobnVsbCE9YyloLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gYz49YS5hcHBseUZyb20mJmM8YS5hcHBseVRvfSkuZm9yRWFjaChmdW5jdGlvbihkKXt2YXIgZT1jLWQuc3RhcnRPZmZzZXQsZj1kLmVuZE9mZnNldC1kLnN0YXJ0T2Zmc2V0LGc9MD09Zj8wOmQuZWFzaW5nRnVuY3Rpb24oZS9mKTtiLmFwcGx5KGEsZC5wcm9wZXJ0eSxkLmludGVycG9sYXRpb24oZykpfSk7ZWxzZSBmb3IodmFyIGQgaW4gZylcIm9mZnNldFwiIT1kJiZcImVhc2luZ1wiIT1kJiZcImNvbXBvc2l0ZVwiIT1kJiZiLmNsZWFyKGEsZCl9fX0oYyxkLGYpLGZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKGEpe3JldHVybiBhLnJlcGxhY2UoLy0oLikvZyxmdW5jdGlvbihhLGIpe3JldHVybiBiLnRvVXBwZXJDYXNlKCl9KX1mdW5jdGlvbiBlKGEsYixjKXtoW2NdPWhbY118fFtdLGhbY10ucHVzaChbYSxiXSl9ZnVuY3Rpb24gZihhLGIsYyl7Zm9yKHZhciBmPTA7ZjxjLmxlbmd0aDtmKyspe3ZhciBnPWNbZl07ZShhLGIsZChnKSl9fWZ1bmN0aW9uIGcoYyxlLGYpe3ZhciBnPWM7Ly0vLnRlc3QoYykmJiFhLmlzRGVwcmVjYXRlZChcIkh5cGhlbmF0ZWQgcHJvcGVydHkgbmFtZXNcIixcIjIwMTYtMDMtMjJcIixcIlVzZSBjYW1lbENhc2UgaW5zdGVhZC5cIiwhMCkmJihnPWQoYykpLFwiaW5pdGlhbFwiIT1lJiZcImluaXRpYWxcIiE9Znx8KFwiaW5pdGlhbFwiPT1lJiYoZT1pW2ddKSxcImluaXRpYWxcIj09ZiYmKGY9aVtnXSkpO2Zvcih2YXIgaj1lPT1mP1tdOmhbZ10saz0wO2omJms8ai5sZW5ndGg7aysrKXt2YXIgbD1qW2tdWzBdKGUpLG09altrXVswXShmKTtpZih2b2lkIDAhPT1sJiZ2b2lkIDAhPT1tKXt2YXIgbj1qW2tdWzFdKGwsbSk7aWYobil7dmFyIG89Yi5JbnRlcnBvbGF0aW9uLmFwcGx5KG51bGwsbik7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiAwPT1hP2U6MT09YT9mOm8oYSl9fX19cmV0dXJuIGIuSW50ZXJwb2xhdGlvbighMSwhMCxmdW5jdGlvbihhKXtyZXR1cm4gYT9mOmV9KX12YXIgaD17fTtiLmFkZFByb3BlcnRpZXNIYW5kbGVyPWY7dmFyIGk9e2JhY2tncm91bmRDb2xvcjpcInRyYW5zcGFyZW50XCIsYmFja2dyb3VuZFBvc2l0aW9uOlwiMCUgMCVcIixib3JkZXJCb3R0b21Db2xvcjpcImN1cnJlbnRDb2xvclwiLGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6XCIwcHhcIixib3JkZXJCb3R0b21SaWdodFJhZGl1czpcIjBweFwiLGJvcmRlckJvdHRvbVdpZHRoOlwiM3B4XCIsYm9yZGVyTGVmdENvbG9yOlwiY3VycmVudENvbG9yXCIsYm9yZGVyTGVmdFdpZHRoOlwiM3B4XCIsYm9yZGVyUmlnaHRDb2xvcjpcImN1cnJlbnRDb2xvclwiLGJvcmRlclJpZ2h0V2lkdGg6XCIzcHhcIixib3JkZXJTcGFjaW5nOlwiMnB4XCIsYm9yZGVyVG9wQ29sb3I6XCJjdXJyZW50Q29sb3JcIixib3JkZXJUb3BMZWZ0UmFkaXVzOlwiMHB4XCIsYm9yZGVyVG9wUmlnaHRSYWRpdXM6XCIwcHhcIixib3JkZXJUb3BXaWR0aDpcIjNweFwiLGJvdHRvbTpcImF1dG9cIixjbGlwOlwicmVjdCgwcHgsIDBweCwgMHB4LCAwcHgpXCIsY29sb3I6XCJibGFja1wiLGZvbnRTaXplOlwiMTAwJVwiLGZvbnRXZWlnaHQ6XCI0MDBcIixoZWlnaHQ6XCJhdXRvXCIsbGVmdDpcImF1dG9cIixsZXR0ZXJTcGFjaW5nOlwibm9ybWFsXCIsbGluZUhlaWdodDpcIjEyMCVcIixtYXJnaW5Cb3R0b206XCIwcHhcIixtYXJnaW5MZWZ0OlwiMHB4XCIsbWFyZ2luUmlnaHQ6XCIwcHhcIixtYXJnaW5Ub3A6XCIwcHhcIixtYXhIZWlnaHQ6XCJub25lXCIsbWF4V2lkdGg6XCJub25lXCIsbWluSGVpZ2h0OlwiMHB4XCIsbWluV2lkdGg6XCIwcHhcIixvcGFjaXR5OlwiMS4wXCIsb3V0bGluZUNvbG9yOlwiaW52ZXJ0XCIsb3V0bGluZU9mZnNldDpcIjBweFwiLG91dGxpbmVXaWR0aDpcIjNweFwiLHBhZGRpbmdCb3R0b206XCIwcHhcIixwYWRkaW5nTGVmdDpcIjBweFwiLHBhZGRpbmdSaWdodDpcIjBweFwiLHBhZGRpbmdUb3A6XCIwcHhcIixyaWdodDpcImF1dG9cIix0ZXh0SW5kZW50OlwiMHB4XCIsdGV4dFNoYWRvdzpcIjBweCAwcHggMHB4IHRyYW5zcGFyZW50XCIsdG9wOlwiYXV0b1wiLHRyYW5zZm9ybTpcIlwiLHZlcnRpY2FsQWxpZ246XCIwcHhcIix2aXNpYmlsaXR5OlwidmlzaWJsZVwiLHdpZHRoOlwiYXV0b1wiLHdvcmRTcGFjaW5nOlwibm9ybWFsXCIsekluZGV4OlwiYXV0b1wifTtiLnByb3BlcnR5SW50ZXJwb2xhdGlvbj1nfShjLGQsZiksZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoYil7dmFyIGM9YS5jYWxjdWxhdGVBY3RpdmVEdXJhdGlvbihiKSxkPWZ1bmN0aW9uKGQpe3JldHVybiBhLmNhbGN1bGF0ZUl0ZXJhdGlvblByb2dyZXNzKGMsZCxiKX07cmV0dXJuIGQuX3RvdGFsRHVyYXRpb249Yi5kZWxheStjK2IuZW5kRGVsYXksZH1iLktleWZyYW1lRWZmZWN0PWZ1bmN0aW9uKGMsZSxmLGcpe3ZhciBoLGk9ZChhLm5vcm1hbGl6ZVRpbWluZ0lucHV0KGYpKSxqPWIuY29udmVydEVmZmVjdElucHV0KGUpLGs9ZnVuY3Rpb24oKXtqKGMsaCl9O3JldHVybiBrLl91cGRhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGg9aShhKSxudWxsIT09aH0say5fY2xlYXI9ZnVuY3Rpb24oKXtqKGMsbnVsbCl9LGsuX2hhc1NhbWVUYXJnZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGM9PT1hfSxrLl90YXJnZXQ9YyxrLl90b3RhbER1cmF0aW9uPWkuX3RvdGFsRHVyYXRpb24say5faWQ9ZyxrfSxiLk51bGxFZmZlY3Q9ZnVuY3Rpb24oYSl7dmFyIGI9ZnVuY3Rpb24oKXthJiYoYSgpLGE9bnVsbCl9O3JldHVybiBiLl91cGRhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sYi5fdG90YWxEdXJhdGlvbj0wLGIuX2hhc1NhbWVUYXJnZXQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sYn19KGMsZCxmKSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSxiLGMpe2MuZW51bWVyYWJsZT0hMCxjLmNvbmZpZ3VyYWJsZT0hMCxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLGMpfWZ1bmN0aW9uIGQoYSl7dGhpcy5fc3Vycm9nYXRlU3R5bGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFwiZGl2XCIpLnN0eWxlLHRoaXMuX3N0eWxlPWEuc3R5bGUsdGhpcy5fbGVuZ3RoPTAsdGhpcy5faXNBbmltYXRlZFByb3BlcnR5PXt9O2Zvcih2YXIgYj0wO2I8dGhpcy5fc3R5bGUubGVuZ3RoO2IrKyl7dmFyIGM9dGhpcy5fc3R5bGVbYl07dGhpcy5fc3Vycm9nYXRlU3R5bGVbY109dGhpcy5fc3R5bGVbY119dGhpcy5fdXBkYXRlSW5kaWNlcygpfWZ1bmN0aW9uIGUoYSl7aWYoIWEuX3dlYkFuaW1hdGlvbnNQYXRjaGVkU3R5bGUpe3ZhciBiPW5ldyBkKGEpO3RyeXtjKGEsXCJzdHlsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYn19KX1jYXRjaChiKXthLnN0eWxlLl9zZXQ9ZnVuY3Rpb24oYixjKXthLnN0eWxlW2JdPWN9LGEuc3R5bGUuX2NsZWFyPWZ1bmN0aW9uKGIpe2Euc3R5bGVbYl09XCJcIn19YS5fd2ViQW5pbWF0aW9uc1BhdGNoZWRTdHlsZT1hLnN0eWxlfX12YXIgZj17Y3NzVGV4dDoxLGxlbmd0aDoxLHBhcmVudFJ1bGU6MX0sZz17Z2V0UHJvcGVydHlDU1NWYWx1ZToxLGdldFByb3BlcnR5UHJpb3JpdHk6MSxnZXRQcm9wZXJ0eVZhbHVlOjEsaXRlbToxLHJlbW92ZVByb3BlcnR5OjEsc2V0UHJvcGVydHk6MX0saD17cmVtb3ZlUHJvcGVydHk6MSxzZXRQcm9wZXJ0eToxfTtkLnByb3RvdHlwZT17Z2V0IGNzc1RleHQoKXtyZXR1cm4gdGhpcy5fc3Vycm9nYXRlU3R5bGUuY3NzVGV4dH0sc2V0IGNzc1RleHQoYSl7Zm9yKHZhciBiPXt9LGM9MDtjPHRoaXMuX3N1cnJvZ2F0ZVN0eWxlLmxlbmd0aDtjKyspYlt0aGlzLl9zdXJyb2dhdGVTdHlsZVtjXV09ITA7dGhpcy5fc3Vycm9nYXRlU3R5bGUuY3NzVGV4dD1hLHRoaXMuX3VwZGF0ZUluZGljZXMoKTtmb3IodmFyIGM9MDtjPHRoaXMuX3N1cnJvZ2F0ZVN0eWxlLmxlbmd0aDtjKyspYlt0aGlzLl9zdXJyb2dhdGVTdHlsZVtjXV09ITA7Zm9yKHZhciBkIGluIGIpdGhpcy5faXNBbmltYXRlZFByb3BlcnR5W2RdfHx0aGlzLl9zdHlsZS5zZXRQcm9wZXJ0eShkLHRoaXMuX3N1cnJvZ2F0ZVN0eWxlLmdldFByb3BlcnR5VmFsdWUoZCkpfSxnZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMuX3N1cnJvZ2F0ZVN0eWxlLmxlbmd0aH0sZ2V0IHBhcmVudFJ1bGUoKXtyZXR1cm4gdGhpcy5fc3R5bGUucGFyZW50UnVsZX0sX3VwZGF0ZUluZGljZXM6ZnVuY3Rpb24oKXtmb3IoO3RoaXMuX2xlbmd0aDx0aGlzLl9zdXJyb2dhdGVTdHlsZS5sZW5ndGg7KU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHRoaXMuX2xlbmd0aCx7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdXJyb2dhdGVTdHlsZVthXX19KHRoaXMuX2xlbmd0aCl9KSx0aGlzLl9sZW5ndGgrKztmb3IoO3RoaXMuX2xlbmd0aD50aGlzLl9zdXJyb2dhdGVTdHlsZS5sZW5ndGg7KXRoaXMuX2xlbmd0aC0tLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHRoaXMuX2xlbmd0aCx7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWU6dm9pZCAwfSl9LF9zZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLl9zdHlsZVthXT1iLHRoaXMuX2lzQW5pbWF0ZWRQcm9wZXJ0eVthXT0hMH0sX2NsZWFyOmZ1bmN0aW9uKGEpe3RoaXMuX3N0eWxlW2FdPXRoaXMuX3N1cnJvZ2F0ZVN0eWxlW2FdLGRlbGV0ZSB0aGlzLl9pc0FuaW1hdGVkUHJvcGVydHlbYV19fTtmb3IodmFyIGkgaW4gZylkLnByb3RvdHlwZVtpXT1mdW5jdGlvbihhLGIpe3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXRoaXMuX3N1cnJvZ2F0ZVN0eWxlW2FdLmFwcGx5KHRoaXMuX3N1cnJvZ2F0ZVN0eWxlLGFyZ3VtZW50cyk7cmV0dXJuIGImJih0aGlzLl9pc0FuaW1hdGVkUHJvcGVydHlbYXJndW1lbnRzWzBdXXx8dGhpcy5fc3R5bGVbYV0uYXBwbHkodGhpcy5fc3R5bGUsYXJndW1lbnRzKSx0aGlzLl91cGRhdGVJbmRpY2VzKCkpLGN9fShpLGkgaW4gaCk7Zm9yKHZhciBqIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSlqIGluIGZ8fGogaW4gZ3x8IWZ1bmN0aW9uKGEpe2MoZC5wcm90b3R5cGUsYSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N1cnJvZ2F0ZVN0eWxlW2FdfSxzZXQ6ZnVuY3Rpb24oYil7dGhpcy5fc3Vycm9nYXRlU3R5bGVbYV09Yix0aGlzLl91cGRhdGVJbmRpY2VzKCksdGhpcy5faXNBbmltYXRlZFByb3BlcnR5W2FdfHwodGhpcy5fc3R5bGVbYV09Yil9fSl9KGopO2EuYXBwbHk9ZnVuY3Rpb24oYixjLGQpe2UoYiksYi5zdHlsZS5fc2V0KGEucHJvcGVydHlOYW1lKGMpLGQpfSxhLmNsZWFyPWZ1bmN0aW9uKGIsYyl7Yi5fd2ViQW5pbWF0aW9uc1BhdGNoZWRTdHlsZSYmYi5zdHlsZS5fY2xlYXIoYS5wcm9wZXJ0eU5hbWUoYykpfX0oZCxmKSxmdW5jdGlvbihhKXt3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYW5pbWF0ZT1mdW5jdGlvbihiLGMpe3ZhciBkPVwiXCI7cmV0dXJuIGMmJmMuaWQmJihkPWMuaWQpLGEudGltZWxpbmUuX3BsYXkoYS5LZXlmcmFtZUVmZmVjdCh0aGlzLGIsYyxkKSl9fShkKSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSxiLGQpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhJiZcIm51bWJlclwiPT10eXBlb2YgYilyZXR1cm4gYSooMS1kKStiKmQ7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBhJiZcImJvb2xlYW5cIj09dHlwZW9mIGIpcmV0dXJuIGQ8LjU/YTpiO2lmKGEubGVuZ3RoPT1iLmxlbmd0aCl7Zm9yKHZhciBlPVtdLGY9MDtmPGEubGVuZ3RoO2YrKyllLnB1c2goYyhhW2ZdLGJbZl0sZCkpO3JldHVybiBlfXRocm93XCJNaXNtYXRjaGVkIGludGVycG9sYXRpb24gYXJndW1lbnRzIFwiK2ErXCI6XCIrYn1hLkludGVycG9sYXRpb249ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZChjKGEsYixlKSl9fX0oZCxmKSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSxiLGMpe3JldHVybiBNYXRoLm1heChNYXRoLm1pbihhLGMpLGIpfWZ1bmN0aW9uIGQoYixkLGUpe3ZhciBmPWEuZG90KGIsZCk7Zj1jKGYsLTEsMSk7dmFyIGc9W107aWYoMT09PWYpZz1iO2Vsc2UgZm9yKHZhciBoPU1hdGguYWNvcyhmKSxpPTEqTWF0aC5zaW4oZSpoKS9NYXRoLnNxcnQoMS1mKmYpLGo9MDtqPDQ7aisrKWcucHVzaChiW2pdKihNYXRoLmNvcyhlKmgpLWYqaSkrZFtqXSppKTtyZXR1cm4gZ312YXIgZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxiKXtmb3IodmFyIGM9W1swLDAsMCwwXSxbMCwwLDAsMF0sWzAsMCwwLDBdLFswLDAsMCwwXV0sZD0wO2Q8NDtkKyspZm9yKHZhciBlPTA7ZTw0O2UrKylmb3IodmFyIGY9MDtmPDQ7ZisrKWNbZF1bZV0rPWJbZF1bZl0qYVtmXVtlXTtyZXR1cm4gY31mdW5jdGlvbiBiKGEpe3JldHVybiAwPT1hWzBdWzJdJiYwPT1hWzBdWzNdJiYwPT1hWzFdWzJdJiYwPT1hWzFdWzNdJiYwPT1hWzJdWzBdJiYwPT1hWzJdWzFdJiYxPT1hWzJdWzJdJiYwPT1hWzJdWzNdJiYwPT1hWzNdWzJdJiYxPT1hWzNdWzNdfWZ1bmN0aW9uIGMoYyxkLGUsZixnKXtmb3IodmFyIGg9W1sxLDAsMCwwXSxbMCwxLDAsMF0sWzAsMCwxLDBdLFswLDAsMCwxXV0saT0wO2k8NDtpKyspaFtpXVszXT1nW2ldO2Zvcih2YXIgaT0wO2k8MztpKyspZm9yKHZhciBqPTA7ajwzO2orKyloWzNdW2ldKz1jW2pdKmhbal1baV07dmFyIGs9ZlswXSxsPWZbMV0sbT1mWzJdLG49ZlszXSxvPVtbMSwwLDAsMF0sWzAsMSwwLDBdLFswLDAsMSwwXSxbMCwwLDAsMV1dO29bMF1bMF09MS0yKihsKmwrbSptKSxvWzBdWzFdPTIqKGsqbC1tKm4pLG9bMF1bMl09MiooayptK2wqbiksb1sxXVswXT0yKihrKmwrbSpuKSxvWzFdWzFdPTEtMiooayprK20qbSksb1sxXVsyXT0yKihsKm0taypuKSxvWzJdWzBdPTIqKGsqbS1sKm4pLG9bMl1bMV09MioobCptK2sqbiksb1syXVsyXT0xLTIqKGsqaytsKmwpLGg9YShoLG8pO3ZhciBwPVtbMSwwLDAsMF0sWzAsMSwwLDBdLFswLDAsMSwwXSxbMCwwLDAsMV1dO2VbMl0mJihwWzJdWzFdPWVbMl0saD1hKGgscCkpLGVbMV0mJihwWzJdWzFdPTAscFsyXVswXT1lWzBdLGg9YShoLHApKSxlWzBdJiYocFsyXVswXT0wLHBbMV1bMF09ZVswXSxoPWEoaCxwKSk7Zm9yKHZhciBpPTA7aTwzO2krKylmb3IodmFyIGo9MDtqPDM7aisrKWhbaV1bal0qPWRbaV07cmV0dXJuIGIoaCk/W2hbMF1bMF0saFswXVsxXSxoWzFdWzBdLGhbMV1bMV0saFszXVswXSxoWzNdWzFdXTpoWzBdLmNvbmNhdChoWzFdLGhbMl0saFszXSl9cmV0dXJuIGN9KCk7YS5jb21wb3NlTWF0cml4PWUsYS5xdWF0PWR9KGQsZiksZnVuY3Rpb24oYSxiLGMpe2Euc2VxdWVuY2VOdW1iZXI9MDt2YXIgZD1mdW5jdGlvbihhLGIsYyl7dGhpcy50YXJnZXQ9YSx0aGlzLmN1cnJlbnRUaW1lPWIsdGhpcy50aW1lbGluZVRpbWU9Yyx0aGlzLnR5cGU9XCJmaW5pc2hcIix0aGlzLmJ1YmJsZXM9ITEsdGhpcy5jYW5jZWxhYmxlPSExLHRoaXMuY3VycmVudFRhcmdldD1hLHRoaXMuZGVmYXVsdFByZXZlbnRlZD0hMSx0aGlzLmV2ZW50UGhhc2U9RXZlbnQuQVRfVEFSR0VULHRoaXMudGltZVN0YW1wPURhdGUubm93KCl9O2IuQW5pbWF0aW9uPWZ1bmN0aW9uKGIpe3RoaXMuaWQ9XCJcIixiJiZiLl9pZCYmKHRoaXMuaWQ9Yi5faWQpLHRoaXMuX3NlcXVlbmNlTnVtYmVyPWEuc2VxdWVuY2VOdW1iZXIrKyx0aGlzLl9jdXJyZW50VGltZT0wLHRoaXMuX3N0YXJ0VGltZT1udWxsLHRoaXMuX3BhdXNlZD0hMSx0aGlzLl9wbGF5YmFja1JhdGU9MSx0aGlzLl9pblRpbWVsaW5lPSEwLHRoaXMuX2ZpbmlzaGVkRmxhZz0hMCx0aGlzLm9uZmluaXNoPW51bGwsdGhpcy5fZmluaXNoSGFuZGxlcnM9W10sdGhpcy5fZWZmZWN0PWIsdGhpcy5faW5FZmZlY3Q9dGhpcy5fZWZmZWN0Ll91cGRhdGUoMCksdGhpcy5faWRsZT0hMCx0aGlzLl9jdXJyZW50VGltZVBlbmRpbmc9ITF9LGIuQW5pbWF0aW9uLnByb3RvdHlwZT17X2Vuc3VyZUFsaXZlOmZ1bmN0aW9uKCl7dGhpcy5wbGF5YmFja1JhdGU8MCYmMD09PXRoaXMuY3VycmVudFRpbWU/dGhpcy5faW5FZmZlY3Q9dGhpcy5fZWZmZWN0Ll91cGRhdGUoLTEpOnRoaXMuX2luRWZmZWN0PXRoaXMuX2VmZmVjdC5fdXBkYXRlKHRoaXMuY3VycmVudFRpbWUpLHRoaXMuX2luVGltZWxpbmV8fCF0aGlzLl9pbkVmZmVjdCYmdGhpcy5fZmluaXNoZWRGbGFnfHwodGhpcy5faW5UaW1lbGluZT0hMCxiLnRpbWVsaW5lLl9hbmltYXRpb25zLnB1c2godGhpcykpfSxfdGlja0N1cnJlbnRUaW1lOmZ1bmN0aW9uKGEsYil7YSE9dGhpcy5fY3VycmVudFRpbWUmJih0aGlzLl9jdXJyZW50VGltZT1hLHRoaXMuX2lzRmluaXNoZWQmJiFiJiYodGhpcy5fY3VycmVudFRpbWU9dGhpcy5fcGxheWJhY2tSYXRlPjA/dGhpcy5fdG90YWxEdXJhdGlvbjowKSx0aGlzLl9lbnN1cmVBbGl2ZSgpKX0sZ2V0IGN1cnJlbnRUaW1lKCl7cmV0dXJuIHRoaXMuX2lkbGV8fHRoaXMuX2N1cnJlbnRUaW1lUGVuZGluZz9udWxsOnRoaXMuX2N1cnJlbnRUaW1lfSxzZXQgY3VycmVudFRpbWUoYSl7YT0rYSxpc05hTihhKXx8KGIucmVzdGFydCgpLHRoaXMuX3BhdXNlZHx8bnVsbD09dGhpcy5fc3RhcnRUaW1lfHwodGhpcy5fc3RhcnRUaW1lPXRoaXMuX3RpbWVsaW5lLmN1cnJlbnRUaW1lLWEvdGhpcy5fcGxheWJhY2tSYXRlKSx0aGlzLl9jdXJyZW50VGltZVBlbmRpbmc9ITEsdGhpcy5fY3VycmVudFRpbWUhPWEmJih0aGlzLl9pZGxlJiYodGhpcy5faWRsZT0hMSx0aGlzLl9wYXVzZWQ9ITApLHRoaXMuX3RpY2tDdXJyZW50VGltZShhLCEwKSxiLmFwcGx5RGlydGllZEFuaW1hdGlvbih0aGlzKSkpfSxnZXQgc3RhcnRUaW1lKCl7cmV0dXJuIHRoaXMuX3N0YXJ0VGltZX0sc2V0IHN0YXJ0VGltZShhKXthPSthLGlzTmFOKGEpfHx0aGlzLl9wYXVzZWR8fHRoaXMuX2lkbGV8fCh0aGlzLl9zdGFydFRpbWU9YSx0aGlzLl90aWNrQ3VycmVudFRpbWUoKHRoaXMuX3RpbWVsaW5lLmN1cnJlbnRUaW1lLXRoaXMuX3N0YXJ0VGltZSkqdGhpcy5wbGF5YmFja1JhdGUpLGIuYXBwbHlEaXJ0aWVkQW5pbWF0aW9uKHRoaXMpKX0sZ2V0IHBsYXliYWNrUmF0ZSgpe3JldHVybiB0aGlzLl9wbGF5YmFja1JhdGV9LHNldCBwbGF5YmFja1JhdGUoYSl7aWYoYSE9dGhpcy5fcGxheWJhY2tSYXRlKXt2YXIgYz10aGlzLmN1cnJlbnRUaW1lO3RoaXMuX3BsYXliYWNrUmF0ZT1hLHRoaXMuX3N0YXJ0VGltZT1udWxsLFwicGF1c2VkXCIhPXRoaXMucGxheVN0YXRlJiZcImlkbGVcIiE9dGhpcy5wbGF5U3RhdGUmJih0aGlzLl9maW5pc2hlZEZsYWc9ITEsdGhpcy5faWRsZT0hMSx0aGlzLl9lbnN1cmVBbGl2ZSgpLGIuYXBwbHlEaXJ0aWVkQW5pbWF0aW9uKHRoaXMpKSxudWxsIT1jJiYodGhpcy5jdXJyZW50VGltZT1jKX19LGdldCBfaXNGaW5pc2hlZCgpe3JldHVybiF0aGlzLl9pZGxlJiYodGhpcy5fcGxheWJhY2tSYXRlPjAmJnRoaXMuX2N1cnJlbnRUaW1lPj10aGlzLl90b3RhbER1cmF0aW9ufHx0aGlzLl9wbGF5YmFja1JhdGU8MCYmdGhpcy5fY3VycmVudFRpbWU8PTApfSxnZXQgX3RvdGFsRHVyYXRpb24oKXtyZXR1cm4gdGhpcy5fZWZmZWN0Ll90b3RhbER1cmF0aW9ufSxnZXQgcGxheVN0YXRlKCl7cmV0dXJuIHRoaXMuX2lkbGU/XCJpZGxlXCI6bnVsbD09dGhpcy5fc3RhcnRUaW1lJiYhdGhpcy5fcGF1c2VkJiYwIT10aGlzLnBsYXliYWNrUmF0ZXx8dGhpcy5fY3VycmVudFRpbWVQZW5kaW5nP1wicGVuZGluZ1wiOnRoaXMuX3BhdXNlZD9cInBhdXNlZFwiOnRoaXMuX2lzRmluaXNoZWQ/XCJmaW5pc2hlZFwiOlwicnVubmluZ1wifSxfcmV3aW5kOmZ1bmN0aW9uKCl7aWYodGhpcy5fcGxheWJhY2tSYXRlPj0wKXRoaXMuX2N1cnJlbnRUaW1lPTA7ZWxzZXtpZighKHRoaXMuX3RvdGFsRHVyYXRpb248MS8wKSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiVW5hYmxlIHRvIHJld2luZCBuZWdhdGl2ZSBwbGF5YmFjayByYXRlIGFuaW1hdGlvbiB3aXRoIGluZmluaXRlIGR1cmF0aW9uXCIsXCJJbnZhbGlkU3RhdGVFcnJvclwiKTt0aGlzLl9jdXJyZW50VGltZT10aGlzLl90b3RhbER1cmF0aW9ufX0scGxheTpmdW5jdGlvbigpe3RoaXMuX3BhdXNlZD0hMSwodGhpcy5faXNGaW5pc2hlZHx8dGhpcy5faWRsZSkmJih0aGlzLl9yZXdpbmQoKSx0aGlzLl9zdGFydFRpbWU9bnVsbCksdGhpcy5fZmluaXNoZWRGbGFnPSExLHRoaXMuX2lkbGU9ITEsdGhpcy5fZW5zdXJlQWxpdmUoKSxiLmFwcGx5RGlydGllZEFuaW1hdGlvbih0aGlzKX0scGF1c2U6ZnVuY3Rpb24oKXt0aGlzLl9pc0ZpbmlzaGVkfHx0aGlzLl9wYXVzZWR8fHRoaXMuX2lkbGU/dGhpcy5faWRsZSYmKHRoaXMuX3Jld2luZCgpLHRoaXMuX2lkbGU9ITEpOnRoaXMuX2N1cnJlbnRUaW1lUGVuZGluZz0hMCx0aGlzLl9zdGFydFRpbWU9bnVsbCx0aGlzLl9wYXVzZWQ9ITB9LGZpbmlzaDpmdW5jdGlvbigpe3RoaXMuX2lkbGV8fCh0aGlzLmN1cnJlbnRUaW1lPXRoaXMuX3BsYXliYWNrUmF0ZT4wP3RoaXMuX3RvdGFsRHVyYXRpb246MCx0aGlzLl9zdGFydFRpbWU9dGhpcy5fdG90YWxEdXJhdGlvbi10aGlzLmN1cnJlbnRUaW1lLHRoaXMuX2N1cnJlbnRUaW1lUGVuZGluZz0hMSxiLmFwcGx5RGlydGllZEFuaW1hdGlvbih0aGlzKSl9LGNhbmNlbDpmdW5jdGlvbigpe3RoaXMuX2luRWZmZWN0JiYodGhpcy5faW5FZmZlY3Q9ITEsdGhpcy5faWRsZT0hMCx0aGlzLl9wYXVzZWQ9ITEsdGhpcy5faXNGaW5pc2hlZD0hMCx0aGlzLl9maW5pc2hlZEZsYWc9ITAsdGhpcy5fY3VycmVudFRpbWU9MCx0aGlzLl9zdGFydFRpbWU9bnVsbCx0aGlzLl9lZmZlY3QuX3VwZGF0ZShudWxsKSxiLmFwcGx5RGlydGllZEFuaW1hdGlvbih0aGlzKSl9LHJldmVyc2U6ZnVuY3Rpb24oKXt0aGlzLnBsYXliYWNrUmF0ZSo9LTEsdGhpcy5wbGF5KCl9LGFkZEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSxiKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBiJiZcImZpbmlzaFwiPT1hJiZ0aGlzLl9maW5pc2hIYW5kbGVycy5wdXNoKGIpfSxyZW1vdmVFdmVudExpc3RlbmVyOmZ1bmN0aW9uKGEsYil7aWYoXCJmaW5pc2hcIj09YSl7dmFyIGM9dGhpcy5fZmluaXNoSGFuZGxlcnMuaW5kZXhPZihiKTtjPj0wJiZ0aGlzLl9maW5pc2hIYW5kbGVycy5zcGxpY2UoYywxKX19LF9maXJlRXZlbnRzOmZ1bmN0aW9uKGEpe2lmKHRoaXMuX2lzRmluaXNoZWQpe2lmKCF0aGlzLl9maW5pc2hlZEZsYWcpe3ZhciBiPW5ldyBkKHRoaXMsdGhpcy5fY3VycmVudFRpbWUsYSksYz10aGlzLl9maW5pc2hIYW5kbGVycy5jb25jYXQodGhpcy5vbmZpbmlzaD9bdGhpcy5vbmZpbmlzaF06W10pO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjLmZvckVhY2goZnVuY3Rpb24oYSl7YS5jYWxsKGIudGFyZ2V0LGIpfSl9LDApLHRoaXMuX2ZpbmlzaGVkRmxhZz0hMH19ZWxzZSB0aGlzLl9maW5pc2hlZEZsYWc9ITF9LF90aWNrOmZ1bmN0aW9uKGEsYil7dGhpcy5faWRsZXx8dGhpcy5fcGF1c2VkfHwobnVsbD09dGhpcy5fc3RhcnRUaW1lP2ImJih0aGlzLnN0YXJ0VGltZT1hLXRoaXMuX2N1cnJlbnRUaW1lL3RoaXMucGxheWJhY2tSYXRlKTp0aGlzLl9pc0ZpbmlzaGVkfHx0aGlzLl90aWNrQ3VycmVudFRpbWUoKGEtdGhpcy5fc3RhcnRUaW1lKSp0aGlzLnBsYXliYWNrUmF0ZSkpLGImJih0aGlzLl9jdXJyZW50VGltZVBlbmRpbmc9ITEsdGhpcy5fZmlyZUV2ZW50cyhhKSl9LGdldCBfbmVlZHNUaWNrKCl7cmV0dXJuIHRoaXMucGxheVN0YXRlIGlue3BlbmRpbmc6MSxydW5uaW5nOjF9fHwhdGhpcy5fZmluaXNoZWRGbGFnfSxfdGFyZ2V0QW5pbWF0aW9uczpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2VmZmVjdC5fdGFyZ2V0O3JldHVybiBhLl9hY3RpdmVBbmltYXRpb25zfHwoYS5fYWN0aXZlQW5pbWF0aW9ucz1bXSksYS5fYWN0aXZlQW5pbWF0aW9uc30sX21hcmtUYXJnZXQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl90YXJnZXRBbmltYXRpb25zKCk7YS5pbmRleE9mKHRoaXMpPT09LTEmJmEucHVzaCh0aGlzKX0sX3VubWFya1RhcmdldDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX3RhcmdldEFuaW1hdGlvbnMoKSxiPWEuaW5kZXhPZih0aGlzKTtiIT09LTEmJmEuc3BsaWNlKGIsMSl9fX0oYyxkLGYpLGZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKGEpe3ZhciBiPWo7aj1bXSxhPHEuY3VycmVudFRpbWUmJihhPXEuY3VycmVudFRpbWUpLHEuX2FuaW1hdGlvbnMuc29ydChlKSxxLl9hbmltYXRpb25zPWgoYSwhMCxxLl9hbmltYXRpb25zKVswXSxiLmZvckVhY2goZnVuY3Rpb24oYil7YlsxXShhKX0pLGcoKSxsPXZvaWQgMH1mdW5jdGlvbiBlKGEsYil7cmV0dXJuIGEuX3NlcXVlbmNlTnVtYmVyLWIuX3NlcXVlbmNlTnVtYmVyfWZ1bmN0aW9uIGYoKXt0aGlzLl9hbmltYXRpb25zPVtdLHRoaXMuY3VycmVudFRpbWU9d2luZG93LnBlcmZvcm1hbmNlJiZwZXJmb3JtYW5jZS5ub3c/cGVyZm9ybWFuY2Uubm93KCk6MH1mdW5jdGlvbiBnKCl7by5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EoKX0pLG8ubGVuZ3RoPTB9ZnVuY3Rpb24gaChhLGMsZCl7cD0hMCxuPSExO3ZhciBlPWIudGltZWxpbmU7ZS5jdXJyZW50VGltZT1hLG09ITE7dmFyIGY9W10sZz1bXSxoPVtdLGk9W107cmV0dXJuIGQuZm9yRWFjaChmdW5jdGlvbihiKXtiLl90aWNrKGEsYyksYi5faW5FZmZlY3Q/KGcucHVzaChiLl9lZmZlY3QpLGIuX21hcmtUYXJnZXQoKSk6KGYucHVzaChiLl9lZmZlY3QpLGIuX3VubWFya1RhcmdldCgpKSxiLl9uZWVkc1RpY2smJihtPSEwKTt2YXIgZD1iLl9pbkVmZmVjdHx8Yi5fbmVlZHNUaWNrO2IuX2luVGltZWxpbmU9ZCxkP2gucHVzaChiKTppLnB1c2goYil9KSxvLnB1c2guYXBwbHkobyxmKSxvLnB1c2guYXBwbHkobyxnKSxtJiZyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXt9KSxwPSExLFtoLGldfXZhciBpPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsaj1bXSxrPTA7d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT1mdW5jdGlvbihhKXt2YXIgYj1rKys7cmV0dXJuIDA9PWoubGVuZ3RoJiZpKGQpLGoucHVzaChbYixhXSksYn0sd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lPWZ1bmN0aW9uKGEpe2ouZm9yRWFjaChmdW5jdGlvbihiKXtiWzBdPT1hJiYoYlsxXT1mdW5jdGlvbigpe30pfSl9LGYucHJvdG90eXBlPXtfcGxheTpmdW5jdGlvbihjKXtjLl90aW1pbmc9YS5ub3JtYWxpemVUaW1pbmdJbnB1dChjLnRpbWluZyk7dmFyIGQ9bmV3IGIuQW5pbWF0aW9uKGMpO3JldHVybiBkLl9pZGxlPSExLGQuX3RpbWVsaW5lPXRoaXMsdGhpcy5fYW5pbWF0aW9ucy5wdXNoKGQpLGIucmVzdGFydCgpLGIuYXBwbHlEaXJ0aWVkQW5pbWF0aW9uKGQpLGR9fTt2YXIgbD12b2lkIDAsbT0hMSxuPSExO2IucmVzdGFydD1mdW5jdGlvbigpe3JldHVybiBtfHwobT0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXt9KSxuPSEwKSxufSxiLmFwcGx5RGlydGllZEFuaW1hdGlvbj1mdW5jdGlvbihhKXtpZighcCl7YS5fbWFya1RhcmdldCgpO3ZhciBjPWEuX3RhcmdldEFuaW1hdGlvbnMoKTtjLnNvcnQoZSk7dmFyIGQ9aChiLnRpbWVsaW5lLmN1cnJlbnRUaW1lLCExLGMuc2xpY2UoKSlbMV07ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPXEuX2FuaW1hdGlvbnMuaW5kZXhPZihhKTtiIT09LTEmJnEuX2FuaW1hdGlvbnMuc3BsaWNlKGIsMSl9KSxnKCl9fTt2YXIgbz1bXSxwPSExLHE9bmV3IGY7Yi50aW1lbGluZT1xfShjLGQsZiksZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYil7Zm9yKHZhciBjPTAsZD0wO2Q8YS5sZW5ndGg7ZCsrKWMrPWFbZF0qYltkXTtyZXR1cm4gY31mdW5jdGlvbiBkKGEsYil7cmV0dXJuW2FbMF0qYlswXSthWzRdKmJbMV0rYVs4XSpiWzJdK2FbMTJdKmJbM10sYVsxXSpiWzBdK2FbNV0qYlsxXSthWzldKmJbMl0rYVsxM10qYlszXSxhWzJdKmJbMF0rYVs2XSpiWzFdK2FbMTBdKmJbMl0rYVsxNF0qYlszXSxhWzNdKmJbMF0rYVs3XSpiWzFdK2FbMTFdKmJbMl0rYVsxNV0qYlszXSxhWzBdKmJbNF0rYVs0XSpiWzVdK2FbOF0qYls2XSthWzEyXSpiWzddLGFbMV0qYls0XSthWzVdKmJbNV0rYVs5XSpiWzZdK2FbMTNdKmJbN10sYVsyXSpiWzRdK2FbNl0qYls1XSthWzEwXSpiWzZdK2FbMTRdKmJbN10sYVszXSpiWzRdK2FbN10qYls1XSthWzExXSpiWzZdK2FbMTVdKmJbN10sYVswXSpiWzhdK2FbNF0qYls5XSthWzhdKmJbMTBdK2FbMTJdKmJbMTFdLGFbMV0qYls4XSthWzVdKmJbOV0rYVs5XSpiWzEwXSthWzEzXSpiWzExXSxhWzJdKmJbOF0rYVs2XSpiWzldK2FbMTBdKmJbMTBdK2FbMTRdKmJbMTFdLGFbM10qYls4XSthWzddKmJbOV0rYVsxMV0qYlsxMF0rYVsxNV0qYlsxMV0sYVswXSpiWzEyXSthWzRdKmJbMTNdK2FbOF0qYlsxNF0rYVsxMl0qYlsxNV0sYVsxXSpiWzEyXSthWzVdKmJbMTNdK2FbOV0qYlsxNF0rYVsxM10qYlsxNV0sYVsyXSpiWzEyXSthWzZdKmJbMTNdK2FbMTBdKmJbMTRdK2FbMTRdKmJbMTVdLGFbM10qYlsxMl0rYVs3XSpiWzEzXSthWzExXSpiWzE0XSthWzE1XSpiWzE1XV19ZnVuY3Rpb24gZShhKXt2YXIgYj1hLnJhZHx8MCxjPWEuZGVnfHwwLGQ9YS5ncmFkfHwwLGU9YS50dXJufHwwLGY9KGMvMzYwK2QvNDAwK2UpKigyKk1hdGguUEkpK2I7cmV0dXJuIGZ9ZnVuY3Rpb24gZihhKXtzd2l0Y2goYS50KXtjYXNlXCJyb3RhdGV4XCI6dmFyIGI9ZShhLmRbMF0pO3JldHVyblsxLDAsMCwwLDAsTWF0aC5jb3MoYiksTWF0aC5zaW4oYiksMCwwLC1NYXRoLnNpbihiKSxNYXRoLmNvcyhiKSwwLDAsMCwwLDFdO2Nhc2VcInJvdGF0ZXlcIjp2YXIgYj1lKGEuZFswXSk7cmV0dXJuW01hdGguY29zKGIpLDAsLU1hdGguc2luKGIpLDAsMCwxLDAsMCxNYXRoLnNpbihiKSwwLE1hdGguY29zKGIpLDAsMCwwLDAsMV07Y2FzZVwicm90YXRlXCI6Y2FzZVwicm90YXRlelwiOnZhciBiPWUoYS5kWzBdKTtyZXR1cm5bTWF0aC5jb3MoYiksTWF0aC5zaW4oYiksMCwwLC1NYXRoLnNpbihiKSxNYXRoLmNvcyhiKSwwLDAsMCwwLDEsMCwwLDAsMCwxXTtjYXNlXCJyb3RhdGUzZFwiOnZhciBjPWEuZFswXSxkPWEuZFsxXSxmPWEuZFsyXSxiPWUoYS5kWzNdKSxnPWMqYytkKmQrZipmO2lmKDA9PT1nKWM9MSxkPTAsZj0wO2Vsc2UgaWYoMSE9PWcpe3ZhciBoPU1hdGguc3FydChnKTtjLz1oLGQvPWgsZi89aH12YXIgaT1NYXRoLnNpbihiLzIpLGo9aSpNYXRoLmNvcyhiLzIpLGs9aSppO3JldHVyblsxLTIqKGQqZCtmKmYpKmssMiooYypkKmsrZipqKSwyKihjKmYqay1kKmopLDAsMiooYypkKmstZipqKSwxLTIqKGMqYytmKmYpKmssMiooZCpmKmsrYypqKSwwLDIqKGMqZiprK2QqaiksMiooZCpmKmstYypqKSwxLTIqKGMqYytkKmQpKmssMCwwLDAsMCwxXTtjYXNlXCJzY2FsZVwiOnJldHVyblthLmRbMF0sMCwwLDAsMCxhLmRbMV0sMCwwLDAsMCwxLDAsMCwwLDAsMV07Y2FzZVwic2NhbGV4XCI6cmV0dXJuW2EuZFswXSwwLDAsMCwwLDEsMCwwLDAsMCwxLDAsMCwwLDAsMV07Y2FzZVwic2NhbGV5XCI6cmV0dXJuWzEsMCwwLDAsMCxhLmRbMF0sMCwwLDAsMCwxLDAsMCwwLDAsMV07Y2FzZVwic2NhbGV6XCI6cmV0dXJuWzEsMCwwLDAsMCwxLDAsMCwwLDAsYS5kWzBdLDAsMCwwLDAsMV07Y2FzZVwic2NhbGUzZFwiOnJldHVyblthLmRbMF0sMCwwLDAsMCxhLmRbMV0sMCwwLDAsMCxhLmRbMl0sMCwwLDAsMCwxXTtjYXNlXCJza2V3XCI6dmFyIGw9ZShhLmRbMF0pLG09ZShhLmRbMV0pO3JldHVyblsxLE1hdGgudGFuKG0pLDAsMCxNYXRoLnRhbihsKSwxLDAsMCwwLDAsMSwwLDAsMCwwLDFdO2Nhc2VcInNrZXd4XCI6dmFyIGI9ZShhLmRbMF0pO3JldHVyblsxLDAsMCwwLE1hdGgudGFuKGIpLDEsMCwwLDAsMCwxLDAsMCwwLDAsMV07Y2FzZVwic2tld3lcIjp2YXIgYj1lKGEuZFswXSk7cmV0dXJuWzEsTWF0aC50YW4oYiksMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxXTtjYXNlXCJ0cmFuc2xhdGVcIjp2YXIgYz1hLmRbMF0ucHh8fDAsZD1hLmRbMV0ucHh8fDA7cmV0dXJuWzEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLGMsZCwwLDFdO2Nhc2VcInRyYW5zbGF0ZXhcIjp2YXIgYz1hLmRbMF0ucHh8fDA7cmV0dXJuWzEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLGMsMCwwLDFdO2Nhc2VcInRyYW5zbGF0ZXlcIjp2YXIgZD1hLmRbMF0ucHh8fDA7cmV0dXJuWzEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsZCwwLDFdO2Nhc2VcInRyYW5zbGF0ZXpcIjp2YXIgZj1hLmRbMF0ucHh8fDA7cmV0dXJuWzEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsMCxmLDFdO2Nhc2VcInRyYW5zbGF0ZTNkXCI6dmFyIGM9YS5kWzBdLnB4fHwwLGQ9YS5kWzFdLnB4fHwwLGY9YS5kWzJdLnB4fHwwO3JldHVyblsxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCxjLGQsZiwxXTtjYXNlXCJwZXJzcGVjdGl2ZVwiOnZhciBuPWEuZFswXS5weD8tMS9hLmRbMF0ucHg6MDtyZXR1cm5bMSwwLDAsMCwwLDEsMCwwLDAsMCwxLG4sMCwwLDAsMV07Y2FzZVwibWF0cml4XCI6cmV0dXJuW2EuZFswXSxhLmRbMV0sMCwwLGEuZFsyXSxhLmRbM10sMCwwLDAsMCwxLDAsYS5kWzRdLGEuZFs1XSwwLDFdO2Nhc2VcIm1hdHJpeDNkXCI6cmV0dXJuIGEuZH19ZnVuY3Rpb24gZyhhKXtyZXR1cm4gMD09PWEubGVuZ3RoP1sxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxXTphLm1hcChmKS5yZWR1Y2UoZCl9ZnVuY3Rpb24gaChhKXtyZXR1cm5baShnKGEpKV19dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEpe3JldHVybiBhWzBdWzBdKmFbMV1bMV0qYVsyXVsyXSthWzFdWzBdKmFbMl1bMV0qYVswXVsyXSthWzJdWzBdKmFbMF1bMV0qYVsxXVsyXS1hWzBdWzJdKmFbMV1bMV0qYVsyXVswXS1hWzFdWzJdKmFbMl1bMV0qYVswXVswXS1hWzJdWzJdKmFbMF1bMV0qYVsxXVswXX1mdW5jdGlvbiBiKGIpe2Zvcih2YXIgYz0xL2EoYiksZD1iWzBdWzBdLGU9YlswXVsxXSxmPWJbMF1bMl0sZz1iWzFdWzBdLGg9YlsxXVsxXSxpPWJbMV1bMl0saj1iWzJdWzBdLGs9YlsyXVsxXSxsPWJbMl1bMl0sbT1bWyhoKmwtaSprKSpjLChmKmstZSpsKSpjLChlKmktZipoKSpjLDBdLFsoaSpqLWcqbCkqYywoZCpsLWYqaikqYywoZipnLWQqaSkqYywwXSxbKGcqay1oKmopKmMsKGoqZS1kKmspKmMsKGQqaC1lKmcpKmMsMF1dLG49W10sbz0wO288MztvKyspe2Zvcih2YXIgcD0wLHE9MDtxPDM7cSsrKXArPWJbM11bcV0qbVtxXVtvXTtuLnB1c2gocCl9cmV0dXJuIG4ucHVzaCgxKSxtLnB1c2gobiksbX1mdW5jdGlvbiBkKGEpe3JldHVybltbYVswXVswXSxhWzFdWzBdLGFbMl1bMF0sYVszXVswXV0sW2FbMF1bMV0sYVsxXVsxXSxhWzJdWzFdLGFbM11bMV1dLFthWzBdWzJdLGFbMV1bMl0sYVsyXVsyXSxhWzNdWzJdXSxbYVswXVszXSxhWzFdWzNdLGFbMl1bM10sYVszXVszXV1dfWZ1bmN0aW9uIGUoYSxiKXtmb3IodmFyIGM9W10sZD0wO2Q8NDtkKyspe2Zvcih2YXIgZT0wLGY9MDtmPDQ7ZisrKWUrPWFbZl0qYltmXVtkXTtjLnB1c2goZSl9cmV0dXJuIGN9ZnVuY3Rpb24gZihhKXt2YXIgYj1nKGEpO3JldHVyblthWzBdL2IsYVsxXS9iLGFbMl0vYl19ZnVuY3Rpb24gZyhhKXtyZXR1cm4gTWF0aC5zcXJ0KGFbMF0qYVswXSthWzFdKmFbMV0rYVsyXSphWzJdKX1mdW5jdGlvbiBoKGEsYixjLGQpe3JldHVybltjKmFbMF0rZCpiWzBdLGMqYVsxXStkKmJbMV0sYyphWzJdK2QqYlsyXV19ZnVuY3Rpb24gaShhLGIpe3JldHVyblthWzFdKmJbMl0tYVsyXSpiWzFdLGFbMl0qYlswXS1hWzBdKmJbMl0sYVswXSpiWzFdLWFbMV0qYlswXV19ZnVuY3Rpb24gaihqKXt2YXIgaz1bai5zbGljZSgwLDQpLGouc2xpY2UoNCw4KSxqLnNsaWNlKDgsMTIpLGouc2xpY2UoMTIsMTYpXTtpZigxIT09a1szXVszXSlyZXR1cm4gbnVsbDtmb3IodmFyIGw9W10sbT0wO208NDttKyspbC5wdXNoKGtbbV0uc2xpY2UoKSk7Zm9yKHZhciBtPTA7bTwzO20rKylsW21dWzNdPTA7aWYoMD09PWEobCkpcmV0dXJuITE7dmFyIG4sbz1bXTtpZihrWzBdWzNdfHxrWzFdWzNdfHxrWzJdWzNdKXtvLnB1c2goa1swXVszXSksby5wdXNoKGtbMV1bM10pLG8ucHVzaChrWzJdWzNdKSxvLnB1c2goa1szXVszXSk7dmFyIHA9YihsKSxxPWQocCk7bj1lKG8scSl9ZWxzZSBuPVswLDAsMCwxXTt2YXIgcj1rWzNdLnNsaWNlKDAsMykscz1bXTtzLnB1c2goa1swXS5zbGljZSgwLDMpKTt2YXIgdD1bXTt0LnB1c2goZyhzWzBdKSksc1swXT1mKHNbMF0pO3ZhciB1PVtdO3MucHVzaChrWzFdLnNsaWNlKDAsMykpLHUucHVzaChjKHNbMF0sc1sxXSkpLHNbMV09aChzWzFdLHNbMF0sMSwtdVswXSksdC5wdXNoKGcoc1sxXSkpLHNbMV09ZihzWzFdKSx1WzBdLz10WzFdLHMucHVzaChrWzJdLnNsaWNlKDAsMykpLHUucHVzaChjKHNbMF0sc1syXSkpLHNbMl09aChzWzJdLHNbMF0sMSwtdVsxXSksdS5wdXNoKGMoc1sxXSxzWzJdKSksc1syXT1oKHNbMl0sc1sxXSwxLC11WzJdKSx0LnB1c2goZyhzWzJdKSksc1syXT1mKHNbMl0pLHVbMV0vPXRbMl0sdVsyXS89dFsyXTt2YXIgdj1pKHNbMV0sc1syXSk7aWYoYyhzWzBdLHYpPDApZm9yKHZhciBtPTA7bTwzO20rKyl0W21dKj0tMSxzW21dWzBdKj0tMSxzW21dWzFdKj0tMSxzW21dWzJdKj0tMTt2YXIgdyx4LHk9c1swXVswXStzWzFdWzFdK3NbMl1bMl0rMTtyZXR1cm4geT4xZS00Pyh3PS41L01hdGguc3FydCh5KSx4PVsoc1syXVsxXS1zWzFdWzJdKSp3LChzWzBdWzJdLXNbMl1bMF0pKncsKHNbMV1bMF0tc1swXVsxXSkqdywuMjUvd10pOnNbMF1bMF0+c1sxXVsxXSYmc1swXVswXT5zWzJdWzJdPyh3PTIqTWF0aC5zcXJ0KDErc1swXVswXS1zWzFdWzFdLXNbMl1bMl0pLHg9Wy4yNSp3LChzWzBdWzFdK3NbMV1bMF0pL3csKHNbMF1bMl0rc1syXVswXSkvdywoc1syXVsxXS1zWzFdWzJdKS93XSk6c1sxXVsxXT5zWzJdWzJdPyh3PTIqTWF0aC5zcXJ0KDErc1sxXVsxXS1zWzBdWzBdLXNbMl1bMl0pLHg9WyhzWzBdWzFdK3NbMV1bMF0pL3csLjI1KncsKHNbMV1bMl0rc1syXVsxXSkvdywoc1swXVsyXS1zWzJdWzBdKS93XSk6KHc9MipNYXRoLnNxcnQoMStzWzJdWzJdLXNbMF1bMF0tc1sxXVsxXSkseD1bKHNbMF1bMl0rc1syXVswXSkvdywoc1sxXVsyXStzWzJdWzFdKS93LC4yNSp3LChzWzFdWzBdLXNbMF1bMV0pL3ddKSxbcix0LHUseCxuXX1yZXR1cm4gan0oKTthLmRvdD1jLGEubWFrZU1hdHJpeERlY29tcG9zaXRpb249aH0oZCxmKSxmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9YS5leGVjKGIpO2lmKGMpcmV0dXJuIGM9YS5pZ25vcmVDYXNlP2NbMF0udG9Mb3dlckNhc2UoKTpjWzBdLFtjLGIuc3Vic3RyKGMubGVuZ3RoKV19ZnVuY3Rpb24gYyhhLGIpe2I9Yi5yZXBsYWNlKC9eXFxzKi8sXCJcIik7dmFyIGM9YShiKTtpZihjKXJldHVybltjWzBdLGNbMV0ucmVwbGFjZSgvXlxccyovLFwiXCIpXX1mdW5jdGlvbiBkKGEsZCxlKXthPWMuYmluZChudWxsLGEpO2Zvcih2YXIgZj1bXTs7KXt2YXIgZz1hKGUpO2lmKCFnKXJldHVybltmLGVdO2lmKGYucHVzaChnWzBdKSxlPWdbMV0sZz1iKGQsZSksIWd8fFwiXCI9PWdbMV0pcmV0dXJuW2YsZV07ZT1nWzFdfX1mdW5jdGlvbiBlKGEsYil7Zm9yKHZhciBjPTAsZD0wO2Q8Yi5sZW5ndGgmJighL1xcc3wsLy50ZXN0KGJbZF0pfHwwIT1jKTtkKyspaWYoXCIoXCI9PWJbZF0pYysrO2Vsc2UgaWYoXCIpXCI9PWJbZF0mJihjLS0sMD09YyYmZCsrLGM8PTApKWJyZWFrO3ZhciBlPWEoYi5zdWJzdHIoMCxkKSk7cmV0dXJuIHZvaWQgMD09ZT92b2lkIDA6W2UsYi5zdWJzdHIoZCldfWZ1bmN0aW9uIGYoYSxiKXtmb3IodmFyIGM9YSxkPWI7YyYmZDspYz5kP2MlPWQ6ZCU9YztyZXR1cm4gYz1hKmIvKGMrZCl9ZnVuY3Rpb24gZyhhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9YShiKTtyZXR1cm4gYyYmKGNbMF09dm9pZCAwKSxjfX1mdW5jdGlvbiBoKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGMpe3ZhciBkPWEoYyk7cmV0dXJuIGQ/ZDpbYixjXX19ZnVuY3Rpb24gaShiLGMpe2Zvcih2YXIgZD1bXSxlPTA7ZTxiLmxlbmd0aDtlKyspe3ZhciBmPWEuY29uc3VtZVRyaW1tZWQoYltlXSxjKTtpZighZnx8XCJcIj09ZlswXSlyZXR1cm47dm9pZCAwIT09ZlswXSYmZC5wdXNoKGZbMF0pLGM9ZlsxXX1pZihcIlwiPT1jKXJldHVybiBkfWZ1bmN0aW9uIGooYSxiLGMsZCxlKXtmb3IodmFyIGc9W10saD1bXSxpPVtdLGo9ZihkLmxlbmd0aCxlLmxlbmd0aCksaz0wO2s8ajtrKyspe3ZhciBsPWIoZFtrJWQubGVuZ3RoXSxlW2slZS5sZW5ndGhdKTtpZighbClyZXR1cm47Zy5wdXNoKGxbMF0pLGgucHVzaChsWzFdKSxpLnB1c2gobFsyXSl9cmV0dXJuW2csaCxmdW5jdGlvbihiKXt2YXIgZD1iLm1hcChmdW5jdGlvbihhLGIpe3JldHVybiBpW2JdKGEpfSkuam9pbihjKTtyZXR1cm4gYT9hKGQpOmR9XX1mdW5jdGlvbiBrKGEsYixjKXtmb3IodmFyIGQ9W10sZT1bXSxmPVtdLGc9MCxoPTA7aDxjLmxlbmd0aDtoKyspaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgY1toXSl7dmFyIGk9Y1toXShhW2ddLGJbZysrXSk7ZC5wdXNoKGlbMF0pLGUucHVzaChpWzFdKSxmLnB1c2goaVsyXSl9ZWxzZSFmdW5jdGlvbihhKXtkLnB1c2goITEpLGUucHVzaCghMSksZi5wdXNoKGZ1bmN0aW9uKCl7cmV0dXJuIGNbYV19KX0oaCk7cmV0dXJuW2QsZSxmdW5jdGlvbihhKXtmb3IodmFyIGI9XCJcIixjPTA7YzxhLmxlbmd0aDtjKyspYis9ZltjXShhW2NdKTtyZXR1cm4gYn1dfWEuY29uc3VtZVRva2VuPWIsYS5jb25zdW1lVHJpbW1lZD1jLGEuY29uc3VtZVJlcGVhdGVkPWQsYS5jb25zdW1lUGFyZW50aGVzaXNlZD1lLGEuaWdub3JlPWcsYS5vcHRpb25hbD1oLGEuY29uc3VtZUxpc3Q9aSxhLm1lcmdlTmVzdGVkUmVwZWF0ZWQ9ai5iaW5kKG51bGwsbnVsbCksYS5tZXJnZVdyYXBwZWROZXN0ZWRSZXBlYXRlZD1qLGEubWVyZ2VMaXN0PWt9KGQpLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYil7ZnVuY3Rpb24gYyhiKXt2YXIgYz1hLmNvbnN1bWVUb2tlbigvXmluc2V0L2ksYik7aWYoYylyZXR1cm4gZC5pbnNldD0hMCxjO3ZhciBjPWEuY29uc3VtZUxlbmd0aE9yUGVyY2VudChiKTtpZihjKXJldHVybiBkLmxlbmd0aHMucHVzaChjWzBdKSxjO3ZhciBjPWEuY29uc3VtZUNvbG9yKGIpO3JldHVybiBjPyhkLmNvbG9yPWNbMF0sYyk6dm9pZCAwfXZhciBkPXtpbnNldDohMSxsZW5ndGhzOltdLGNvbG9yOm51bGx9LGU9YS5jb25zdW1lUmVwZWF0ZWQoYywvXi8sYik7aWYoZSYmZVswXS5sZW5ndGgpcmV0dXJuW2QsZVsxXV19ZnVuY3Rpb24gYyhjKXt2YXIgZD1hLmNvbnN1bWVSZXBlYXRlZChiLC9eLC8sYyk7aWYoZCYmXCJcIj09ZFsxXSlyZXR1cm4gZFswXX1mdW5jdGlvbiBkKGIsYyl7Zm9yKDtiLmxlbmd0aHMubGVuZ3RoPE1hdGgubWF4KGIubGVuZ3Rocy5sZW5ndGgsYy5sZW5ndGhzLmxlbmd0aCk7KWIubGVuZ3Rocy5wdXNoKHtweDowfSk7Zm9yKDtjLmxlbmd0aHMubGVuZ3RoPE1hdGgubWF4KGIubGVuZ3Rocy5sZW5ndGgsYy5sZW5ndGhzLmxlbmd0aCk7KWMubGVuZ3Rocy5wdXNoKHtweDowfSk7aWYoYi5pbnNldD09Yy5pbnNldCYmISFiLmNvbG9yPT0hIWMuY29sb3Ipe2Zvcih2YXIgZCxlPVtdLGY9W1tdLDBdLGc9W1tdLDBdLGg9MDtoPGIubGVuZ3Rocy5sZW5ndGg7aCsrKXt2YXIgaT1hLm1lcmdlRGltZW5zaW9ucyhiLmxlbmd0aHNbaF0sYy5sZW5ndGhzW2hdLDI9PWgpO2ZbMF0ucHVzaChpWzBdKSxnWzBdLnB1c2goaVsxXSksZS5wdXNoKGlbMl0pfWlmKGIuY29sb3ImJmMuY29sb3Ipe3ZhciBqPWEubWVyZ2VDb2xvcnMoYi5jb2xvcixjLmNvbG9yKTtmWzFdPWpbMF0sZ1sxXT1qWzFdLGQ9alsyXTtcbn1yZXR1cm5bZixnLGZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1iLmluc2V0P1wiaW5zZXQgXCI6XCIgXCIsZj0wO2Y8ZS5sZW5ndGg7ZisrKWMrPWVbZl0oYVswXVtmXSkrXCIgXCI7cmV0dXJuIGQmJihjKz1kKGFbMV0pKSxjfV19fWZ1bmN0aW9uIGUoYixjLGQsZSl7ZnVuY3Rpb24gZihhKXtyZXR1cm57aW5zZXQ6YSxjb2xvcjpbMCwwLDAsMF0sbGVuZ3Roczpbe3B4OjB9LHtweDowfSx7cHg6MH0se3B4OjB9XX19Zm9yKHZhciBnPVtdLGg9W10saT0wO2k8ZC5sZW5ndGh8fGk8ZS5sZW5ndGg7aSsrKXt2YXIgaj1kW2ldfHxmKGVbaV0uaW5zZXQpLGs9ZVtpXXx8ZihkW2ldLmluc2V0KTtnLnB1c2goaiksaC5wdXNoKGspfXJldHVybiBhLm1lcmdlTmVzdGVkUmVwZWF0ZWQoYixjLGcsaCl9dmFyIGY9ZS5iaW5kKG51bGwsZCxcIiwgXCIpO2EuYWRkUHJvcGVydGllc0hhbmRsZXIoYyxmLFtcImJveC1zaGFkb3dcIixcInRleHQtc2hhZG93XCJdKX0oZCksZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEpe3JldHVybiBhLnRvRml4ZWQoMykucmVwbGFjZShcIi4wMDBcIixcIlwiKX1mdW5jdGlvbiBkKGEsYixjKXtyZXR1cm4gTWF0aC5taW4oYixNYXRoLm1heChhLGMpKX1mdW5jdGlvbiBlKGEpe2lmKC9eXFxzKlstK10/KFxcZCpcXC4pP1xcZCtcXHMqJC8udGVzdChhKSlyZXR1cm4gTnVtYmVyKGEpfWZ1bmN0aW9uIGYoYSxiKXtyZXR1cm5bYSxiLGNdfWZ1bmN0aW9uIGcoYSxiKXtpZigwIT1hKXJldHVybiBpKDAsMS8wKShhLGIpfWZ1bmN0aW9uIGgoYSxiKXtyZXR1cm5bYSxiLGZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLnJvdW5kKGQoMSwxLzAsYSkpfV19ZnVuY3Rpb24gaShhLGIpe3JldHVybiBmdW5jdGlvbihlLGYpe3JldHVybltlLGYsZnVuY3Rpb24oZSl7cmV0dXJuIGMoZChhLGIsZSkpfV19fWZ1bmN0aW9uIGooYSxiKXtyZXR1cm5bYSxiLE1hdGgucm91bmRdfWEuY2xhbXA9ZCxhLmFkZFByb3BlcnRpZXNIYW5kbGVyKGUsaSgwLDEvMCksW1wiYm9yZGVyLWltYWdlLXdpZHRoXCIsXCJsaW5lLWhlaWdodFwiXSksYS5hZGRQcm9wZXJ0aWVzSGFuZGxlcihlLGkoMCwxKSxbXCJvcGFjaXR5XCIsXCJzaGFwZS1pbWFnZS10aHJlc2hvbGRcIl0pLGEuYWRkUHJvcGVydGllc0hhbmRsZXIoZSxnLFtcImZsZXgtZ3Jvd1wiLFwiZmxleC1zaHJpbmtcIl0pLGEuYWRkUHJvcGVydGllc0hhbmRsZXIoZSxoLFtcIm9ycGhhbnNcIixcIndpZG93c1wiXSksYS5hZGRQcm9wZXJ0aWVzSGFuZGxlcihlLGosW1wiei1pbmRleFwiXSksYS5wYXJzZU51bWJlcj1lLGEubWVyZ2VOdW1iZXJzPWYsYS5udW1iZXJUb1N0cmluZz1jfShkLGYpLGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhLGIpe2lmKFwidmlzaWJsZVwiPT1hfHxcInZpc2libGVcIj09YilyZXR1cm5bMCwxLGZ1bmN0aW9uKGMpe3JldHVybiBjPD0wP2E6Yz49MT9iOlwidmlzaWJsZVwifV19YS5hZGRQcm9wZXJ0aWVzSGFuZGxlcihTdHJpbmcsYyxbXCJ2aXNpYmlsaXR5XCJdKX0oZCksZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEpe2E9YS50cmltKCksZi5maWxsU3R5bGU9XCIjMDAwXCIsZi5maWxsU3R5bGU9YTt2YXIgYj1mLmZpbGxTdHlsZTtpZihmLmZpbGxTdHlsZT1cIiNmZmZcIixmLmZpbGxTdHlsZT1hLGI9PWYuZmlsbFN0eWxlKXtmLmZpbGxSZWN0KDAsMCwxLDEpO3ZhciBjPWYuZ2V0SW1hZ2VEYXRhKDAsMCwxLDEpLmRhdGE7Zi5jbGVhclJlY3QoMCwwLDEsMSk7dmFyIGQ9Y1szXS8yNTU7cmV0dXJuW2NbMF0qZCxjWzFdKmQsY1syXSpkLGRdfX1mdW5jdGlvbiBkKGIsYyl7cmV0dXJuW2IsYyxmdW5jdGlvbihiKXtmdW5jdGlvbiBjKGEpe3JldHVybiBNYXRoLm1heCgwLE1hdGgubWluKDI1NSxhKSl9aWYoYlszXSlmb3IodmFyIGQ9MDtkPDM7ZCsrKWJbZF09TWF0aC5yb3VuZChjKGJbZF0vYlszXSkpO3JldHVybiBiWzNdPWEubnVtYmVyVG9TdHJpbmcoYS5jbGFtcCgwLDEsYlszXSkpLFwicmdiYShcIitiLmpvaW4oXCIsXCIpK1wiKVwifV19dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFwiY2FudmFzXCIpO2Uud2lkdGg9ZS5oZWlnaHQ9MTt2YXIgZj1lLmdldENvbnRleHQoXCIyZFwiKTthLmFkZFByb3BlcnRpZXNIYW5kbGVyKGMsZCxbXCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJib3JkZXItYm90dG9tLWNvbG9yXCIsXCJib3JkZXItbGVmdC1jb2xvclwiLFwiYm9yZGVyLXJpZ2h0LWNvbG9yXCIsXCJib3JkZXItdG9wLWNvbG9yXCIsXCJjb2xvclwiLFwib3V0bGluZS1jb2xvclwiLFwidGV4dC1kZWNvcmF0aW9uLWNvbG9yXCJdKSxhLmNvbnN1bWVDb2xvcj1hLmNvbnN1bWVQYXJlbnRoZXNpc2VkLmJpbmQobnVsbCxjKSxhLm1lcmdlQ29sb3JzPWR9KGQsZiksZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYil7aWYoYj1iLnRyaW0oKS50b0xvd2VyQ2FzZSgpLFwiMFwiPT1iJiZcInB4XCIuc2VhcmNoKGEpPj0wKXJldHVybntweDowfTtpZigvXlteKF0qJHxeY2FsYy8udGVzdChiKSl7Yj1iLnJlcGxhY2UoL2NhbGNcXCgvZyxcIihcIik7dmFyIGM9e307Yj1iLnJlcGxhY2UoYSxmdW5jdGlvbihhKXtyZXR1cm4gY1thXT1udWxsLFwiVVwiK2F9KTtmb3IodmFyIGQ9XCJVKFwiK2Euc291cmNlK1wiKVwiLGU9Yi5yZXBsYWNlKC9bLStdPyhcXGQqXFwuKT9cXGQrL2csXCJOXCIpLnJlcGxhY2UobmV3IFJlZ0V4cChcIk5cIitkLFwiZ1wiKSxcIkRcIikucmVwbGFjZSgvXFxzWystXVxccy9nLFwiT1wiKS5yZXBsYWNlKC9cXHMvZyxcIlwiKSxmPVsvTlxcKihEKS9nLC8oTnxEKVsqXFwvXU4vZywvKE58RClPXFwxL2csL1xcKChOfEQpXFwpL2ddLGc9MDtnPGYubGVuZ3RoOylmW2ddLnRlc3QoZSk/KGU9ZS5yZXBsYWNlKGZbZ10sXCIkMVwiKSxnPTApOmcrKztpZihcIkRcIj09ZSl7Zm9yKHZhciBoIGluIGMpe3ZhciBpPWV2YWwoYi5yZXBsYWNlKG5ldyBSZWdFeHAoXCJVXCIraCxcImdcIiksXCJcIikucmVwbGFjZShuZXcgUmVnRXhwKGQsXCJnXCIpLFwiKjBcIikpO2lmKCFpc0Zpbml0ZShpKSlyZXR1cm47Y1toXT1pfXJldHVybiBjfX19ZnVuY3Rpb24gZChhLGIpe3JldHVybiBlKGEsYiwhMCl9ZnVuY3Rpb24gZShiLGMsZCl7dmFyIGUsZj1bXTtmb3IoZSBpbiBiKWYucHVzaChlKTtmb3IoZSBpbiBjKWYuaW5kZXhPZihlKTwwJiZmLnB1c2goZSk7cmV0dXJuIGI9Zi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV18fDB9KSxjPWYubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBjW2FdfHwwfSksW2IsYyxmdW5jdGlvbihiKXt2YXIgYz1iLm1hcChmdW5jdGlvbihjLGUpe3JldHVybiAxPT1iLmxlbmd0aCYmZCYmKGM9TWF0aC5tYXgoYywwKSksYS5udW1iZXJUb1N0cmluZyhjKStmW2VdfSkuam9pbihcIiArIFwiKTtyZXR1cm4gYi5sZW5ndGg+MT9cImNhbGMoXCIrYytcIilcIjpjfV19dmFyIGY9XCJweHxlbXxleHxjaHxyZW18dnd8dmh8dm1pbnx2bWF4fGNtfG1tfGlufHB0fHBjXCIsZz1jLmJpbmQobnVsbCxuZXcgUmVnRXhwKGYsXCJnXCIpKSxoPWMuYmluZChudWxsLG5ldyBSZWdFeHAoZitcInwlXCIsXCJnXCIpKSxpPWMuYmluZChudWxsLC9kZWd8cmFkfGdyYWR8dHVybi9nKTthLnBhcnNlTGVuZ3RoPWcsYS5wYXJzZUxlbmd0aE9yUGVyY2VudD1oLGEuY29uc3VtZUxlbmd0aE9yUGVyY2VudD1hLmNvbnN1bWVQYXJlbnRoZXNpc2VkLmJpbmQobnVsbCxoKSxhLnBhcnNlQW5nbGU9aSxhLm1lcmdlRGltZW5zaW9ucz1lO3ZhciBqPWEuY29uc3VtZVBhcmVudGhlc2lzZWQuYmluZChudWxsLGcpLGs9YS5jb25zdW1lUmVwZWF0ZWQuYmluZCh2b2lkIDAsaiwvXi8pLGw9YS5jb25zdW1lUmVwZWF0ZWQuYmluZCh2b2lkIDAsaywvXiwvKTthLmNvbnN1bWVTaXplUGFpckxpc3Q9bDt2YXIgbT1mdW5jdGlvbihhKXt2YXIgYj1sKGEpO2lmKGImJlwiXCI9PWJbMV0pcmV0dXJuIGJbMF19LG49YS5tZXJnZU5lc3RlZFJlcGVhdGVkLmJpbmQodm9pZCAwLGQsXCIgXCIpLG89YS5tZXJnZU5lc3RlZFJlcGVhdGVkLmJpbmQodm9pZCAwLG4sXCIsXCIpO2EubWVyZ2VOb25OZWdhdGl2ZVNpemVQYWlyPW4sYS5hZGRQcm9wZXJ0aWVzSGFuZGxlcihtLG8sW1wiYmFja2dyb3VuZC1zaXplXCJdKSxhLmFkZFByb3BlcnRpZXNIYW5kbGVyKGgsZCxbXCJib3JkZXItYm90dG9tLXdpZHRoXCIsXCJib3JkZXItaW1hZ2Utd2lkdGhcIixcImJvcmRlci1sZWZ0LXdpZHRoXCIsXCJib3JkZXItcmlnaHQtd2lkdGhcIixcImJvcmRlci10b3Atd2lkdGhcIixcImZsZXgtYmFzaXNcIixcImZvbnQtc2l6ZVwiLFwiaGVpZ2h0XCIsXCJsaW5lLWhlaWdodFwiLFwibWF4LWhlaWdodFwiLFwibWF4LXdpZHRoXCIsXCJvdXRsaW5lLXdpZHRoXCIsXCJ3aWR0aFwiXSksYS5hZGRQcm9wZXJ0aWVzSGFuZGxlcihoLGUsW1wiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1c1wiLFwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXNcIixcImJvcmRlci10b3AtbGVmdC1yYWRpdXNcIixcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCIsXCJib3R0b21cIixcImxlZnRcIixcImxldHRlci1zcGFjaW5nXCIsXCJtYXJnaW4tYm90dG9tXCIsXCJtYXJnaW4tbGVmdFwiLFwibWFyZ2luLXJpZ2h0XCIsXCJtYXJnaW4tdG9wXCIsXCJtaW4taGVpZ2h0XCIsXCJtaW4td2lkdGhcIixcIm91dGxpbmUtb2Zmc2V0XCIsXCJwYWRkaW5nLWJvdHRvbVwiLFwicGFkZGluZy1sZWZ0XCIsXCJwYWRkaW5nLXJpZ2h0XCIsXCJwYWRkaW5nLXRvcFwiLFwicGVyc3BlY3RpdmVcIixcInJpZ2h0XCIsXCJzaGFwZS1tYXJnaW5cIixcInRleHQtaW5kZW50XCIsXCJ0b3BcIixcInZlcnRpY2FsLWFsaWduXCIsXCJ3b3JkLXNwYWNpbmdcIl0pfShkLGYpLGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhiKXtyZXR1cm4gYS5jb25zdW1lTGVuZ3RoT3JQZXJjZW50KGIpfHxhLmNvbnN1bWVUb2tlbigvXmF1dG8vLGIpfWZ1bmN0aW9uIGQoYil7dmFyIGQ9YS5jb25zdW1lTGlzdChbYS5pZ25vcmUoYS5jb25zdW1lVG9rZW4uYmluZChudWxsLC9ecmVjdC8pKSxhLmlnbm9yZShhLmNvbnN1bWVUb2tlbi5iaW5kKG51bGwsL15cXCgvKSksYS5jb25zdW1lUmVwZWF0ZWQuYmluZChudWxsLGMsL14sLyksYS5pZ25vcmUoYS5jb25zdW1lVG9rZW4uYmluZChudWxsLC9eXFwpLykpXSxiKTtpZihkJiY0PT1kWzBdLmxlbmd0aClyZXR1cm4gZFswXX1mdW5jdGlvbiBlKGIsYyl7cmV0dXJuXCJhdXRvXCI9PWJ8fFwiYXV0b1wiPT1jP1shMCwhMSxmdW5jdGlvbihkKXt2YXIgZT1kP2I6YztpZihcImF1dG9cIj09ZSlyZXR1cm5cImF1dG9cIjt2YXIgZj1hLm1lcmdlRGltZW5zaW9ucyhlLGUpO3JldHVybiBmWzJdKGZbMF0pfV06YS5tZXJnZURpbWVuc2lvbnMoYixjKX1mdW5jdGlvbiBmKGEpe3JldHVyblwicmVjdChcIithK1wiKVwifXZhciBnPWEubWVyZ2VXcmFwcGVkTmVzdGVkUmVwZWF0ZWQuYmluZChudWxsLGYsZSxcIiwgXCIpO2EucGFyc2VCb3g9ZCxhLm1lcmdlQm94ZXM9ZyxhLmFkZFByb3BlcnRpZXNIYW5kbGVyKGQsZyxbXCJjbGlwXCJdKX0oZCxmKSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPTA7cmV0dXJuIGEubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhPT09az9iW2MrK106YX0pfX1mdW5jdGlvbiBkKGEpe3JldHVybiBhfWZ1bmN0aW9uIGUoYil7aWYoYj1iLnRvTG93ZXJDYXNlKCkudHJpbSgpLFwibm9uZVwiPT1iKXJldHVybltdO2Zvcih2YXIgYyxkPS9cXHMqKFxcdyspXFwoKFteKV0qKVxcKS9nLGU9W10sZj0wO2M9ZC5leGVjKGIpOyl7aWYoYy5pbmRleCE9ZilyZXR1cm47Zj1jLmluZGV4K2NbMF0ubGVuZ3RoO3ZhciBnPWNbMV0saD1uW2ddO2lmKCFoKXJldHVybjt2YXIgaT1jWzJdLnNwbGl0KFwiLFwiKSxqPWhbMF07aWYoai5sZW5ndGg8aS5sZW5ndGgpcmV0dXJuO2Zvcih2YXIgaz1bXSxvPTA7bzxqLmxlbmd0aDtvKyspe3ZhciBwLHE9aVtvXSxyPWpbb107aWYocD1xP3tBOmZ1bmN0aW9uKGIpe3JldHVyblwiMFwiPT1iLnRyaW0oKT9tOmEucGFyc2VBbmdsZShiKX0sTjphLnBhcnNlTnVtYmVyLFQ6YS5wYXJzZUxlbmd0aE9yUGVyY2VudCxMOmEucGFyc2VMZW5ndGh9W3IudG9VcHBlckNhc2UoKV0ocSk6e2E6bSxuOmtbMF0sdDpsfVtyXSx2b2lkIDA9PT1wKXJldHVybjtrLnB1c2gocCl9aWYoZS5wdXNoKHt0OmcsZDprfSksZC5sYXN0SW5kZXg9PWIubGVuZ3RoKXJldHVybiBlfX1mdW5jdGlvbiBmKGEpe3JldHVybiBhLnRvRml4ZWQoNikucmVwbGFjZShcIi4wMDAwMDBcIixcIlwiKX1mdW5jdGlvbiBnKGIsYyl7aWYoYi5kZWNvbXBvc2l0aW9uUGFpciE9PWMpe2IuZGVjb21wb3NpdGlvblBhaXI9Yzt2YXIgZD1hLm1ha2VNYXRyaXhEZWNvbXBvc2l0aW9uKGIpfWlmKGMuZGVjb21wb3NpdGlvblBhaXIhPT1iKXtjLmRlY29tcG9zaXRpb25QYWlyPWI7dmFyIGU9YS5tYWtlTWF0cml4RGVjb21wb3NpdGlvbihjKX1yZXR1cm4gbnVsbD09ZFswXXx8bnVsbD09ZVswXT9bWyExXSxbITBdLGZ1bmN0aW9uKGEpe3JldHVybiBhP2NbMF0uZDpiWzBdLmR9XTooZFswXS5wdXNoKDApLGVbMF0ucHVzaCgxKSxbZCxlLGZ1bmN0aW9uKGIpe3ZhciBjPWEucXVhdChkWzBdWzNdLGVbMF1bM10sYls1XSksZz1hLmNvbXBvc2VNYXRyaXgoYlswXSxiWzFdLGJbMl0sYyxiWzRdKSxoPWcubWFwKGYpLmpvaW4oXCIsXCIpO3JldHVybiBofV0pfWZ1bmN0aW9uIGgoYSl7cmV0dXJuIGEucmVwbGFjZSgvW3h5XS8sXCJcIil9ZnVuY3Rpb24gaShhKXtyZXR1cm4gYS5yZXBsYWNlKC8oeHx5fHp8M2QpPyQvLFwiM2RcIil9ZnVuY3Rpb24gaihiLGMpe3ZhciBkPWEubWFrZU1hdHJpeERlY29tcG9zaXRpb24mJiEwLGU9ITE7aWYoIWIubGVuZ3RofHwhYy5sZW5ndGgpe2IubGVuZ3RofHwoZT0hMCxiPWMsYz1bXSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspe3ZhciBqPWJbZl0udCxrPWJbZl0uZCxsPVwic2NhbGVcIj09ai5zdWJzdHIoMCw1KT8xOjA7Yy5wdXNoKHt0OmosZDprLm1hcChmdW5jdGlvbihhKXtpZihcIm51bWJlclwiPT10eXBlb2YgYSlyZXR1cm4gbDt2YXIgYj17fTtmb3IodmFyIGMgaW4gYSliW2NdPWw7cmV0dXJuIGJ9KX0pfX12YXIgbT1mdW5jdGlvbihhLGIpe3JldHVyblwicGVyc3BlY3RpdmVcIj09YSYmXCJwZXJzcGVjdGl2ZVwiPT1ifHwoXCJtYXRyaXhcIj09YXx8XCJtYXRyaXgzZFwiPT1hKSYmKFwibWF0cml4XCI9PWJ8fFwibWF0cml4M2RcIj09Yil9LG89W10scD1bXSxxPVtdO2lmKGIubGVuZ3RoIT1jLmxlbmd0aCl7aWYoIWQpcmV0dXJuO3ZhciByPWcoYixjKTtvPVtyWzBdXSxwPVtyWzFdXSxxPVtbXCJtYXRyaXhcIixbclsyXV1dXX1lbHNlIGZvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKXt2YXIgaixzPWJbZl0udCx0PWNbZl0udCx1PWJbZl0uZCx2PWNbZl0uZCx3PW5bc10seD1uW3RdO2lmKG0ocyx0KSl7aWYoIWQpcmV0dXJuO3ZhciByPWcoW2JbZl1dLFtjW2ZdXSk7by5wdXNoKHJbMF0pLHAucHVzaChyWzFdKSxxLnB1c2goW1wibWF0cml4XCIsW3JbMl1dXSl9ZWxzZXtpZihzPT10KWo9cztlbHNlIGlmKHdbMl0mJnhbMl0mJmgocyk9PWgodCkpaj1oKHMpLHU9d1syXSh1KSx2PXhbMl0odik7ZWxzZXtpZighd1sxXXx8IXhbMV18fGkocykhPWkodCkpe2lmKCFkKXJldHVybjt2YXIgcj1nKGIsYyk7bz1bclswXV0scD1bclsxXV0scT1bW1wibWF0cml4XCIsW3JbMl1dXV07YnJlYWt9aj1pKHMpLHU9d1sxXSh1KSx2PXhbMV0odil9Zm9yKHZhciB5PVtdLHo9W10sQT1bXSxCPTA7Qjx1Lmxlbmd0aDtCKyspe3ZhciBDPVwibnVtYmVyXCI9PXR5cGVvZiB1W0JdP2EubWVyZ2VOdW1iZXJzOmEubWVyZ2VEaW1lbnNpb25zLHI9Qyh1W0JdLHZbQl0pO3lbQl09clswXSx6W0JdPXJbMV0sQS5wdXNoKHJbMl0pfW8ucHVzaCh5KSxwLnB1c2goeikscS5wdXNoKFtqLEFdKX19aWYoZSl7dmFyIEQ9bztvPXAscD1EfXJldHVybltvLHAsZnVuY3Rpb24oYSl7cmV0dXJuIGEubWFwKGZ1bmN0aW9uKGEsYil7dmFyIGM9YS5tYXAoZnVuY3Rpb24oYSxjKXtyZXR1cm4gcVtiXVsxXVtjXShhKX0pLmpvaW4oXCIsXCIpO3JldHVyblwibWF0cml4XCI9PXFbYl1bMF0mJjE2PT1jLnNwbGl0KFwiLFwiKS5sZW5ndGgmJihxW2JdWzBdPVwibWF0cml4M2RcIikscVtiXVswXStcIihcIitjK1wiKVwifSkuam9pbihcIiBcIil9XX12YXIgaz1udWxsLGw9e3B4OjB9LG09e2RlZzowfSxuPXttYXRyaXg6W1wiTk5OTk5OXCIsW2ssaywwLDAsayxrLDAsMCwwLDAsMSwwLGssaywwLDFdLGRdLG1hdHJpeDNkOltcIk5OTk5OTk5OTk5OTk5OTk5cIixkXSxyb3RhdGU6W1wiQVwiXSxyb3RhdGV4OltcIkFcIl0scm90YXRleTpbXCJBXCJdLHJvdGF0ZXo6W1wiQVwiXSxyb3RhdGUzZDpbXCJOTk5BXCJdLHBlcnNwZWN0aXZlOltcIkxcIl0sc2NhbGU6W1wiTm5cIixjKFtrLGssMV0pLGRdLHNjYWxleDpbXCJOXCIsYyhbaywxLDFdKSxjKFtrLDFdKV0sc2NhbGV5OltcIk5cIixjKFsxLGssMV0pLGMoWzEsa10pXSxzY2FsZXo6W1wiTlwiLGMoWzEsMSxrXSldLHNjYWxlM2Q6W1wiTk5OXCIsZF0sc2tldzpbXCJBYVwiLG51bGwsZF0sc2tld3g6W1wiQVwiLG51bGwsYyhbayxtXSldLHNrZXd5OltcIkFcIixudWxsLGMoW20sa10pXSx0cmFuc2xhdGU6W1wiVHRcIixjKFtrLGssbF0pLGRdLHRyYW5zbGF0ZXg6W1wiVFwiLGMoW2ssbCxsXSksYyhbayxsXSldLHRyYW5zbGF0ZXk6W1wiVFwiLGMoW2wsayxsXSksYyhbbCxrXSldLHRyYW5zbGF0ZXo6W1wiTFwiLGMoW2wsbCxrXSldLHRyYW5zbGF0ZTNkOltcIlRUTFwiLGRdfTthLmFkZFByb3BlcnRpZXNIYW5kbGVyKGUsaixbXCJ0cmFuc2Zvcm1cIl0pfShkLGYpLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7dmFyIGI9TnVtYmVyKGEpO2lmKCEoaXNOYU4oYil8fGI8MTAwfHxiPjkwMHx8YiUxMDAhPT0wKSlyZXR1cm4gYn1mdW5jdGlvbiBjKGIpe3JldHVybiBiPTEwMCpNYXRoLnJvdW5kKGIvMTAwKSxiPWEuY2xhbXAoMTAwLDkwMCxiKSw0MDA9PT1iP1wibm9ybWFsXCI6NzAwPT09Yj9cImJvbGRcIjpTdHJpbmcoYil9ZnVuY3Rpb24gZChhLGIpe3JldHVyblthLGIsY119YS5hZGRQcm9wZXJ0aWVzSGFuZGxlcihiLGQsW1wiZm9udC13ZWlnaHRcIl0pfShkKSxmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEpe3ZhciBiPXt9O2Zvcih2YXIgYyBpbiBhKWJbY109LWFbY107cmV0dXJuIGJ9ZnVuY3Rpb24gYyhiKXtyZXR1cm4gYS5jb25zdW1lVG9rZW4oL14obGVmdHxjZW50ZXJ8cmlnaHR8dG9wfGJvdHRvbSlcXGIvaSxiKXx8YS5jb25zdW1lTGVuZ3RoT3JQZXJjZW50KGIpfWZ1bmN0aW9uIGQoYixkKXt2YXIgZT1hLmNvbnN1bWVSZXBlYXRlZChjLC9eLyxkKTtpZihlJiZcIlwiPT1lWzFdKXt2YXIgZj1lWzBdO2lmKGZbMF09ZlswXXx8XCJjZW50ZXJcIixmWzFdPWZbMV18fFwiY2VudGVyXCIsMz09YiYmKGZbMl09ZlsyXXx8e3B4OjB9KSxmLmxlbmd0aD09Yil7aWYoL3RvcHxib3R0b20vLnRlc3QoZlswXSl8fC9sZWZ0fHJpZ2h0Ly50ZXN0KGZbMV0pKXt2YXIgaD1mWzBdO2ZbMF09ZlsxXSxmWzFdPWh9aWYoL2xlZnR8cmlnaHR8Y2VudGVyfE9iamVjdC8udGVzdChmWzBdKSYmL3RvcHxib3R0b218Y2VudGVyfE9iamVjdC8udGVzdChmWzFdKSlyZXR1cm4gZi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGE/YTpnW2FdfSl9fX1mdW5jdGlvbiBlKGQpe3ZhciBlPWEuY29uc3VtZVJlcGVhdGVkKGMsL14vLGQpO2lmKGUpe2Zvcih2YXIgZj1lWzBdLGg9W3tcIiVcIjo1MH0se1wiJVwiOjUwfV0saT0wLGo9ITEsaz0wO2s8Zi5sZW5ndGg7aysrKXt2YXIgbD1mW2tdO1wic3RyaW5nXCI9PXR5cGVvZiBsPyhqPS9ib3R0b218cmlnaHQvLnRlc3QobCksaT17bGVmdDowLHJpZ2h0OjAsY2VudGVyOmksdG9wOjEsYm90dG9tOjF9W2xdLGhbaV09Z1tsXSxcImNlbnRlclwiPT1sJiZpKyspOihqJiYobD1iKGwpLGxbXCIlXCJdPShsW1wiJVwiXXx8MCkrMTAwKSxoW2ldPWwsaSsrLGo9ITEpfXJldHVybltoLGVbMV1dfX1mdW5jdGlvbiBmKGIpe3ZhciBjPWEuY29uc3VtZVJlcGVhdGVkKGUsL14sLyxiKTtpZihjJiZcIlwiPT1jWzFdKXJldHVybiBjWzBdfXZhciBnPXtsZWZ0OntcIiVcIjowfSxjZW50ZXI6e1wiJVwiOjUwfSxyaWdodDp7XCIlXCI6MTAwfSx0b3A6e1wiJVwiOjB9LGJvdHRvbTp7XCIlXCI6MTAwfX0saD1hLm1lcmdlTmVzdGVkUmVwZWF0ZWQuYmluZChudWxsLGEubWVyZ2VEaW1lbnNpb25zLFwiIFwiKTthLmFkZFByb3BlcnRpZXNIYW5kbGVyKGQuYmluZChudWxsLDMpLGgsW1widHJhbnNmb3JtLW9yaWdpblwiXSksYS5hZGRQcm9wZXJ0aWVzSGFuZGxlcihkLmJpbmQobnVsbCwyKSxoLFtcInBlcnNwZWN0aXZlLW9yaWdpblwiXSksYS5jb25zdW1lUG9zaXRpb249ZSxhLm1lcmdlT2Zmc2V0TGlzdD1oO3ZhciBpPWEubWVyZ2VOZXN0ZWRSZXBlYXRlZC5iaW5kKG51bGwsaCxcIiwgXCIpO2EuYWRkUHJvcGVydGllc0hhbmRsZXIoZixpLFtcImJhY2tncm91bmQtcG9zaXRpb25cIixcIm9iamVjdC1wb3NpdGlvblwiXSl9KGQpLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYil7dmFyIGM9YS5jb25zdW1lVG9rZW4oL15jaXJjbGUvLGIpO2lmKGMmJmNbMF0pcmV0dXJuW1wiY2lyY2xlXCJdLmNvbmNhdChhLmNvbnN1bWVMaXN0KFthLmlnbm9yZShhLmNvbnN1bWVUb2tlbi5iaW5kKHZvaWQgMCwvXlxcKC8pKSxkLGEuaWdub3JlKGEuY29uc3VtZVRva2VuLmJpbmQodm9pZCAwLC9eYXQvKSksYS5jb25zdW1lUG9zaXRpb24sYS5pZ25vcmUoYS5jb25zdW1lVG9rZW4uYmluZCh2b2lkIDAsL15cXCkvKSldLGNbMV0pKTt2YXIgZj1hLmNvbnN1bWVUb2tlbigvXmVsbGlwc2UvLGIpO2lmKGYmJmZbMF0pcmV0dXJuW1wiZWxsaXBzZVwiXS5jb25jYXQoYS5jb25zdW1lTGlzdChbYS5pZ25vcmUoYS5jb25zdW1lVG9rZW4uYmluZCh2b2lkIDAsL15cXCgvKSksZSxhLmlnbm9yZShhLmNvbnN1bWVUb2tlbi5iaW5kKHZvaWQgMCwvXmF0LykpLGEuY29uc3VtZVBvc2l0aW9uLGEuaWdub3JlKGEuY29uc3VtZVRva2VuLmJpbmQodm9pZCAwLC9eXFwpLykpXSxmWzFdKSk7dmFyIGc9YS5jb25zdW1lVG9rZW4oL15wb2x5Z29uLyxiKTtyZXR1cm4gZyYmZ1swXT9bXCJwb2x5Z29uXCJdLmNvbmNhdChhLmNvbnN1bWVMaXN0KFthLmlnbm9yZShhLmNvbnN1bWVUb2tlbi5iaW5kKHZvaWQgMCwvXlxcKC8pKSxhLm9wdGlvbmFsKGEuY29uc3VtZVRva2VuLmJpbmQodm9pZCAwLC9ebm9uemVyb1xccyosfF5ldmVub2RkXFxzKiwvKSxcIm5vbnplcm8sXCIpLGEuY29uc3VtZVNpemVQYWlyTGlzdCxhLmlnbm9yZShhLmNvbnN1bWVUb2tlbi5iaW5kKHZvaWQgMCwvXlxcKS8pKV0sZ1sxXSkpOnZvaWQgMH1mdW5jdGlvbiBjKGIsYyl7aWYoYlswXT09PWNbMF0pcmV0dXJuXCJjaXJjbGVcIj09YlswXT9hLm1lcmdlTGlzdChiLnNsaWNlKDEpLGMuc2xpY2UoMSksW1wiY2lyY2xlKFwiLGEubWVyZ2VEaW1lbnNpb25zLFwiIGF0IFwiLGEubWVyZ2VPZmZzZXRMaXN0LFwiKVwiXSk6XCJlbGxpcHNlXCI9PWJbMF0/YS5tZXJnZUxpc3QoYi5zbGljZSgxKSxjLnNsaWNlKDEpLFtcImVsbGlwc2UoXCIsYS5tZXJnZU5vbk5lZ2F0aXZlU2l6ZVBhaXIsXCIgYXQgXCIsYS5tZXJnZU9mZnNldExpc3QsXCIpXCJdKTpcInBvbHlnb25cIj09YlswXSYmYlsxXT09Y1sxXT9hLm1lcmdlTGlzdChiLnNsaWNlKDIpLGMuc2xpY2UoMiksW1wicG9seWdvbihcIixiWzFdLGcsXCIpXCJdKTp2b2lkIDB9dmFyIGQ9YS5jb25zdW1lUGFyZW50aGVzaXNlZC5iaW5kKG51bGwsYS5wYXJzZUxlbmd0aE9yUGVyY2VudCksZT1hLmNvbnN1bWVSZXBlYXRlZC5iaW5kKHZvaWQgMCxkLC9eLyksZj1hLm1lcmdlTmVzdGVkUmVwZWF0ZWQuYmluZCh2b2lkIDAsYS5tZXJnZURpbWVuc2lvbnMsXCIgXCIpLGc9YS5tZXJnZU5lc3RlZFJlcGVhdGVkLmJpbmQodm9pZCAwLGYsXCIsXCIpO2EuYWRkUHJvcGVydGllc0hhbmRsZXIoYixjLFtcInNoYXBlLW91dHNpZGVcIl0pfShkKSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSxiKXtiLmNvbmNhdChbYV0pLmZvckVhY2goZnVuY3Rpb24oYil7YiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUmJihkW2FdPWIpfSl9dmFyIGQ9e307YyhcInRyYW5zZm9ybVwiLFtcIndlYmtpdFRyYW5zZm9ybVwiLFwibXNUcmFuc2Zvcm1cIl0pLGMoXCJ0cmFuc2Zvcm1PcmlnaW5cIixbXCJ3ZWJraXRUcmFuc2Zvcm1PcmlnaW5cIl0pLGMoXCJwZXJzcGVjdGl2ZVwiLFtcIndlYmtpdFBlcnNwZWN0aXZlXCJdKSxjKFwicGVyc3BlY3RpdmVPcmlnaW5cIixbXCJ3ZWJraXRQZXJzcGVjdGl2ZU9yaWdpblwiXSksYS5wcm9wZXJ0eU5hbWU9ZnVuY3Rpb24oYSl7cmV0dXJuIGRbYV18fGF9fShkLGYpfSgpLCFmdW5jdGlvbigpe2lmKHZvaWQgMD09PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuYW5pbWF0ZShbXSkub25jYW5jZWwpe3ZhciBhO2lmKHdpbmRvdy5wZXJmb3JtYW5jZSYmcGVyZm9ybWFuY2Uubm93KXZhciBhPWZ1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTtlbHNlIHZhciBhPWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O3ZhciBiPWZ1bmN0aW9uKGEsYixjKXt0aGlzLnRhcmdldD1hLHRoaXMuY3VycmVudFRpbWU9Yix0aGlzLnRpbWVsaW5lVGltZT1jLHRoaXMudHlwZT1cImNhbmNlbFwiLHRoaXMuYnViYmxlcz0hMSx0aGlzLmNhbmNlbGFibGU9ITEsdGhpcy5jdXJyZW50VGFyZ2V0PWEsdGhpcy5kZWZhdWx0UHJldmVudGVkPSExLHRoaXMuZXZlbnRQaGFzZT1FdmVudC5BVF9UQVJHRVQsdGhpcy50aW1lU3RhbXA9RGF0ZS5ub3coKX0sYz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYW5pbWF0ZTt3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYW5pbWF0ZT1mdW5jdGlvbihkLGUpe3ZhciBmPWMuY2FsbCh0aGlzLGQsZSk7Zi5fY2FuY2VsSGFuZGxlcnM9W10sZi5vbmNhbmNlbD1udWxsO3ZhciBnPWYuY2FuY2VsO2YuY2FuY2VsPWZ1bmN0aW9uKCl7Zy5jYWxsKHRoaXMpO3ZhciBjPW5ldyBiKHRoaXMsbnVsbCxhKCkpLGQ9dGhpcy5fY2FuY2VsSGFuZGxlcnMuY29uY2F0KHRoaXMub25jYW5jZWw/W3RoaXMub25jYW5jZWxdOltdKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuY2FsbChjLnRhcmdldCxjKX0pfSwwKX07dmFyIGg9Zi5hZGRFdmVudExpc3RlbmVyO2YuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGImJlwiY2FuY2VsXCI9PWE/dGhpcy5fY2FuY2VsSGFuZGxlcnMucHVzaChiKTpoLmNhbGwodGhpcyxhLGIpfTt2YXIgaT1mLnJlbW92ZUV2ZW50TGlzdGVuZXI7cmV0dXJuIGYucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIpe2lmKFwiY2FuY2VsXCI9PWEpe3ZhciBjPXRoaXMuX2NhbmNlbEhhbmRsZXJzLmluZGV4T2YoYik7Yz49MCYmdGhpcy5fY2FuY2VsSGFuZGxlcnMuc3BsaWNlKGMsMSl9ZWxzZSBpLmNhbGwodGhpcyxhLGIpfSxmfX19KCksZnVuY3Rpb24oYSl7dmFyIGI9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGM9bnVsbCxkPSExO3RyeXt2YXIgZT1nZXRDb21wdXRlZFN0eWxlKGIpLmdldFByb3BlcnR5VmFsdWUoXCJvcGFjaXR5XCIpLGY9XCIwXCI9PWU/XCIxXCI6XCIwXCI7Yz1iLmFuaW1hdGUoe29wYWNpdHk6W2YsZl19LHtkdXJhdGlvbjoxfSksYy5jdXJyZW50VGltZT0wLGQ9Z2V0Q29tcHV0ZWRTdHlsZShiKS5nZXRQcm9wZXJ0eVZhbHVlKFwib3BhY2l0eVwiKT09Zn1jYXRjaChhKXt9ZmluYWxseXtjJiZjLmNhbmNlbCgpfWlmKCFkKXt2YXIgZz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYW5pbWF0ZTt3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYW5pbWF0ZT1mdW5jdGlvbihiLGMpe3JldHVybiB3aW5kb3cuU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJkFycmF5LnByb3RvdHlwZS5mcm9tJiZiW1N5bWJvbC5pdGVyYXRvcl0mJihiPUFycmF5LmZyb20oYikpLEFycmF5LmlzQXJyYXkoYil8fG51bGw9PT1ifHwoYj1hLmNvbnZlcnRUb0FycmF5Rm9ybShiKSksZy5jYWxsKHRoaXMsYixjKX19fShjKSxiLnRydWU9YX0oe30sZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWItYW5pbWF0aW9ucy5taW4uanMubWFwIiwiLyohIFdPVyB3b3cuanMgLSB2MS4zLjAgLSAyMDE2LTEwLTA0XHJcbiogaHR0cHM6Ly93b3dqcy51a1xyXG4qIENvcHlyaWdodCAoYykgMjAxNiBUaG9tYXMgR3JhaW5nZXI7IExpY2Vuc2VkIE1JVCAqLyFmdW5jdGlvbihhLGIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW1wibW9kdWxlXCIsXCJleHBvcnRzXCJdLGIpO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHMpYihtb2R1bGUsZXhwb3J0cyk7ZWxzZXt2YXIgYz17ZXhwb3J0czp7fX07YihjLGMuZXhwb3J0cyksYS5XT1c9Yy5leHBvcnRzfX0odGhpcyxmdW5jdGlvbihhLGIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGMoYSxiKXtpZighKGEgaW5zdGFuY2VvZiBiKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGQoYSxiKXtyZXR1cm4gYi5pbmRleE9mKGEpPj0wfWZ1bmN0aW9uIGUoYSxiKXtmb3IodmFyIGMgaW4gYilpZihudWxsPT1hW2NdKXt2YXIgZD1iW2NdO2FbY109ZH1yZXR1cm4gYX1mdW5jdGlvbiBmKGEpe3JldHVybi9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChhKX1mdW5jdGlvbiBnKGEpe3ZhciBiPWFyZ3VtZW50cy5sZW5ndGg8PTF8fHZvaWQgMD09PWFyZ3VtZW50c1sxXT8hMTphcmd1bWVudHNbMV0sYz1hcmd1bWVudHMubGVuZ3RoPD0yfHx2b2lkIDA9PT1hcmd1bWVudHNbMl0/ITE6YXJndW1lbnRzWzJdLGQ9YXJndW1lbnRzLmxlbmd0aDw9M3x8dm9pZCAwPT09YXJndW1lbnRzWzNdP251bGw6YXJndW1lbnRzWzNdLGU9dm9pZCAwO3JldHVybiBudWxsIT1kb2N1bWVudC5jcmVhdGVFdmVudD8oZT1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpLGUuaW5pdEN1c3RvbUV2ZW50KGEsYixjLGQpKTpudWxsIT1kb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdD8oZT1kb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpLGUuZXZlbnRUeXBlPWEpOmUuZXZlbnROYW1lPWEsZX1mdW5jdGlvbiBoKGEsYil7bnVsbCE9YS5kaXNwYXRjaEV2ZW50P2EuZGlzcGF0Y2hFdmVudChiKTpiIGluKG51bGwhPWEpP2FbYl0oKTpcIm9uXCIrYiBpbihudWxsIT1hKSYmYVtcIm9uXCIrYl0oKX1mdW5jdGlvbiBpKGEsYixjKXtudWxsIT1hLmFkZEV2ZW50TGlzdGVuZXI/YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSk6bnVsbCE9YS5hdHRhY2hFdmVudD9hLmF0dGFjaEV2ZW50KFwib25cIitiLGMpOmFbYl09Y31mdW5jdGlvbiBqKGEsYixjKXtudWxsIT1hLnJlbW92ZUV2ZW50TGlzdGVuZXI/YS5yZW1vdmVFdmVudExpc3RlbmVyKGIsYywhMSk6bnVsbCE9YS5kZXRhY2hFdmVudD9hLmRldGFjaEV2ZW50KFwib25cIitiLGMpOmRlbGV0ZSBhW2JdfWZ1bmN0aW9uIGsoKXtyZXR1cm5cImlubmVySGVpZ2h0XCJpbiB3aW5kb3c/d2luZG93LmlubmVySGVpZ2h0OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHR9T2JqZWN0LmRlZmluZVByb3BlcnR5KGIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGwsbSxuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGIpe2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1iW2NdO2QuZW51bWVyYWJsZT1kLmVudW1lcmFibGV8fCExLGQuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGQmJihkLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxkLmtleSxkKX19cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXtyZXR1cm4gYyYmYShiLnByb3RvdHlwZSxjKSxkJiZhKGIsZCksYn19KCksbz13aW5kb3cuV2Vha01hcHx8d2luZG93Lk1veldlYWtNYXB8fGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe2ModGhpcyxhKSx0aGlzLmtleXM9W10sdGhpcy52YWx1ZXM9W119cmV0dXJuIG4oYSxbe2tleTpcImdldFwiLHZhbHVlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wO2I8dGhpcy5rZXlzLmxlbmd0aDtiKyspe3ZhciBjPXRoaXMua2V5c1tiXTtpZihjPT09YSlyZXR1cm4gdGhpcy52YWx1ZXNbYl19fX0se2tleTpcInNldFwiLHZhbHVlOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7Yzx0aGlzLmtleXMubGVuZ3RoO2MrKyl7dmFyIGQ9dGhpcy5rZXlzW2NdO2lmKGQ9PT1hKXJldHVybiB0aGlzLnZhbHVlc1tjXT1iLHRoaXN9cmV0dXJuIHRoaXMua2V5cy5wdXNoKGEpLHRoaXMudmFsdWVzLnB1c2goYiksdGhpc319XSksYX0oKSxwPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyfHx3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcnx8d2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXJ8fChtPWw9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7Yyh0aGlzLGEpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZudWxsIT09Y29uc29sZSYmKGNvbnNvbGUud2FybihcIk11dGF0aW9uT2JzZXJ2ZXIgaXMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGJyb3dzZXIuXCIpLGNvbnNvbGUud2FybihcIldPVy5qcyBjYW5ub3QgZGV0ZWN0IGRvbSBtdXRhdGlvbnMsIHBsZWFzZSBjYWxsIC5zeW5jKCkgYWZ0ZXIgbG9hZGluZyBuZXcgY29udGVudC5cIikpfXJldHVybiBuKGEsW3trZXk6XCJvYnNlcnZlXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fV0pLGF9KCksbC5ub3RTdXBwb3J0ZWQ9ITAsbSkscT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZXx8ZnVuY3Rpb24oYSl7dmFyIGI9LyhcXC0oW2Etel0pezF9KS9nO3JldHVybntnZXRQcm9wZXJ0eVZhbHVlOmZ1bmN0aW9uKGMpe1wiZmxvYXRcIj09PWMmJihjPVwic3R5bGVGbG9hdFwiKSxiLnRlc3QoYykmJmMucmVwbGFjZShiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGIudG9VcHBlckNhc2UoKX0pO3ZhciBkPWEuY3VycmVudFN0eWxlO3JldHVybihudWxsIT1kP2RbY106dm9pZCAwKXx8bnVsbH19fSxyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3ZhciBiPWFyZ3VtZW50cy5sZW5ndGg8PTB8fHZvaWQgMD09PWFyZ3VtZW50c1swXT97fTphcmd1bWVudHNbMF07Yyh0aGlzLGEpLHRoaXMuZGVmYXVsdHM9e2JveENsYXNzOlwid293XCIsYW5pbWF0ZUNsYXNzOlwiYW5pbWF0ZWRcIixvZmZzZXQ6MCxtb2JpbGU6ITAsbGl2ZTohMCxjYWxsYmFjazpudWxsLHNjcm9sbENvbnRhaW5lcjpudWxsLHJlc2V0QW5pbWF0aW9uOiEwfSx0aGlzLmFuaW1hdGU9ZnVuY3Rpb24oKXtyZXR1cm5cInJlcXVlc3RBbmltYXRpb25GcmFtZVwiaW4gd2luZG93P2Z1bmN0aW9uKGEpe3JldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGEpfTpmdW5jdGlvbihhKXtyZXR1cm4gYSgpfX0oKSx0aGlzLnZlbmRvcnM9W1wibW96XCIsXCJ3ZWJraXRcIl0sdGhpcy5zdGFydD10aGlzLnN0YXJ0LmJpbmQodGhpcyksdGhpcy5yZXNldEFuaW1hdGlvbj10aGlzLnJlc2V0QW5pbWF0aW9uLmJpbmQodGhpcyksdGhpcy5zY3JvbGxIYW5kbGVyPXRoaXMuc2Nyb2xsSGFuZGxlci5iaW5kKHRoaXMpLHRoaXMuc2Nyb2xsQ2FsbGJhY2s9dGhpcy5zY3JvbGxDYWxsYmFjay5iaW5kKHRoaXMpLHRoaXMuc2Nyb2xsZWQ9ITAsdGhpcy5jb25maWc9ZShiLHRoaXMuZGVmYXVsdHMpLG51bGwhPWIuc2Nyb2xsQ29udGFpbmVyJiYodGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYi5zY3JvbGxDb250YWluZXIpKSx0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZT1uZXcgbyx0aGlzLndvd0V2ZW50PWcodGhpcy5jb25maWcuYm94Q2xhc3MpfXJldHVybiBuKGEsW3trZXk6XCJpbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQ9d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxkKGRvY3VtZW50LnJlYWR5U3RhdGUsW1wiaW50ZXJhY3RpdmVcIixcImNvbXBsZXRlXCJdKT90aGlzLnN0YXJ0KCk6aShkb2N1bWVudCxcIkRPTUNvbnRlbnRMb2FkZWRcIix0aGlzLnN0YXJ0KSx0aGlzLmZpbmlzaGVkPVtdfX0se2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2lmKHRoaXMuc3RvcHBlZD0hMSx0aGlzLmJveGVzPVtdLnNsaWNlLmNhbGwodGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIrdGhpcy5jb25maWcuYm94Q2xhc3MpKSx0aGlzLmFsbD10aGlzLmJveGVzLnNsaWNlKDApLHRoaXMuYm94ZXMubGVuZ3RoKWlmKHRoaXMuZGlzYWJsZWQoKSl0aGlzLnJlc2V0U3R5bGUoKTtlbHNlIGZvcih2YXIgYj0wO2I8dGhpcy5ib3hlcy5sZW5ndGg7YisrKXt2YXIgYz10aGlzLmJveGVzW2JdO3RoaXMuYXBwbHlTdHlsZShjLCEwKX1pZih0aGlzLmRpc2FibGVkKCl8fChpKHRoaXMuY29uZmlnLnNjcm9sbENvbnRhaW5lcnx8d2luZG93LFwic2Nyb2xsXCIsdGhpcy5zY3JvbGxIYW5kbGVyKSxpKHdpbmRvdyxcInJlc2l6ZVwiLHRoaXMuc2Nyb2xsSGFuZGxlciksdGhpcy5pbnRlcnZhbD1zZXRJbnRlcnZhbCh0aGlzLnNjcm9sbENhbGxiYWNrLDUwKSksdGhpcy5jb25maWcubGl2ZSl7dmFyIGQ9bmV3IHAoZnVuY3Rpb24oYil7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspZm9yKHZhciBkPWJbY10sZT0wO2U8ZC5hZGRlZE5vZGVzLmxlbmd0aDtlKyspe3ZhciBmPWQuYWRkZWROb2Rlc1tlXTthLmRvU3luYyhmKX19KTtkLm9ic2VydmUoZG9jdW1lbnQuYm9keSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KX19fSx7a2V5Olwic3RvcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zdG9wcGVkPSEwLGoodGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyfHx3aW5kb3csXCJzY3JvbGxcIix0aGlzLnNjcm9sbEhhbmRsZXIpLGood2luZG93LFwicmVzaXplXCIsdGhpcy5zY3JvbGxIYW5kbGVyKSxudWxsIT10aGlzLmludGVydmFsJiZjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpfX0se2tleTpcInN5bmNcIix2YWx1ZTpmdW5jdGlvbigpe3Aubm90U3VwcG9ydGVkJiZ0aGlzLmRvU3luYyh0aGlzLmVsZW1lbnQpfX0se2tleTpcImRvU3luY1wiLHZhbHVlOmZ1bmN0aW9uKGEpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhJiZudWxsIT09YXx8KGE9dGhpcy5lbGVtZW50KSwxPT09YS5ub2RlVHlwZSl7YT1hLnBhcmVudE5vZGV8fGE7Zm9yKHZhciBiPWEucXVlcnlTZWxlY3RvckFsbChcIi5cIit0aGlzLmNvbmZpZy5ib3hDbGFzcyksYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZT1iW2NdO2QoZSx0aGlzLmFsbCl8fCh0aGlzLmJveGVzLnB1c2goZSksdGhpcy5hbGwucHVzaChlKSx0aGlzLnN0b3BwZWR8fHRoaXMuZGlzYWJsZWQoKT90aGlzLnJlc2V0U3R5bGUoKTp0aGlzLmFwcGx5U3R5bGUoZSwhMCksdGhpcy5zY3JvbGxlZD0hMCl9fX19LHtrZXk6XCJzaG93XCIsdmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYXBwbHlTdHlsZShhKSxhLmNsYXNzTmFtZT1hLmNsYXNzTmFtZStcIiBcIit0aGlzLmNvbmZpZy5hbmltYXRlQ2xhc3MsbnVsbCE9dGhpcy5jb25maWcuY2FsbGJhY2smJnRoaXMuY29uZmlnLmNhbGxiYWNrKGEpLGgoYSx0aGlzLndvd0V2ZW50KSx0aGlzLmNvbmZpZy5yZXNldEFuaW1hdGlvbiYmKGkoYSxcImFuaW1hdGlvbmVuZFwiLHRoaXMucmVzZXRBbmltYXRpb24pLGkoYSxcIm9hbmltYXRpb25lbmRcIix0aGlzLnJlc2V0QW5pbWF0aW9uKSxpKGEsXCJ3ZWJraXRBbmltYXRpb25FbmRcIix0aGlzLnJlc2V0QW5pbWF0aW9uKSxpKGEsXCJNU0FuaW1hdGlvbkVuZFwiLHRoaXMucmVzZXRBbmltYXRpb24pKSxhfX0se2tleTpcImFwcGx5U3R5bGVcIix2YWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMsZD1hLmdldEF0dHJpYnV0ZShcImRhdGEtd293LWR1cmF0aW9uXCIpLGU9YS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdvdy1kZWxheVwiKSxmPWEuZ2V0QXR0cmlidXRlKFwiZGF0YS13b3ctaXRlcmF0aW9uXCIpO3JldHVybiB0aGlzLmFuaW1hdGUoZnVuY3Rpb24oKXtyZXR1cm4gYy5jdXN0b21TdHlsZShhLGIsZCxlLGYpfSl9fSx7a2V5OlwicmVzZXRTdHlsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTx0aGlzLmJveGVzLmxlbmd0aDthKyspe3ZhciBiPXRoaXMuYm94ZXNbYV07Yi5zdHlsZS52aXNpYmlsaXR5PVwidmlzaWJsZVwifX19LHtrZXk6XCJyZXNldEFuaW1hdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGEpe2lmKGEudHlwZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJhbmltYXRpb25lbmRcIik+PTApe3ZhciBiPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnQ7Yi5jbGFzc05hbWU9Yi5jbGFzc05hbWUucmVwbGFjZSh0aGlzLmNvbmZpZy5hbmltYXRlQ2xhc3MsXCJcIikudHJpbSgpfX19LHtrZXk6XCJjdXN0b21TdHlsZVwiLHZhbHVlOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGImJnRoaXMuY2FjaGVBbmltYXRpb25OYW1lKGEpLGEuc3R5bGUudmlzaWJpbGl0eT1iP1wiaGlkZGVuXCI6XCJ2aXNpYmxlXCIsYyYmdGhpcy52ZW5kb3JTZXQoYS5zdHlsZSx7YW5pbWF0aW9uRHVyYXRpb246Y30pLGQmJnRoaXMudmVuZG9yU2V0KGEuc3R5bGUse2FuaW1hdGlvbkRlbGF5OmR9KSxlJiZ0aGlzLnZlbmRvclNldChhLnN0eWxlLHthbmltYXRpb25JdGVyYXRpb25Db3VudDplfSksdGhpcy52ZW5kb3JTZXQoYS5zdHlsZSx7YW5pbWF0aW9uTmFtZTpiP1wibm9uZVwiOnRoaXMuY2FjaGVkQW5pbWF0aW9uTmFtZShhKX0pLGF9fSx7a2V5OlwidmVuZG9yU2V0XCIsdmFsdWU6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1iW2NdO2FbXCJcIitjXT1kO2Zvcih2YXIgZT0wO2U8dGhpcy52ZW5kb3JzLmxlbmd0aDtlKyspe3ZhciBmPXRoaXMudmVuZG9yc1tlXTthW1wiXCIrZitjLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Muc3Vic3RyKDEpXT1kfX19fSx7a2V5OlwidmVuZG9yQ1NTXCIsdmFsdWU6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9cShhKSxkPWMuZ2V0UHJvcGVydHlDU1NWYWx1ZShiKSxlPTA7ZTx0aGlzLnZlbmRvcnMubGVuZ3RoO2UrKyl7dmFyIGY9dGhpcy52ZW5kb3JzW2VdO2Q9ZHx8Yy5nZXRQcm9wZXJ0eUNTU1ZhbHVlKFwiLVwiK2YrXCItXCIrYil9cmV0dXJuIGR9fSx7a2V5OlwiYW5pbWF0aW9uTmFtZVwiLHZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPXZvaWQgMDt0cnl7Yj10aGlzLnZlbmRvckNTUyhhLFwiYW5pbWF0aW9uLW5hbWVcIikuY3NzVGV4dH1jYXRjaChjKXtiPXEoYSkuZ2V0UHJvcGVydHlWYWx1ZShcImFuaW1hdGlvbi1uYW1lXCIpfXJldHVyblwibm9uZVwiPT09Yj9cIlwiOmJ9fSx7a2V5OlwiY2FjaGVBbmltYXRpb25OYW1lXCIsdmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYW5pbWF0aW9uTmFtZUNhY2hlLnNldChhLHRoaXMuYW5pbWF0aW9uTmFtZShhKSl9fSx7a2V5OlwiY2FjaGVkQW5pbWF0aW9uTmFtZVwiLHZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZS5nZXQoYSl9fSx7a2V5Olwic2Nyb2xsSGFuZGxlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zY3JvbGxlZD0hMH19LHtrZXk6XCJzY3JvbGxDYWxsYmFja1wiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy5zY3JvbGxlZCl7dGhpcy5zY3JvbGxlZD0hMTtmb3IodmFyIGE9W10sYj0wO2I8dGhpcy5ib3hlcy5sZW5ndGg7YisrKXt2YXIgYz10aGlzLmJveGVzW2JdO2lmKGMpe2lmKHRoaXMuaXNWaXNpYmxlKGMpKXt0aGlzLnNob3coYyk7Y29udGludWV9YS5wdXNoKGMpfX10aGlzLmJveGVzPWEsdGhpcy5ib3hlcy5sZW5ndGh8fHRoaXMuY29uZmlnLmxpdmV8fHRoaXMuc3RvcCgpfX19LHtrZXk6XCJvZmZzZXRUb3BcIix2YWx1ZTpmdW5jdGlvbihhKXtmb3IoO3ZvaWQgMD09PWEub2Zmc2V0VG9wOylhPWEucGFyZW50Tm9kZTtmb3IodmFyIGI9YS5vZmZzZXRUb3A7YS5vZmZzZXRQYXJlbnQ7KWE9YS5vZmZzZXRQYXJlbnQsYis9YS5vZmZzZXRUb3A7cmV0dXJuIGJ9fSx7a2V5OlwiaXNWaXNpYmxlXCIsdmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9YS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdvdy1vZmZzZXRcIil8fHRoaXMuY29uZmlnLm9mZnNldCxjPXRoaXMuY29uZmlnLnNjcm9sbENvbnRhaW5lciYmdGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcHx8d2luZG93LnBhZ2VZT2Zmc2V0LGQ9YytNYXRoLm1pbih0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0LGsoKSktYixlPXRoaXMub2Zmc2V0VG9wKGEpLGY9ZSthLmNsaWVudEhlaWdodDtyZXR1cm4gZD49ZSYmZj49Y319LHtrZXk6XCJkaXNhYmxlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuY29uZmlnLm1vYmlsZSYmZihuYXZpZ2F0b3IudXNlckFnZW50KX19XSksYX0oKTtiW1wiZGVmYXVsdFwiXT1yLGEuZXhwb3J0cz1iW1wiZGVmYXVsdFwiXX0pOyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6WyIkIiwicmVxdWlyZSIsImdsb2JhbCIsImpRdWVyeSIsIndpbmRvdyIsIlBvcHBlciIsIlRvb2x0aXAiLCJUb2FzdCIsIlBvcG92ZXIiLCJwb3BvdmVyIiwidCIsImUiLCJleHBvcnRzIiwiX3R5cGVvZiIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImdsb2JhbFRoaXMiLCJzZWxmIiwiYm9vdHN0cmFwIiwibiIsImkiLCJsZW5ndGgiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIm8iLCJwcm90b3R5cGUiLCJzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJyIiwiYSIsImwiLCJjIiwidSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJoIiwiZ2V0QXR0cmlidXRlIiwidHJpbSIsImYiLCJxdWVyeVNlbGVjdG9yIiwiZCIsImciLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwicGFyc2VGbG9hdCIsInNwbGl0IiwicCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsIm0iLCJub2RlVHlwZSIsIl8iLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJ2Iiwia2V5cyIsImZvckVhY2giLCJ0b1N0cmluZyIsIm1hdGNoIiwidG9Mb3dlckNhc2UiLCJSZWdFeHAiLCJ0ZXN0IiwiRXJyb3IiLCJ0b1VwcGVyQ2FzZSIsImIiLCJzdHlsZSIsInBhcmVudE5vZGUiLCJkaXNwbGF5IiwidmlzaWJpbGl0eSIsInkiLCJ3Iiwib2Zmc2V0SGVpZ2h0IiwiRSIsImJvZHkiLCJoYXNBdHRyaWJ1dGUiLCJUIiwic2V0IiwiYnNLZXkiLCJpZCIsImdldCIsIl9kZWxldGUiLCJrIiwiTCIsIkMiLCJBIiwiRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJTIiwiRCIsIkN1c3RvbUV2ZW50IiwiY2FuY2VsYWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJwcmV2ZW50RGVmYXVsdCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJJIiwiQm9vbGVhbiIsInJlcGxhY2UiLCJyZW1vdmVBdHRyaWJ1dGUiLCJPIiwiTiIsImoiLCJ4IiwiUCIsIlIiLCJIIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJCIiwiTSIsInVpZEV2ZW50IiwiUSIsIlUiLCJvcmlnaW5hbEhhbmRsZXIiLCJkZWxlZ2F0aW9uU2VsZWN0b3IiLCJGIiwiaW5kZXhPZiIsIlciLCJvbmVPZmYiLCJ0YXJnZXQiLCJkZWxlZ2F0ZVRhcmdldCIsIlYiLCJvZmYiLCJ0eXBlIiwiSyIsIm9uIiwib25lIiwiY2hhckF0Iiwic2xpY2UiLCJ0cmlnZ2VyIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsInEiLCJ6IiwiX2VsZW1lbnQiLCJjbG9zZSIsIl9nZXRSb290RWxlbWVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiZGlzcG9zZSIsImNsb3Nlc3QiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJjb250YWlucyIsIl9kZXN0cm95RWxlbWVudCIsInJlbW92ZUNoaWxkIiwialF1ZXJ5SW50ZXJmYWNlIiwiZWFjaCIsImhhbmRsZURpc21pc3MiLCJnZXRJbnN0YW5jZSIsIlgiLCJZIiwiZm4iLCJDb25zdHJ1Y3RvciIsIm5vQ29uZmxpY3QiLCJ0b2dnbGUiLCJzZXRBdHRyaWJ1dGUiLCJHIiwiWiIsImJ1dHRvbiIsIkoiLCJOdW1iZXIiLCJ0dCIsImV0Iiwic2V0RGF0YUF0dHJpYnV0ZSIsInJlbW92ZURhdGFBdHRyaWJ1dGUiLCJnZXREYXRhQXR0cmlidXRlcyIsImRhdGFzZXQiLCJnZXREYXRhQXR0cmlidXRlIiwib2Zmc2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwic2Nyb2xsVG9wIiwibGVmdCIsInNjcm9sbExlZnQiLCJwb3NpdGlvbiIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJ0b2dnbGVDbGFzcyIsImFkZCIsIm50IiwibWF0Y2hlcyIsImZpbmQiLCJkb2N1bWVudEVsZW1lbnQiLCJjb25jYXQiLCJmaW5kT25lIiwiY2hpbGRyZW4iLCJmaWx0ZXIiLCJwYXJlbnRzIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsInB1c2giLCJwcmV2IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm5leHQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJpdCIsIm90Iiwic3QiLCJpbnRlcnZhbCIsImtleWJvYXJkIiwic2xpZGUiLCJwYXVzZSIsIndyYXAiLCJ0b3VjaCIsInJ0IiwiYXQiLCJUT1VDSCIsIlBFTiIsImx0IiwiX2l0ZW1zIiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNQYXVzZWQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwidG91Y2hTdGFydFgiLCJ0b3VjaERlbHRhWCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX3RvdWNoU3VwcG9ydGVkIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJfcG9pbnRlckV2ZW50IiwiUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiaGlkZGVuIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aXNpYmlsaXR5U3RhdGUiLCJiaW5kIiwidG8iLCJfZ2V0SXRlbUluZGV4IiwiX2hhbmRsZVN3aXBlIiwiYWJzIiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsInBvaW50ZXJUeXBlIiwiY2xpZW50WCIsInRvdWNoZXMiLCJjbGVhclRpbWVvdXQiLCJ0YWdOYW1lIiwiX2dldEl0ZW1CeURpcmVjdGlvbiIsIl90cmlnZ2VyU2xpZGVFdmVudCIsInJlbGF0ZWRUYXJnZXQiLCJkaXJlY3Rpb24iLCJmcm9tIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJwYXJzZUludCIsImRlZmF1bHRJbnRlcnZhbCIsImNhcm91c2VsSW50ZXJmYWNlIiwiVHlwZUVycm9yIiwicmlkZSIsImRhdGFBcGlDbGlja0hhbmRsZXIiLCJjdCIsInV0IiwiaHQiLCJmdCIsInBhcmVudCIsImR0IiwiZ3QiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsIl9zZWxlY3RvciIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsImhpZGUiLCJzaG93IiwiY29sbGFwc2VJbnRlcmZhY2UiLCJfZ2V0RGltZW5zaW9uIiwic2V0VHJhbnNpdGlvbmluZyIsImpxdWVyeSIsInB0IiwibXQiLCJfdCIsInZ0IiwiYnQiLCJmbGlwIiwiYm91bmRhcnkiLCJyZWZlcmVuY2UiLCJwb3BwZXJDb25maWciLCJ5dCIsInd0IiwiX3BvcHBlciIsIl9tZW51IiwiX2dldE1lbnVFbGVtZW50IiwiX2luTmF2YmFyIiwiX2RldGVjdE5hdmJhciIsImRpc2FibGVkIiwiY2xlYXJNZW51cyIsImdldFBhcmVudEZyb21FbGVtZW50IiwiX2dldFBvcHBlckNvbmZpZyIsImZvY3VzIiwiZGVzdHJveSIsInVwZGF0ZSIsInNjaGVkdWxlVXBkYXRlIiwic3RvcFByb3BhZ2F0aW9uIiwiY29uc3RydWN0b3IiLCJEZWZhdWx0IiwiRGVmYXVsdFR5cGUiLCJfZ2V0UGxhY2VtZW50IiwiX2dldE9mZnNldCIsIm9mZnNldHMiLCJwbGFjZW1lbnQiLCJtb2RpZmllcnMiLCJlbmFibGVkIiwicHJldmVudE92ZXJmbG93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJhcHBseVN0eWxlIiwiZHJvcGRvd25JbnRlcmZhY2UiLCJjbGlja0V2ZW50IiwiZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiRXQiLCJUdCIsImt0IiwiYmFja2Ryb3AiLCJMdCIsIkN0IiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pc1Nob3duIiwiX2lzQm9keU92ZXJmbG93aW5nIiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfaGlkZU1vZGFsIiwiaGFuZGxlVXBkYXRlIiwiYXBwZW5kQ2hpbGQiLCJfZW5mb3JjZUZvY3VzIiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJfcmVzZXRBZGp1c3RtZW50cyIsIl9yZXNldFNjcm9sbGJhciIsIl9yZW1vdmVCYWNrZHJvcCIsImNsYXNzTmFtZSIsImN1cnJlbnRUYXJnZXQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJvdmVyZmxvd1kiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInJvdW5kIiwicmlnaHQiLCJpbm5lcldpZHRoIiwiX2dldFNjcm9sbGJhcldpZHRoIiwibWFyZ2luUmlnaHQiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiQXQiLCJTdCIsIm1vZGFsIiwiRHQiLCJJdCIsIk90IiwiTnQiLCJhcmVhIiwiYnIiLCJjb2wiLCJjb2RlIiwiZGl2IiwiZW0iLCJociIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImltZyIsImxpIiwib2wiLCJwcmUiLCJzbWFsbCIsInNwYW4iLCJzdWIiLCJzdXAiLCJzdHJvbmciLCJ1bCIsImp0IiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwibm9kZU5hbWUiLCJhdHRyaWJ1dGVzIiwibm9kZVZhbHVlIiwiaW5uZXJIVE1MIiwieHQiLCJQdCIsIlJ0IiwiSHQiLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwic2VsZWN0b3IiLCJjb250YWluZXIiLCJmYWxsYmFja1BsYWNlbWVudCIsInNhbml0aXplIiwic2FuaXRpemVGbiIsImFsbG93TGlzdCIsIkJ0IiwiQVVUTyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsIk10IiwiUXQiLCJISURFIiwiSElEREVOIiwiU0hPVyIsIlNIT1dOIiwiSU5TRVJURUQiLCJDTElDSyIsIkZPQ1VTSU4iLCJGT0NVU09VVCIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiVXQiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwiZWxlbWVudCIsImNvbmZpZyIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJEQVRBX0tFWSIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiX2dldERlbGVnYXRlQ29uZmlnIiwiY2xpY2siLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsImdldFRpcEVsZW1lbnQiLCJFVkVOVF9LRVkiLCJfaGlkZU1vZGFsSGFuZGxlciIsImlzV2l0aENvbnRlbnQiLCJhdHRhY2hTaGFkb3ciLCJnZXRSb290Tm9kZSIsIlNoYWRvd1Jvb3QiLCJvd25lckRvY3VtZW50IiwiTkFNRSIsInNldENvbnRlbnQiLCJfZ2V0QXR0YWNobWVudCIsIl9hZGRBdHRhY2htZW50Q2xhc3MiLCJfZ2V0Q29udGFpbmVyIiwiX2ZpeFRyYW5zaXRpb24iLCJfY2xlYW5UaXBDbGFzcyIsImhvdmVyIiwiZ2V0VGl0bGUiLCJzZXRFbGVtZW50Q29udGVudCIsInRleHRDb250ZW50IiwiYmVoYXZpb3IiLCJhcnJvdyIsIm9uQ3JlYXRlIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwib25VcGRhdGUiLCJfZml4VGl0bGUiLCJjb250ZW50IiwibWFwIiwiaW5zdGFuY2UiLCJwb3BwZXIiLCJGdCIsIld0IiwiS3QiLCJWdCIsInF0IiwienQiLCJYdCIsIll0IiwiY3JlYXRlIiwiX19wcm90b19fIiwiX2dldENvbnRlbnQiLCIkdCIsIkd0IiwiWnQiLCJKdCIsIm1ldGhvZCIsInRlIiwiZWUiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsIl9nZXRTY3JvbGxUb3AiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwiaGVpZ2h0Iiwic29ydCIsInBhZ2VZT2Zmc2V0IiwibWF4IiwiX2dldE9mZnNldEhlaWdodCIsImlubmVySGVpZ2h0IiwiX2FjdGl2YXRlIiwiX2NsZWFyIiwiam9pbiIsIm5lIiwiaWUiLCJvZSIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJzZSIsInJlIiwidGFiIiwiYWUiLCJhdXRvaGlkZSIsImxlIiwiY2UiLCJfY2xlYXJUaW1lb3V0IiwidWUiLCJoZSIsInRvYXN0IiwiQWxlcnQiLCJCdXR0b24iLCJDYXJvdXNlbCIsIkNvbGxhcHNlIiwiRHJvcGRvd24iLCJNb2RhbCIsIlNjcm9sbFNweSIsIlRhYiIsImNvdW50ZXJVcCIsImRlZmF1bHRzIiwiZHVyYXRpb24iLCJwcmVwZW5kIiwiYXBwZW5kIiwic3RhcnQiLCJlbmQiLCJpbnR2YWx1ZXMiLCJ1cGF0aW5nIiwiaW50ZXJ2YWxJRCIsInByb3BzIiwiZG9tZWxlbXMiLCJlbGVtcyIsIm9iaiIsImlzTmFOIiwic3RlcCIsInZhbCIsInVwZGF0aW5nIiwiZmxhdHBpY2tyIiwiX3JlcXVpcmUiLCJGcmVuY2giLCJpbnB1dCIsImFsdElucHV0IiwiYWx0Rm9ybWF0IiwiZGF0ZUZvcm1hdCIsImZpcnN0RGF5T2ZXZWVrIiwiR0xpZ2h0Ym94IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJzcXJ0IiwiYWNvcyIsIlBJIiwiaGFuZGxlcnMiLCJlbCIsInZhbHVlIiwic3BsaWNlIiwibW92ZSIsImNhbmNlbCIsInByZVYiLCJwaW5jaFN0YXJ0TGVuIiwiem9vbSIsImlzRG91YmxlVGFwIiwicm90YXRlIiwidG91Y2hTdGFydCIsIm11bHRpcG9pbnRTdGFydCIsIm11bHRpcG9pbnRFbmQiLCJwaW5jaCIsInN3aXBlIiwidGFwIiwiZG91YmxlVGFwIiwibG9uZ1RhcCIsInNpbmdsZVRhcCIsInByZXNzTW92ZSIsInR3b0ZpbmdlclByZXNzTW92ZSIsInRvdWNoTW92ZSIsInRvdWNoRW5kIiwidG91Y2hDYW5jZWwiLCJfY2FuY2VsQWxsSGFuZGxlciIsImNhbmNlbEFsbCIsImRlbHRhIiwibGFzdCIsIm5vdyIsInRhcFRpbWVvdXQiLCJzaW5nbGVUYXBUaW1lb3V0IiwibG9uZ1RhcFRpbWVvdXQiLCJzd2lwZVRpbWVvdXQiLCJ4MSIsIngyIiwieTEiLCJ5MiIsInByZVRhcFBvc2l0aW9uIiwiRGF0ZSIsInBhZ2VYIiwicGFnZVkiLCJkaXNwYXRjaCIsIl9jYW5jZWxMb25nVGFwIiwiX2NhbmNlbFNpbmdsZVRhcCIsIl9wcmV2ZW50VGFwIiwiYW5nbGUiLCJzeDIiLCJkZWx0YVgiLCJkZWx0YVkiLCJzeTIiLCJjaGFuZ2VkVG91Y2hlcyIsIl9zd2lwZURpcmVjdGlvbiIsImRlbCIsIm9uY2xvc2UiLCJzZXRab29tRXZlbnRzIiwiYWN0aXZlIiwiem9vbWVkSW4iLCJkcmFnZ2luZyIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJpbml0aWFsWCIsImluaXRpYWxZIiwieE9mZnNldCIsInlPZmZzZXQiLCJkcmFnU3RhcnQiLCJkcmFnRW5kIiwiZHJhZyIsInpvb21JbiIsInpvb21PdXQiLCJ3aWRvd1dpZHRoIiwibWF4V2lkdGgiLCJuYXR1cmFsV2lkdGgiLCJtYXhIZWlnaHQiLCJuYXR1cmFsSGVpZ2h0Iiwic2V0VHJhbnNsYXRlIiwiY2xpZW50WSIsImlzRHJhZ2dpbmciLCJ0cmFuc2Zvcm0iLCJ1c2VyQWdlbnQiLCJjcmVhdGVUb3VjaCIsIm1zTWF4VG91Y2hQb2ludHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwiT0FuaW1hdGlvbiIsIk1vekFuaW1hdGlvbiIsIldlYmtpdEFuaW1hdGlvbiIsImVsZW1lbnRzIiwic2tpbiIsImNsb3NlQnV0dG9uIiwic3RhcnRBdCIsImF1dG9wbGF5VmlkZW9zIiwiZGVzY1Bvc2l0aW9uIiwidmlkZW9zV2lkdGgiLCJiZWZvcmVTbGlkZUNoYW5nZSIsImFmdGVyU2xpZGVDaGFuZ2UiLCJiZWZvcmVTbGlkZUxvYWQiLCJhZnRlclNsaWRlTG9hZCIsInNsaWRlSW5zZXJ0ZWQiLCJzbGlkZVJlbW92ZWQiLCJvbk9wZW4iLCJvbkNsb3NlIiwibG9vcCIsInRvdWNoTmF2aWdhdGlvbiIsInRvdWNoRm9sbG93QXhpcyIsImtleWJvYXJkTmF2aWdhdGlvbiIsImNsb3NlT25PdXRzaWRlQ2xpY2siLCJwbHlyIiwiY3NzIiwianMiLCJyYXRpbyIsInlvdXR1YmUiLCJub0Nvb2tpZSIsInJlbCIsInNob3dpbmZvIiwiaXZfbG9hZF9wb2xpY3kiLCJ2aW1lbyIsImJ5bGluZSIsInBvcnRyYWl0IiwidHJhbnNwYXJlbnQiLCJvcGVuRWZmZWN0IiwiY2xvc2VFZmZlY3QiLCJzbGlkZUVmZmVjdCIsIm1vcmVUZXh0IiwibW9yZUxlbmd0aCIsImxpZ2h0Ym94SHRtbCIsImNzc0VmZWN0cyIsImZhZGUiLCJvdXQiLCJzbGlkZV9iYWNrIiwic3ZnIiwic2xpZGVIdG1sIiwiaHJlZiIsImRlc2NyaXB0aW9uIiwiZWZmZWN0Iiwibm9kZSIsImlzRnVuY3Rpb24iLCJpc1N0cmluZyIsImlzTm9kZSIsImlzQXJyYXlMaWtlIiwiaXNGaW5pdGUiLCJpc09iamVjdCIsImlzTmlsIiwiaGFzIiwic2l6ZSIsImlzTnVtYmVyIiwiYWxsIiwiZXZ0IiwiZm91bmQiLCJldmVudE5hbWUiLCJvbkVsZW1lbnQiLCJ3aXRoQ2FsbGJhY2siLCJhdm9pZER1cGxpY2F0ZSIsIm9uY2UiLCJ1c2VDYXB0dXJlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImZpcnN0Q2hpbGQiLCJwYXJlbnRFbGVtZW50IiwibXNNYXRjaGVzU2VsZWN0b3IiLCJzcmMiLCJhbHQiLCJzdWJzdHJpbmciLCJzZXR0aW5ncyIsImluZGV4IiwicGxheWVyIiwiZ2V0U2xpZGVQbGF5ZXJJbnN0YW5jZSIsInNtYWxsRGVzY3JpcHRpb24iLCJpbnNlcnRCZWZvcmUiLCJ1cmwiLCJjYWxsYmFjayIsIkltYWdlIiwib2Zmc2V0V2lkdGgiLCJyZXNpemUiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiZXhlYyIsInBvcCIsIm1wNCIsIm9nZyIsIndlYm0iLCJQbHlyIiwiZGV0YWlsIiwiYWxsb3ciLCJhcHBlbmRUbyIsIm9ubG9hZCIsImNvbnNvbGUiLCJlcnJvciIsIm1lZGlhIiwiY2xvbmVOb2RlIiwiZXZlbnRzIiwiaW5jbHVkZXMiLCJldmVudCIsImtleUNvZGUiLCJhY3RpdmVFbGVtZW50IiwidG9Mb2NhbGVMb3dlckNhc2UiLCJuZXh0U2xpZGUiLCJwcmV2U2xpZGUiLCJ0YXJnZXRUb3VjaGVzIiwiYWN0aXZlU2xpZGUiLCJvcGFjaXR5Iiwic2NhbGVYIiwic2NhbGVZIiwid2Via2l0VHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwic3Vic3RyIiwiZWZmZWN0c0NsYXNzZXMiLCJnZXRBbmltYXRpb25DbGFzc2VzIiwic2xpZGVzRGF0YSIsImJhc2VFdmVudHMiLCJnZXRTZWxlY3RvciIsIm9wZW4iLCJnZXRFbGVtZW50cyIsInByZXZBY3RpdmVTbGlkZUluZGV4IiwicHJldkFjdGl2ZVNsaWRlIiwiZ2V0RWxlbWVudEluZGV4IiwiYnVpbGQiLCJvdmVybGF5IiwiaW5uZXJUZXh0IiwiaGVhZCIsInNob3dTbGlkZSIsInByZXZCdXR0b24iLCJuZXh0QnV0dG9uIiwibGlnaHRib3hPcGVuIiwibG9hZGVyIiwic2xpZGVzQ29udGFpbmVyIiwic2xpZGVBbmltYXRlT3V0Iiwic2xpZGVBbmltYXRlSW4iLCJzbGlkZURlc2NyaXB0aW9uIiwic2xpZGVEZXNjcmlwdGlvbkNvbnRhaW5lZCIsInByZWxvYWRTbGlkZSIsInVwZGF0ZU5hdmlnYXRpb25DbGFzc2VzIiwic291cmNldHlwZSIsImdvVG9TbGlkZSIsImdldEFjdGl2ZVNsaWRlSW5kZXgiLCJwbGF5U2xpZGVWaWRlbyIsInN0b3BTbGlkZVZpZGVvIiwicGxheWluZyIsInBsYXkiLCJidWlsdCIsIm91dENsb3NlIiwiaW5pdCIsImxvb3BBdEVuZCIsImNsb3NpbmciLCJFdkVtaXR0ZXIiLCJfZXZlbnRzIiwiX29uY2VFdmVudHMiLCJlbWl0RXZlbnQiLCJhbGxPZmYiLCJpbWFnZXNMb2FkZWQiLCJvcHRpb25zIiwiZ2V0SW1hZ2VzIiwianFEZWZlcnJlZCIsIkRlZmVycmVkIiwiY2hlY2siLCJpbWFnZXMiLCJhZGRFbGVtZW50SW1hZ2VzIiwiYWRkSW1hZ2UiLCJiYWNrZ3JvdW5kIiwiYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJhZGRCYWNrZ3JvdW5kIiwicHJvZ3Jlc3MiLCJwcm9ncmVzc2VkQ291bnQiLCJoYXNBbnlCcm9rZW4iLCJjb21wbGV0ZSIsImlzTG9hZGVkIiwibm90aWZ5IiwiZGVidWciLCJsb2ciLCJpc0NvbXBsZXRlIiwiZ2V0SXNJbWFnZUNvbXBsZXRlIiwiY29uZmlybSIsInByb3h5SW1hZ2UiLCJoYW5kbGVFdmVudCIsInVuYmluZEV2ZW50cyIsIm9uZXJyb3IiLCJtYWtlSlF1ZXJ5UGx1Z2luIiwicHJvbWlzZSIsImpRdWVyeUJyaWRnZXQiLCJkYXRhIiwib3B0aW9uIiwiX2luaXQiLCJpc1BsYWluT2JqZWN0IiwiZXh0ZW5kIiwiYnJpZGdldCIsImdldFNpemUiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJwYWRkaW5nIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJveFNpemluZyIsImlzQm94U2l6ZU91dGVyIiwiaXNCb3JkZXJCb3giLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIm1hdGNoZXNTZWxlY3RvciIsImZpenp5VUlVdGlscyIsIm1vZHVsbyIsIm1ha2VBcnJheSIsInJlbW92ZUZyb20iLCJnZXRQYXJlbnQiLCJnZXRRdWVyeUVsZW1lbnQiLCJmaWx0ZXJGaW5kRWxlbWVudHMiLCJIVE1MRWxlbWVudCIsImRlYm91bmNlTWV0aG9kIiwiZG9jUmVhZHkiLCJyZWFkeVN0YXRlIiwidG9EYXNoZWQiLCJodG1sSW5pdCIsIkpTT04iLCJwYXJzZSIsIk91dGxheWVyIiwiSXRlbSIsImxheW91dCIsIl9jcmVhdGUiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJfdHJhbnNuIiwiaW5nUHJvcGVydGllcyIsImNsZWFuIiwib25FbmQiLCJnZXRQb3NpdGlvbiIsIl9nZXRPcHRpb24iLCJsYXlvdXRQb3NpdGlvbiIsImdldFhWYWx1ZSIsImdldFlWYWx1ZSIsInBlcmNlbnRQb3NpdGlvbiIsIl90cmFuc2l0aW9uVG8iLCJzZXRQb3NpdGlvbiIsImlzVHJhbnNpdGlvbmluZyIsImdldFRyYW5zbGF0ZSIsIm9uVHJhbnNpdGlvbkVuZCIsImlzQ2xlYW5pbmciLCJnb1RvIiwibW92ZVRvIiwiX25vblRyYW5zaXRpb24iLCJfcmVtb3ZlU3R5bGVzIiwiZW5hYmxlVHJhbnNpdGlvbiIsInN0YWdnZXJEZWxheSIsIm9ud2Via2l0VHJhbnNpdGlvbkVuZCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ub3RyYW5zaXRpb25lbmQiLCJwcm9wZXJ0eU5hbWUiLCJkaXNhYmxlVHJhbnNpdGlvbiIsInJlbW92ZVRyYW5zaXRpb25TdHlsZXMiLCJzdGFnZ2VyIiwicmVtb3ZlRWxlbSIsInJldmVhbCIsImlzSGlkZGVuIiwiZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSIsIm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCIsImhpZGRlblN0eWxlIiwidmlzaWJsZVN0eWxlIiwib25IaWRlVHJhbnNpdGlvbkVuZCIsImJvdHRvbSIsIm5hbWVzcGFjZSIsIiRlbGVtZW50Iiwib3V0bGF5ZXJHVUlEIiwiY29udGFpbmVyU3R5bGUiLCJpbml0TGF5b3V0Iiwib3JpZ2luTGVmdCIsIm9yaWdpblRvcCIsInJlc2l6ZUNvbnRhaW5lciIsImNvbXBhdE9wdGlvbnMiLCJob3Jpem9udGFsIiwibGF5b3V0SW5zdGFudCIsInJlbG9hZEl0ZW1zIiwic3RhbXBzIiwic3RhbXAiLCJiaW5kUmVzaXplIiwiaXRlbXMiLCJfaXRlbWl6ZSIsIl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzIiwiaXRlbVNlbGVjdG9yIiwiZ2V0SXRlbUVsZW1lbnRzIiwiX3Jlc2V0TGF5b3V0IiwiX21hbmFnZVN0YW1wcyIsIl9pc0xheW91dEluaXRlZCIsImxheW91dEl0ZW1zIiwiX2dldE1lYXN1cmVtZW50IiwiX2dldEl0ZW1zRm9yTGF5b3V0IiwiX2xheW91dEl0ZW1zIiwiX3Bvc3RMYXlvdXQiLCJpc0lnbm9yZWQiLCJfZW1pdENvbXBsZXRlT25JdGVtcyIsIl9nZXRJdGVtTGF5b3V0UG9zaXRpb24iLCJpdGVtIiwiaXNJbnN0YW50IiwiaXNMYXlvdXRJbnN0YW50IiwiX3Byb2Nlc3NMYXlvdXRRdWV1ZSIsInVwZGF0ZVN0YWdnZXIiLCJfcG9zaXRpb25JdGVtIiwiX2dldENvbnRhaW5lclNpemUiLCJfc2V0Q29udGFpbmVyTWVhc3VyZSIsImlnbm9yZSIsImdldEl0ZW0iLCJ1bmlnbm9yZSIsIl9maW5kIiwidW5zdGFtcCIsIl9nZXRCb3VuZGluZ1JlY3QiLCJfbWFuYWdlU3RhbXAiLCJfYm91bmRpbmdSZWN0IiwiX2dldEVsZW1lbnRPZmZzZXQiLCJpc1Jlc2l6ZUJvdW5kIiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJuZWVkc1Jlc2l6ZUxheW91dCIsImFkZEl0ZW1zIiwiYXBwZW5kZWQiLCJwcmVwZW5kZWQiLCJyZXZlYWxJdGVtRWxlbWVudHMiLCJnZXRJdGVtcyIsImhpZGVJdGVtRWxlbWVudHMiLCJyZW1vdmVEYXRhIiwibXMiLCJJc290b3BlIiwiaXRlbUdVSUQiLCJzb3J0RGF0YSIsInVwZGF0ZVNvcnREYXRhIiwiZ2V0U29ydERhdGEiLCJfc29ydGVycyIsIkxheW91dE1vZGUiLCJpc290b3BlIiwiZmlsdGVyZWRJdGVtcyIsIm5lZWRzVmVydGljYWxSZXNpemVMYXlvdXQiLCJnZXRDb2x1bW5XaWR0aCIsImdldFNlZ21lbnRTaXplIiwiZ2V0Um93SGVpZ2h0IiwiZ2V0Rmlyc3RJdGVtU2l6ZSIsIm1vZGVzIiwiTWFzb25yeSIsImZpdFdpZHRoIiwibWVhc3VyZUNvbHVtbnMiLCJjb2xZcyIsImNvbHMiLCJtYXhZIiwiaG9yaXpvbnRhbENvbEluZGV4IiwiZ2V0Q29udGFpbmVyV2lkdGgiLCJjb2x1bW5XaWR0aCIsImNvbnRhaW5lcldpZHRoIiwiZ3V0dGVyIiwibWluIiwiaG9yaXpvbnRhbE9yZGVyIiwiX2dldFRvcENvbFBvc2l0aW9uIiwiX2dldFRvcENvbEdyb3VwIiwiX2dldENvbEdyb3VwWSIsIl9nZXRIb3Jpem9udGFsQ29sUG9zaXRpb24iLCJfZ2V0Q29udGFpbmVyRml0V2lkdGgiLCJpc0ZpdFdpZHRoIiwiaG9yaXpvbnRhbEFsaWdubWVudCIsIlN0cmluZyIsImxheW91dE1vZGUiLCJpc0pRdWVyeUZpbHRlcmluZyIsInNvcnRBc2NlbmRpbmciLCJfZ2V0U29ydGVycyIsInNvcnRIaXN0b3J5IiwiX2luaXRMYXlvdXRNb2RlIiwiX3VwZGF0ZUl0ZW1zU29ydERhdGEiLCJhcnJhbmdlIiwiX2xheW91dCIsIl9nZXRJc0luc3RhbnQiLCJfZmlsdGVyIiwiX2JpbmRBcnJhbmdlQ29tcGxldGUiLCJfaXNJbnN0YW50IiwiX25vVHJhbnNpdGlvbiIsIl9oaWRlUmV2ZWFsIiwiX3NvcnQiLCJuZWVkUmV2ZWFsIiwibmVlZEhpZGUiLCJfZ2V0RmlsdGVyVGVzdCIsImlzIiwic29ydERhdGFQYXJzZXJzIiwiX3BhcnNlSW50IiwiX3giLCJfcGFyc2VGbG9hdCIsIl94MiIsInNvcnRCeSIsIl9nZXRJc1NhbWVTb3J0QnkiLCJfbW9kZSIsIl9maWx0ZXJSZXZlYWxBZGRlZCIsImluc2VydCIsInNodWZmbGUiLCJnZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyIsImZhZGVvdXQiLCJvbnNjcm9sbCIsImhlYWRlcl9uYXZiYXIiLCJzdGlja3kiLCJiYWNrVG9Ub3AiLCJwYWdlTGluayIsImVsZW0iLCJzY3JvbGxJbnRvVmlldyIsImZpbHRlckJ1dHRvbnMiLCJmaWx0ZXJWYWx1ZSIsImlzbyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJvbmNsaWNrIiwibmV4dFNpYmxpbmciLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsImlzRWxlbWVudCIsIk93bkVsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiaXNTaGFkb3dSb290IiwiaW5jbHVkZVNjYWxlIiwicmVjdCIsImdldFdpbmRvd1Njcm9sbCIsIndpbiIsInBhZ2VYT2Zmc2V0IiwiZ2V0SFRNTEVsZW1lbnRTY3JvbGwiLCJnZXROb2RlU2Nyb2xsIiwiZ2V0Tm9kZU5hbWUiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJnZXRXaW5kb3dTY3JvbGxCYXJYIiwiaXNTY3JvbGxQYXJlbnQiLCJfZ2V0Q29tcHV0ZWRTdHlsZSIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwiaXNFbGVtZW50U2NhbGVkIiwiZ2V0Q29tcG9zaXRlUmVjdCIsImVsZW1lbnRPclZpcnR1YWxFbGVtZW50Iiwib2Zmc2V0UGFyZW50IiwiaXNGaXhlZCIsImlzT2Zmc2V0UGFyZW50QW5FbGVtZW50Iiwib2Zmc2V0UGFyZW50SXNTY2FsZWQiLCJzY3JvbGwiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0TGF5b3V0UmVjdCIsImNsaWVudFJlY3QiLCJnZXRQYXJlbnROb2RlIiwiYXNzaWduZWRTbG90IiwiaG9zdCIsImdldFNjcm9sbFBhcmVudCIsImxpc3RTY3JvbGxQYXJlbnRzIiwibGlzdCIsIl9lbGVtZW50JG93bmVyRG9jdW1lbiIsInNjcm9sbFBhcmVudCIsImlzQm9keSIsInZpc3VhbFZpZXdwb3J0IiwidXBkYXRlZExpc3QiLCJpc1RhYmxlRWxlbWVudCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJnZXRDb250YWluaW5nQmxvY2siLCJpc0ZpcmVmb3giLCJpc0lFIiwiZWxlbWVudENzcyIsImN1cnJlbnROb2RlIiwicGVyc3BlY3RpdmUiLCJjb250YWluIiwid2lsbENoYW5nZSIsImdldE9mZnNldFBhcmVudCIsImF1dG8iLCJiYXNlUGxhY2VtZW50cyIsImNsaXBwaW5nUGFyZW50cyIsInZpZXdwb3J0IiwidmFyaWF0aW9uUGxhY2VtZW50cyIsInJlZHVjZSIsImFjYyIsInBsYWNlbWVudHMiLCJiZWZvcmVSZWFkIiwicmVhZCIsImFmdGVyUmVhZCIsImJlZm9yZU1haW4iLCJtYWluIiwiYWZ0ZXJNYWluIiwiYmVmb3JlV3JpdGUiLCJ3cml0ZSIsImFmdGVyV3JpdGUiLCJtb2RpZmllclBoYXNlcyIsIm9yZGVyIiwiTWFwIiwidmlzaXRlZCIsIlNldCIsInJlc3VsdCIsIm1vZGlmaWVyIiwibmFtZSIsInJlcXVpcmVzIiwicmVxdWlyZXNJZkV4aXN0cyIsImRlcCIsImRlcE1vZGlmaWVyIiwib3JkZXJNb2RpZmllcnMiLCJvcmRlcmVkTW9kaWZpZXJzIiwicGhhc2UiLCJkZWJvdW5jZSIsInBlbmRpbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJ1bmRlZmluZWQiLCJmb3JtYXQiLCJzdHIiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJJTlZBTElEX01PRElGSUVSX0VSUk9SIiwiTUlTU0lOR19ERVBFTkRFTkNZX0VSUk9SIiwiVkFMSURfUFJPUEVSVElFUyIsInZhbGlkYXRlTW9kaWZpZXJzIiwicmVxdWlyZW1lbnQiLCJtb2QiLCJ1bmlxdWVCeSIsImFyciIsImlkZW50aWZpZXJzIiwiaWRlbnRpZmllciIsImdldEJhc2VQbGFjZW1lbnQiLCJtZXJnZUJ5TmFtZSIsIm1lcmdlZCIsImN1cnJlbnQiLCJleGlzdGluZyIsImdldFZpZXdwb3J0UmVjdCIsImdldERvY3VtZW50UmVjdCIsIndpblNjcm9sbCIsInNjcm9sbFdpZHRoIiwiY2hpbGQiLCJyb290Tm9kZSIsImlzU2FtZU5vZGUiLCJyZWN0VG9DbGllbnRSZWN0IiwiZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiY2FuRXNjYXBlQ2xpcHBpbmciLCJjbGlwcGVyRWxlbWVudCIsImdldENsaXBwaW5nUmVjdCIsInJvb3RCb3VuZGFyeSIsIm1haW5DbGlwcGluZ1BhcmVudHMiLCJmaXJzdENsaXBwaW5nUGFyZW50IiwiY2xpcHBpbmdSZWN0IiwiYWNjUmVjdCIsImdldFZhcmlhdGlvbiIsImdldE1haW5BeGlzRnJvbVBsYWNlbWVudCIsImNvbXB1dGVPZmZzZXRzIiwiX3JlZiIsImJhc2VQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJjb21tb25YIiwiY29tbW9uWSIsIm1haW5BeGlzIiwibGVuIiwiZ2V0RnJlc2hTaWRlT2JqZWN0IiwibWVyZ2VQYWRkaW5nT2JqZWN0IiwicGFkZGluZ09iamVjdCIsImV4cGFuZFRvSGFzaE1hcCIsImhhc2hNYXAiLCJkZXRlY3RPdmVyZmxvdyIsInN0YXRlIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwbGFjZW1lbnQiLCJfb3B0aW9ucyRib3VuZGFyeSIsIl9vcHRpb25zJHJvb3RCb3VuZGFyeSIsIl9vcHRpb25zJGVsZW1lbnRDb250ZSIsImVsZW1lbnRDb250ZXh0IiwiX29wdGlvbnMkYWx0Qm91bmRhcnkiLCJhbHRCb3VuZGFyeSIsIl9vcHRpb25zJHBhZGRpbmciLCJhbHRDb250ZXh0IiwicG9wcGVyUmVjdCIsInJlY3RzIiwiY2xpcHBpbmdDbGllbnRSZWN0IiwiY29udGV4dEVsZW1lbnQiLCJyZWZlcmVuY2VDbGllbnRSZWN0IiwicG9wcGVyT2Zmc2V0cyIsInN0cmF0ZWd5IiwicG9wcGVyQ2xpZW50UmVjdCIsImVsZW1lbnRDbGllbnRSZWN0Iiwib3ZlcmZsb3dPZmZzZXRzIiwib2Zmc2V0RGF0YSIsIm1vZGlmaWVyc0RhdGEiLCJtdWx0aXBseSIsImF4aXMiLCJJTlZBTElEX0VMRU1FTlRfRVJST1IiLCJJTkZJTklURV9MT09QX0VSUk9SIiwiREVGQVVMVF9PUFRJT05TIiwiYXJlVmFsaWRFbGVtZW50cyIsInNvbWUiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwiY3JlYXRlUG9wcGVyIiwic3R5bGVzIiwiZWZmZWN0Q2xlYW51cEZucyIsImlzRGVzdHJveWVkIiwic2V0T3B0aW9ucyIsInNldE9wdGlvbnNBY3Rpb24iLCJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwic2Nyb2xsUGFyZW50cyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImZsaXBNb2RpZmllciIsIl9yZWYyIiwibWFyZ2luIiwid2FybiIsInJ1bk1vZGlmaWVyRWZmZWN0cyIsImZvcmNlVXBkYXRlIiwiX3N0YXRlJGVsZW1lbnRzIiwicmVzZXQiLCJfX2RlYnVnX2xvb3BzX18iLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwib25GaXJzdFVwZGF0ZSIsIl9yZWYzIiwiX3JlZjMkb3B0aW9ucyIsImNsZWFudXBGbiIsIm5vb3BGbiIsInBhc3NpdmUiLCJlZmZlY3QkMiIsIl9vcHRpb25zJHNjcm9sbCIsIl9vcHRpb25zJHJlc2l6ZSIsImV2ZW50TGlzdGVuZXJzIiwicG9wcGVyT2Zmc2V0cyQxIiwidW5zZXRTaWRlcyIsInJvdW5kT2Zmc2V0c0J5RFBSIiwiZHByIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm1hcFRvU3R5bGVzIiwiX09iamVjdCRhc3NpZ24yIiwiZ3B1QWNjZWxlcmF0aW9uIiwiYWRhcHRpdmUiLCJyb3VuZE9mZnNldHMiLCJfb2Zmc2V0cyR4IiwiX29mZnNldHMkeSIsImhhc1giLCJoYXNZIiwic2lkZVgiLCJzaWRlWSIsImhlaWdodFByb3AiLCJ3aWR0aFByb3AiLCJvZmZzZXRZIiwib2Zmc2V0WCIsImNvbW1vblN0eWxlcyIsIl9yZWY0IiwiX09iamVjdCRhc3NpZ24iLCJjb21wdXRlU3R5bGVzIiwiX3JlZjUiLCJfb3B0aW9ucyRncHVBY2NlbGVyYXQiLCJfb3B0aW9ucyRhZGFwdGl2ZSIsIl9vcHRpb25zJHJvdW5kT2Zmc2V0cyIsInByb3BlcnR5IiwiY29tcHV0ZVN0eWxlcyQxIiwiYXBwbHlTdHlsZXMiLCJlZmZlY3QkMSIsImluaXRpYWxTdHlsZXMiLCJzdHlsZVByb3BlcnRpZXMiLCJhdHRyaWJ1dGUiLCJhcHBseVN0eWxlcyQxIiwiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCJpbnZlcnREaXN0YW5jZSIsInNraWRkaW5nIiwiZGlzdGFuY2UiLCJfb3B0aW9ucyRvZmZzZXQiLCJfZGF0YSRzdGF0ZSRwbGFjZW1lbnQiLCJvZmZzZXQkMSIsImhhc2gkMSIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImhhc2giLCJnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwiZmxpcFZhcmlhdGlvbnMiLCJfb3B0aW9ucyRhbGxvd2VkQXV0b1AiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJwbGFjZW1lbnRzJDEiLCJhbGxvd2VkUGxhY2VtZW50cyIsIm92ZXJmbG93cyIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwib3Bwb3NpdGVQbGFjZW1lbnQiLCJfc2tpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJhbHRBeGlzIiwiY2hlY2tBbHRBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwicHJlZmVycmVkUGxhY2VtZW50IiwiaXNCYXNlUGxhY2VtZW50IiwicmVmZXJlbmNlUmVjdCIsImNoZWNrc01hcCIsIm1ha2VGYWxsYmFja0NoZWNrcyIsImZpcnN0Rml0dGluZ1BsYWNlbWVudCIsIl9iYXNlUGxhY2VtZW50IiwiaXNTdGFydFZhcmlhdGlvbiIsImlzVmVydGljYWwiLCJtYWluVmFyaWF0aW9uU2lkZSIsImFsdFZhcmlhdGlvblNpZGUiLCJjaGVja3MiLCJldmVyeSIsIm51bWJlck9mQ2hlY2tzIiwiX2xvb3AiLCJfaSIsImZpdHRpbmdQbGFjZW1lbnQiLCJfcmV0IiwiZmxpcCQxIiwiZ2V0QWx0QXhpcyIsIndpdGhpbiIsIm1pbiQxIiwibWF4JDEiLCJ3aXRoaW5NYXhDbGFtcCIsIl9vcHRpb25zJHRldGhlciIsInRldGhlciIsIl9vcHRpb25zJHRldGhlck9mZnNldCIsInRldGhlck9mZnNldCIsInRldGhlck9mZnNldFZhbHVlIiwibm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlIiwib2Zmc2V0TW9kaWZpZXJTdGF0ZSIsIl9vZmZzZXRNb2RpZmllclN0YXRlJCIsIm1haW5TaWRlIiwiYWx0U2lkZSIsImFkZGl0aXZlIiwibWluTGVuIiwibWF4TGVuIiwiYXJyb3dFbGVtZW50IiwiYXJyb3dSZWN0IiwiYXJyb3dQYWRkaW5nT2JqZWN0IiwiYXJyb3dQYWRkaW5nTWluIiwiYXJyb3dQYWRkaW5nTWF4IiwiYXJyb3dMZW4iLCJtaW5PZmZzZXQiLCJtYXhPZmZzZXQiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNaW4iLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIiwiX21haW5TaWRlIiwiX2FsdFNpZGUiLCJfb2Zmc2V0IiwiX21pbiIsIl9tYXgiLCJpc09yaWdpblNpZGUiLCJfb2Zmc2V0TW9kaWZpZXJWYWx1ZSIsIl90ZXRoZXJNaW4iLCJfdGV0aGVyTWF4IiwiX3ByZXZlbnRlZE9mZnNldCIsInByZXZlbnRPdmVyZmxvdyQxIiwidG9QYWRkaW5nT2JqZWN0IiwiX3N0YXRlJG1vZGlmaWVyc0RhdGEkIiwibWluUHJvcCIsIm1heFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiY2xpZW50U2l6ZSIsImNlbnRlclRvUmVmZXJlbmNlIiwiY2VudGVyIiwiYXhpc1Byb3AiLCJjZW50ZXJPZmZzZXQiLCJfb3B0aW9ucyRlbGVtZW50IiwiYXJyb3ckMSIsImdldFNpZGVPZmZzZXRzIiwicHJldmVudGVkT2Zmc2V0cyIsImlzQW55U2lkZUZ1bGx5Q2xpcHBlZCIsInNpZGUiLCJyZWZlcmVuY2VPdmVyZmxvdyIsInBvcHBlckFsdE92ZXJmbG93IiwicmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzIiwicG9wcGVyRXNjYXBlT2Zmc2V0cyIsImlzUmVmZXJlbmNlSGlkZGVuIiwiaGFzUG9wcGVyRXNjYXBlZCIsImhpZGUkMSIsImRlZmF1bHRNb2RpZmllcnMkMSIsImNyZWF0ZVBvcHBlciQxIiwiY3JlYXRlUG9wcGVyTGl0ZSIsInRucyIsIkFpIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJOaSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJMaSIsIkJpIiwiU2kiLCJzZXRJdGVtIiwiSGkiLCJmYWtlIiwiT2kiLCJEaSIsImtpIiwiaW5zZXJ0UnVsZSIsImFkZFJ1bGUiLCJSaSIsImNzc1J1bGVzIiwicnVsZXMiLCJJaSIsIlBpIiwiemkiLCJXaSIsInFpIiwiRmkiLCJqaSIsIlZpIiwiR2kiLCJRaSIsIlhpIiwiWWkiLCJLaSIsIkppIiwiVWkiLCJaaSIsInRvcGljcyIsImVtaXQiLCIkaSIsIm1vZGUiLCJlZGdlUGFkZGluZyIsImZpeGVkV2lkdGgiLCJhdXRvV2lkdGgiLCJ2aWV3cG9ydE1heCIsInNsaWRlQnkiLCJjb250cm9scyIsImNvbnRyb2xzUG9zaXRpb24iLCJjb250cm9sc1RleHQiLCJjb250cm9sc0NvbnRhaW5lciIsIm5hdiIsIm5hdlBvc2l0aW9uIiwibmF2Q29udGFpbmVyIiwibmF2QXNUaHVtYm5haWxzIiwiYXJyb3dLZXlzIiwic3BlZWQiLCJhdXRvcGxheSIsImF1dG9wbGF5UG9zaXRpb24iLCJhdXRvcGxheVRpbWVvdXQiLCJhdXRvcGxheURpcmVjdGlvbiIsImF1dG9wbGF5VGV4dCIsImF1dG9wbGF5SG92ZXJQYXVzZSIsImF1dG9wbGF5QnV0dG9uIiwiYXV0b3BsYXlCdXR0b25PdXRwdXQiLCJhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5IiwiYW5pbWF0ZUluIiwiYW5pbWF0ZU91dCIsImFuaW1hdGVOb3JtYWwiLCJhbmltYXRlRGVsYXkiLCJyZXdpbmQiLCJhdXRvSGVpZ2h0IiwicmVzcG9uc2l2ZSIsImxhenlsb2FkIiwibGF6eWxvYWRTZWxlY3RvciIsIm1vdXNlRHJhZyIsInN3aXBlQW5nbGUiLCJuZXN0ZWQiLCJwcmV2ZW50QWN0aW9uV2hlblJ1bm5pbmciLCJwcmV2ZW50U2Nyb2xsT25Ub3VjaCIsImZyZWV6YWJsZSIsIm9uSW5pdCIsInVzZUxvY2FsU3RvcmFnZSIsIm5vbmNlIiwiRU5URVIiLCJTUEFDRSIsImxvY2FsU3RvcmFnZSIsInJlbW92ZUl0ZW0iLCJ0bnNBcHAiLCJ0QyIsInRQTCIsInRNUSIsIm1hdGNoTWVkaWEiLCJtc01hdGNoTWVkaWEiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwiY3VycmVudFN0eWxlIiwidFRmIiwidDNEIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInRURHUiLCJ0VERlIiwidEFEdSIsInRBRGUiLCJ0VEUiLCJ0QUUiLCJvdXRlckhUTUwiLCJybiIsIkVuIiwic24iLCJ1biIsImZpeGVkV2lkdGhWaWV3cG9ydFdpZHRoIiwic2hlZXQiLCJjZWlsIiwibG4iLCJfbiIsImVuIiwidG4iLCJ0bnNJZCIsIlRuIiwib2kiLCJrZXlkb3duIiwicGkiLCJ3ZSIsIkNlIiwiYWkiLCJoaSIsIkFlIiwiU2UiLCJMZSIsInJpIiwiSGUiLCJQZSIsImZpIiwidmkiLCJFZSIsIm1vdXNlb3ZlciIsInplIiwibW91c2VvdXQiLCJ1aSIsInZpc2liaWxpdHljaGFuZ2UiLCJxZSIsInRvdWNoc3RhcnQiLCJ4aSIsInRvdWNobW92ZSIsImJpIiwidG91Y2hlbmQiLCJ3aSIsInRvdWNoY2FuY2VsIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsImZlIiwiZGUiLCJ2ZSIsInBlIiwibG9hZCIsImtuIiwiUm4iLCJtZSIsInllIiwiZ2UiLCJ4ZSIsImJlIiwiTWUiLCJUZSIsIk5lIiwiTWkiLCJCZSIsImFuIiwiT2UiLCJEZSIsImtlIiwiUmUiLCJJZSIsIldlIiwiRmUiLCJqZSIsIlZlIiwiR2UiLCJRZSIsIlhlIiwiWWUiLCJLZSIsIkplIiwiVWUiLCIkZSIsInRhYmluZGV4IiwiZm9udFNpemUiLCJobiIsImNuIiwiZG4iLCJ2biIsIm1uIiwieW4iLCJfZSIsIlplIiwiSm4iLCJ0aSIsIlpuIiwiQ2kiLCJlaSIsInZlcnNpb24iLCJnZXRJbmZvIiwiRWkiLCJjaSIsImlzT24iLCJ1cGRhdGVTbGlkZXJIZWlnaHQiLCJGbiIsIm93bmVyTm9kZSIsIkNuIiwiZGkiLCJmaXJzdEVsZW1lbnRDaGlsZCIsInJlYnVpbGQiLCJubiIsInBuIiwiem4iLCJJbiIsImduIiwiJG4iLCJibiIsInduIiwieG4iLCJqbiIsIlZuIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiSG4iLCJUaSIsIlFuIiwiS24iLCJBbiIsIk1uIiwiUG4iLCJEbiIsIkJuIiwiTG4iLCJXbiIsIk5uIiwiU24iLCJkZWxldGVSdWxlIiwicmVtb3ZlUnVsZSIsIk9uIiwic3Jjc2V0IiwicW4iLCJHbiIsIlhuIiwiWW4iLCJVbiIsIm5pIiwiaWkiLCJzaSIsIm1pIiwic3JjRWxlbWVudCIsInlpIiwicmV0dXJuVmFsdWUiLCJnaSIsImF0YW4yIiwic2xpZGVJdGVtcyIsIm5hdkl0ZW1zIiwiaGFzQ29udHJvbHMiLCJjbG9uZUNvdW50Iiwic2xpZGVDb3VudCIsInNsaWRlQ291bnROZXciLCJpbmRleENhY2hlZCIsImRpc3BsYXlJbmRleCIsIm5hdkN1cnJlbnRJbmRleCIsIm5hdkN1cnJlbnRJbmRleENhY2hlZCIsInBhZ2VzIiwicGFnZXNDYWNoZWQiLCJfZGVsYXkiLCJfZW5kRGVsYXkiLCJfZmlsbCIsIl9pdGVyYXRpb25TdGFydCIsIl9pdGVyYXRpb25zIiwiX2R1cmF0aW9uIiwiX3BsYXliYWNrUmF0ZSIsIl9kaXJlY3Rpb24iLCJfZWFzaW5nIiwiX2Vhc2luZ0Z1bmN0aW9uIiwiaXNEZXByZWNhdGVkIiwiZmlsbCIsImdldE93blByb3BlcnR5TmFtZXMiLCJudW1lcmljVGltaW5nVG9PYmplY3QiLCJhbmltYXRpb25UaW1pbmdGdW5jdGlvbiIsIm1pZGRsZSIsInBsYXliYWNrUmF0ZSIsIml0ZXJhdGlvbnMiLCJlbmREZWxheSIsIml0ZXJhdGlvblN0YXJ0IiwiX3NldE1lbWJlciIsIl9lZmZlY3QiLCJfdGltaW5nSW5wdXQiLCJfdGltaW5nIiwibm9ybWFsaXplVGltaW5nSW5wdXQiLCJhY3RpdmVEdXJhdGlvbiIsImNhbGN1bGF0ZUFjdGl2ZUR1cmF0aW9uIiwiX2FuaW1hdGlvbiIsIl9yZWJ1aWxkVW5kZXJseWluZ0FuaW1hdGlvbiIsInRpbWluZyIsImVhc2luZyIsImVhc2UiLCJjbG9uZVRpbWluZ0lucHV0IiwibWFrZVRpbWluZyIsImNhbGN1bGF0ZUl0ZXJhdGlvblByb2dyZXNzIiwiY2FsY3VsYXRlUGhhc2UiLCJub3JtYWxpemVFYXNpbmciLCJwYXJzZUVhc2luZ0Z1bmN0aW9uIiwibGFzdEluZGV4T2YiLCJjb21wb3NpdGUiLCJET01FeGNlcHRpb24iLCJOT1RfU1VQUE9SVEVEX0VSUiIsIm1lc3NhZ2UiLCJib3JkZXIiLCJib3JkZXJCb3R0b20iLCJib3JkZXJDb2xvciIsImJvcmRlckxlZnQiLCJib3JkZXJSYWRpdXMiLCJib3JkZXJSaWdodCIsImJvcmRlclRvcCIsImZsZXgiLCJmb250Iiwib3V0bGluZSIsImNyZWF0ZUVsZW1lbnROUyIsInRoaW4iLCJtZWRpdW0iLCJ0aGljayIsImxhcmdlIiwiZm9udFdlaWdodCIsIm5vcm1hbCIsImJvbGQiLCJvdXRsaW5lV2lkdGgiLCJ0ZXh0U2hhZG93Iiwibm9uZSIsImJveFNoYWRvdyIsImNvbnZlcnRUb0FycmF5Rm9ybSIsIm5vcm1hbGl6ZUtleWZyYW1lcyIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJ0b0RhdGVTdHJpbmciLCJkZXByZWNhdGVkIiwiYW5pbWF0ZSIsImFwcGx5RnJvbSIsImFwcGx5VG8iLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsImVhc2luZ0Z1bmN0aW9uIiwiaW50ZXJwb2xhdGlvbiIsInByb3BlcnR5SW50ZXJwb2xhdGlvbiIsImNvbnZlcnRFZmZlY3RJbnB1dCIsImNsZWFyIiwiSW50ZXJwb2xhdGlvbiIsImFkZFByb3BlcnRpZXNIYW5kbGVyIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJib3JkZXJMZWZ0Q29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyU3BhY2luZyIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiY2xpcCIsImNvbG9yIiwibGV0dGVyU3BhY2luZyIsImxpbmVIZWlnaHQiLCJtaW5IZWlnaHQiLCJtaW5XaWR0aCIsIm91dGxpbmVDb2xvciIsIm91dGxpbmVPZmZzZXQiLCJ0ZXh0SW5kZW50IiwidmVydGljYWxBbGlnbiIsIndvcmRTcGFjaW5nIiwiekluZGV4IiwiX3RvdGFsRHVyYXRpb24iLCJLZXlmcmFtZUVmZmVjdCIsIl91cGRhdGUiLCJfaGFzU2FtZVRhcmdldCIsIl90YXJnZXQiLCJfaWQiLCJOdWxsRWZmZWN0IiwiX3N1cnJvZ2F0ZVN0eWxlIiwiX3N0eWxlIiwiX2xlbmd0aCIsIl9pc0FuaW1hdGVkUHJvcGVydHkiLCJfdXBkYXRlSW5kaWNlcyIsIl93ZWJBbmltYXRpb25zUGF0Y2hlZFN0eWxlIiwiX3NldCIsInBhcmVudFJ1bGUiLCJnZXRQcm9wZXJ0eUNTU1ZhbHVlIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJ0aW1lbGluZSIsIl9wbGF5IiwiZG90Iiwic2luIiwiY29zIiwiY29tcG9zZU1hdHJpeCIsInF1YXQiLCJzZXF1ZW5jZU51bWJlciIsImN1cnJlbnRUaW1lIiwidGltZWxpbmVUaW1lIiwiZXZlbnRQaGFzZSIsIkFUX1RBUkdFVCIsInRpbWVTdGFtcCIsIkFuaW1hdGlvbiIsIl9zZXF1ZW5jZU51bWJlciIsIl9jdXJyZW50VGltZSIsIl9zdGFydFRpbWUiLCJfcGF1c2VkIiwiX2luVGltZWxpbmUiLCJfZmluaXNoZWRGbGFnIiwib25maW5pc2giLCJfZmluaXNoSGFuZGxlcnMiLCJfaW5FZmZlY3QiLCJfaWRsZSIsIl9jdXJyZW50VGltZVBlbmRpbmciLCJfZW5zdXJlQWxpdmUiLCJfYW5pbWF0aW9ucyIsIl90aWNrQ3VycmVudFRpbWUiLCJfaXNGaW5pc2hlZCIsInJlc3RhcnQiLCJfdGltZWxpbmUiLCJhcHBseURpcnRpZWRBbmltYXRpb24iLCJzdGFydFRpbWUiLCJwbGF5U3RhdGUiLCJfcmV3aW5kIiwiZmluaXNoIiwicmV2ZXJzZSIsIl9maXJlRXZlbnRzIiwiX3RpY2siLCJfbmVlZHNUaWNrIiwicnVubmluZyIsIl90YXJnZXRBbmltYXRpb25zIiwiX2FjdGl2ZUFuaW1hdGlvbnMiLCJfbWFya1RhcmdldCIsIl91bm1hcmtUYXJnZXQiLCJwZXJmb3JtYW5jZSIsInJhZCIsImRlZyIsImdyYWQiLCJ0dXJuIiwidGFuIiwicHgiLCJtYWtlTWF0cml4RGVjb21wb3NpdGlvbiIsImlnbm9yZUNhc2UiLCJjb25zdW1lVHJpbW1lZCIsImNvbnN1bWVUb2tlbiIsImNvbnN1bWVSZXBlYXRlZCIsImNvbnN1bWVQYXJlbnRoZXNpc2VkIiwib3B0aW9uYWwiLCJjb25zdW1lTGlzdCIsIm1lcmdlTmVzdGVkUmVwZWF0ZWQiLCJtZXJnZVdyYXBwZWROZXN0ZWRSZXBlYXRlZCIsIm1lcmdlTGlzdCIsImluc2V0IiwiY29uc3VtZUxlbmd0aE9yUGVyY2VudCIsImxlbmd0aHMiLCJjb25zdW1lQ29sb3IiLCJtZXJnZURpbWVuc2lvbnMiLCJtZXJnZUNvbG9ycyIsInRvRml4ZWQiLCJjbGFtcCIsInBhcnNlTnVtYmVyIiwibWVyZ2VOdW1iZXJzIiwibnVtYmVyVG9TdHJpbmciLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImdldEltYWdlRGF0YSIsImNsZWFyUmVjdCIsImdldENvbnRleHQiLCJzZWFyY2giLCJzb3VyY2UiLCJldmFsIiwicGFyc2VMZW5ndGgiLCJwYXJzZUxlbmd0aE9yUGVyY2VudCIsInBhcnNlQW5nbGUiLCJjb25zdW1lU2l6ZVBhaXJMaXN0IiwibWVyZ2VOb25OZWdhdGl2ZVNpemVQYWlyIiwicGFyc2VCb3giLCJtZXJnZUJveGVzIiwibGFzdEluZGV4IiwiZGVjb21wb3NpdGlvblBhaXIiLCJtYXRyaXgiLCJtYXRyaXgzZCIsInJvdGF0ZXgiLCJyb3RhdGV5Iiwicm90YXRleiIsInJvdGF0ZTNkIiwic2NhbGUiLCJzY2FsZXgiLCJzY2FsZXkiLCJzY2FsZXoiLCJzY2FsZTNkIiwic2tldyIsInNrZXd4Iiwic2tld3kiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGV4IiwidHJhbnNsYXRleSIsInRyYW5zbGF0ZXoiLCJ0cmFuc2xhdGUzZCIsImNvbnN1bWVQb3NpdGlvbiIsIm1lcmdlT2Zmc2V0TGlzdCIsIm9uY2FuY2VsIiwiX2NhbmNlbEhhbmRsZXJzIiwiV09XIiwiaW5pdEN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnRPYmplY3QiLCJldmVudFR5cGUiLCJhdHRhY2hFdmVudCIsImRldGFjaEV2ZW50IiwiV2Vha01hcCIsIk1veldlYWtNYXAiLCJ2YWx1ZXMiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIk1vek11dGF0aW9uT2JzZXJ2ZXIiLCJub3RTdXBwb3J0ZWQiLCJib3hDbGFzcyIsImFuaW1hdGVDbGFzcyIsIm1vYmlsZSIsImxpdmUiLCJzY3JvbGxDb250YWluZXIiLCJyZXNldEFuaW1hdGlvbiIsInZlbmRvcnMiLCJzY3JvbGxIYW5kbGVyIiwic2Nyb2xsQ2FsbGJhY2siLCJzY3JvbGxlZCIsImFuaW1hdGlvbk5hbWVDYWNoZSIsIndvd0V2ZW50IiwiZmluaXNoZWQiLCJzdG9wcGVkIiwiYm94ZXMiLCJyZXNldFN0eWxlIiwiYWRkZWROb2RlcyIsImRvU3luYyIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY3VzdG9tU3R5bGUiLCJjYWNoZUFuaW1hdGlvbk5hbWUiLCJ2ZW5kb3JTZXQiLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhbmltYXRpb25OYW1lIiwiY2FjaGVkQW5pbWF0aW9uTmFtZSIsInZlbmRvckNTUyIsImlzVmlzaWJsZSIsInN0b3AiXSwic291cmNlUm9vdCI6IiJ9